;;;============================================================================

;;; File: "syntax-case.scm", Time-stamp: <2014-03-21 22:26:28 matthastie>

;;; Copyright (c) 1998-2008 by Marc Feeley, All Rights Reserved.

;;; This is version 3.2 .

;; This version includes a patch which avoids quoting self-evaluating
;; constants.  This makes it possible to use some Gambit specific forms
;; such as declare, namespace and define-macro.

;; This is an implementation of "syntax-case" for the Gambit-C 4.0
;; system based on the portable implementation "psyntax.ss".  At the
;; top of the file "psyntax.ss" can be found this information:
;;
;;      Portable implementation of syntax-case
;;      Extracted from Chez Scheme Version 7.3 (Feb 26, 2007)
;;      Authors: R. Kent Dybvig, Oscar Waddell, Bob Hieb, Carl Bruggeman

;; This file can be used to replace the builtin macro expander of the
;; interpreter and compiler.  Source code correlation information
;; (filename and position in file) is preserved by the expander.  The
;; expander mangles non-global variable names and this complicates
;; debugging somewhat.  Note that Gambit's normal parser processes the
;; input after expansion by the syntax-case expander.  Since the
;; syntax-case expander does not know about Gambit's syntactic
;; extensions (like DSSSL parameters) some of the syntactic
;; extensions cannot be used.  On the other hand, the syntax-case
;; expander defines some new special forms, such as "module",
;; "alias", and "eval-when".

;; You can simply load this file at the REPL with:
;;
;;   (load "syntax-case")
;;
;; For faster macro processing it is worthwhile to compile the file
;; with the compiler.  You can also rename this file to "gambcext.scm"
;; and put it in the Gambit "lib" installation directory so that it is
;; loaded every time the interpreter and compiler are started.
;;
;; Alternatively, the expander can be loaded from the command line
;; like this:
;;
;;   % gsi ~~lib/syntax-case -
;;   > (pp (lambda (x y) (if (< x y) (let ((z (* x x))) z))))
;;   (lambda (%%x0 %%y1)
;;     (if (< %%x0 %%y1) ((lambda (%%z2) %%z2) (* %%x0 %%x0)) (void)))

;;;============================================================================

(##declare
 (standard-bindings)
 (extended-bindings)
 (inlining-limit 100)
 (block)
)

(##namespace ("sc#"))

(##include "~~lib/gambit#.scm")

(##namespace (""

$make-environment
$sc-put-cte
$syntax-dispatch
bound-identifier=?
datum->syntax
environment?
free-identifier=?
generate-temporaries
identifier?
interaction-environment
literal-identifier=?
syntax-error
syntax->datum
syntax->list
syntax->vector
$load-module
$update-module
$include-file-hook
$generate-id
syntax-case-debug
))

(##namespace ("sc#"

interaction-environment
eval
gensym

))

;;;============================================================================

;; The following procedures are needed by the syntax-case system.

(define andmap
  (lambda (f first . rest)
    (or (null? first)
        (if (null? rest)
            (let andmap ((first first))
              (let ((x (car first)) (first (cdr first)))
                (if (null? first)
                    (f x)
                    (and (f x) (andmap first)))))
            (let andmap ((first first) (rest rest))
              (let ((x (car first))
                    (xr (map car rest))
                    (first (cdr first))
                    (rest (map cdr rest)))
                (if (null? first)
                    (apply f (cons x xr))
                    (and (apply f (cons x xr)) (andmap first rest)))))))))

(define ormap
  (lambda (proc list1)
    (and (not (null? list1))
         (or (proc (car list1)) (ormap proc (cdr list1))))))

(define eval
  (lambda (expr)
    (cond ((and (##pair? expr)
                (##equal? (##car expr) "noexpand")
                (##pair? (##cdr expr))
                (##null? (##cddr expr)))
           (##eval (##cadr expr)))
          ((and (##source? expr)
                (##pair? (##source-code expr))
                (##source? (##car (##source-code expr)))
                (##equal? (##source-code (##car (##source-code expr))) "noexpand")
                (##pair? (##cdr (##source-code expr)))
                (##null? (##cddr (##source-code expr))))
           (##eval (##cadr (##source-code expr))))
          (else
           (##raise-error-exception
            "eval expects an expression of the form (\"noexpand\" <expr>)"
            (##list expr))))))

(define gensym-count 0)

(define gensym
  (lambda id
    (let ((n gensym-count))
      (set! gensym-count (+ n 1))
      (string->symbol
       (string-append "%%"
                      (if (null? id) "" (symbol->string (car id)))
                      (number->string n))))))

(define gensym?
  (lambda (obj)
    (and (symbol? obj)
         (let ((str (symbol->string obj)))
           (and (> (string-length str) 2)
                (string=? (substring str 0 2) "%%"))))))

(define prop-table (##make-table))

(define remprop
  (lambda (sym key)
    (let ((sym-key (cons sym key)))
      (##table-set! prop-table sym-key))))

(define putprop
  (lambda (sym key val)
    (let ((sym-key (cons sym key)))
      (##table-set! prop-table sym-key val))))

(define getprop
  (lambda (sym key)
    (let ((sym-key (cons sym key)))
      (##table-ref prop-table sym-key #f))))

(define list*
  (lambda (arg1 . other-args)

    (define (fix lst)
      (if (null? (cdr lst))
          (car lst)
          (cons (car lst) (fix (cdr lst)))))

    (fix (cons arg1 other-args))))

(define remq
  (lambda (obj lst)
    (cond ((null? lst)
           '())
          ((eq? (car lst) obj)
           (remq obj (cdr lst)))
          (else
           (cons (car lst) (remq obj (cdr lst)))))))

;;;----------------------------------------------------------------------------

;; These initial definitions are needed because these variables are
;; mutated with a "set!" without a prior definition.

(define $sc-put-cte (make-parameter #f))
(define sc-expand (lambda (src) src)) ; temporary definition
(define $make-environment #f)
(define make-expander #f)
(define environment? #f)
(define interaction-environment #f)
(define identifier? #f)
(define syntax->list #f)
(define syntax->vector #f)
(define syntax->datum #f)
(define datum->syntax #f)
(define generate-temporaries #f)
(define free-identifier=? #f)
(define bound-identifier=? #f)
(define literal-identifier=? #f)
(define syntax-error #f)
(define $syntax-dispatch #f)
(define visit-marker '#(visit))
(define $load-module #f)
(define $update-module #f)
(define $include-file-hook #f)
(define syntax-case-debug (make-parameter #f))

;;; generate-id ideally produces globally unique symbols, i.e., symbols
;;; unique across system runs, to support separate compilation/expansion.
;;; Use gensyms if you do not need to support separate compilation/
;;; expansion or if your system's gensym creates globally unique
;;; symbols (as in Chez Scheme).  Otherwise, use the following code
;;; as a starting point.  session-key should be a unique string for each
;;; system run to support separate compilation; the default value given
;;; is satisfactory during initial development only.

(define $generate-id
  (make-parameter
   (let ((digits "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&*/:<=>?~_^.+-"))
     (let ((base (string-length digits)) (session-key "_"))
       (define make-digit (lambda (x) (string-ref digits x)))
       (define fmt
         (lambda (n)
           (let fmt ((n n) (a '()))
             (if (< n base)
                 (list->string (cons (make-digit n) a))
                 (let ((r (modulo n base)) (rest (quotient n base)))
                   (fmt rest (cons (make-digit r) a)))))))
       (let ((n -1))
         (lambda (name) ;; name is #f or a symbol
           (set! n (+ n 1))
           (string->symbol 
            (string-append session-key
                           (fmt n)
                           (if name
                               (string-append "." (symbol->string name))
                               "")))))))))

;;;----------------------------------------------------------------------------

;;; Interface to Gambit's source code annotations.

(define annotation?
  (lambda (x)
;;    (pp `(annotation? ,x))
    (##source? x)))

(define annotation-expression
  (lambda (x)
;;    (pp `(annotation-expression ,x))
    (##source-code x)))

(define annotation-stripped
  (lambda (x)
;;    (pp `(annotation-stripped ,x))
    (##desourcify x)))

(define build-source
  (lambda (ae x)
;;    (pp `(build-source ,ae ,x))
    (if (##source? ae)
        (##make-source x (##source-locat ae))
        (##make-source x #f))))

(define attach-source
  (lambda (ae datum)
;;    (pp `(attach-source ,ae ,datum))
    (let ((src
           (if (##source? ae)
               ae
               (##make-source ae #f))))

      (define (datum->source x)
        (##make-source (cond ((pair? x)
                              (list-convert x))
                             ((box? x)
                              (box (datum->source (unbox x))))
                             ((vector? x)
                              (vector-convert x))
                             (else
                              x))
                       (##source-locat src)))

      (define (list-convert lst)
        (cons (datum->source (car lst))
              (list-tail-convert (cdr lst))))

      (define (list-tail-convert lst)
        (cond ((pair? lst)
               (if (quoting-form? lst)
                   (datum->source lst)
                   (cons (datum->source (car lst))
                         (list-tail-convert (cdr lst)))))
              ((null? lst)
               '())
              (else
               (datum->source lst))))

      (define (quoting-form? x)
        (let ((first (car x))
              (rest (cdr x)))
          (and (pair? rest)
               (null? (cdr rest))
               (or (eq? first 'quote)
                   (eq? first 'quasiquote)
                   (eq? first 'unquote)
                   (eq? first 'unquote-splicing)))))

      (define (vector-convert vect)
        (let* ((len (vector-length vect))
               (v (make-vector len)))
          (let loop ((i (- len 1)))
            (if (>= i 0)
              (begin
                (vector-set! v i (datum->source (vector-ref vect i)))
                (loop (- i 1)))))
          v))

      (datum->source datum))))

;;;----------------------------------------------------------------------------

(define self-eval?
  (lambda (x)
    (or (number? x)
        (string? x)
        (char? x)
        (keyword? x)
        (memq x
              '(#f
                #t
                #!eof
                #!void
                #!unbound
                #!unbound2
                #!optional
                #!rest
                #!key)))))

;;;----------------------------------------------------------------------------

(define (unmark! src)

  (define (unmark-list! lst)
    (cond ((pair? lst)
           (unmark! (car lst))
           (unmark-list! (cdr lst)))))

  (define (unmark-vector! vect)
    (let ((len (vector-length vect)))
      (do ((i 0 (fx+ i 1)))
          ((fx= i len))
        (unmark! (vector-ref vect i)))))
    
  (cond ((and (vector? src)
              (equal? (vector-ref src 0) visit-marker))
         (vector-set! src 0 ##source1-marker)
         (unmark! (##source-code src)))
        ((pair? src)
         (unmark-list! src))
        ((vector? src)
         (unmark-vector! src))
        ((box? src)
         (unmark! (unbox src)))
        (else src)))

;;;============================================================================

(set! ##expression-parsing-exception-names
      (cons '(psyntax-error . "Syntax expansion failure:")
            ##expression-parsing-exception-names))

;;;============================================================================

((lambda () (letrec ((%%noexpand35 "noexpand") (%%make-syntax-object36 (lambda (%%p1454 %%p2455) (begin (##declare (extended-bindings)) (##structure '#0=#structure(#1=#structure(#1# ##type-5 type 8 #f #(id 1 #f name 5 #f flags 5 #f super 5 #f fields 5 #f)) ##type-2-2D9C624D-3630-42AF-884C-FD82C537B2D7 syntax-object 24 #f #(expression 2 #f wrap 2 #f)) %%p1454 %%p2455)))) (%%syntax?37 (lambda (%%obj456) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj456 '##type-2-2D9C624D-3630-42AF-884C-FD82C537B2D7)))) (%%syntax-expression38 (lambda (%%obj457) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj457 1 '#0# %%syntax-expression38))) (%%syntax-wrap39 (lambda (%%obj458) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj458 2 '#0# %%syntax-wrap39))) (%%top-level-eval-hook40 (lambda (%%x459) (eval (list %%noexpand35 %%x459)))) (%%local-eval-hook41 (lambda (%%x460) (eval (list %%noexpand35 %%x460)))) (%%define-top-level-value-hook42 (lambda (%%sym461 %%val462) (%%top-level-eval-hook40 (build-source #f (list (build-source #f 'define) %%sym461 ((lambda (%%x463) (if (self-eval? %%val462) %%x463 (build-source #f (list (build-source #f 'quote) %%x463)))) (attach-source #f %%val462))))))) (%%put-cte-hook43 (lambda (%%symbol464 %%val465) (($sc-put-cte) %%symbol464 %%val465 '*top*))) (%%get-global-definition-hook44 (lambda (%%symbol466) (getprop %%symbol466 '*sc-expander*))) (%%put-global-definition-hook45 (lambda (%%symbol467 %%x468) (if (not %%x468) (remprop %%symbol467 '*sc-expander*) (putprop %%symbol467 '*sc-expander* %%x468)))) (%%read-only-binding?46 (lambda (%%symbol469) #f)) (%%get-import-binding47 (lambda (%%symbol470 %%token471) (getprop %%symbol470 %%token471))) (%%update-import-binding!48 (lambda (%%symbol472 %%token473 %%p474) ((lambda (%%x475) (if (not %%x475) (remprop %%symbol472 %%token473) (putprop %%symbol472 %%token473 %%x475))) (%%p474 (%%get-import-binding47 %%symbol472 %%token473))))) (%%built-lambda?132 (lambda (%%x476) ((lambda (%%t477) (if %%t477 %%t477 (if (##source? %%x476) (if (pair? (##source-code %%x476)) (if (##source? (car (##source-code %%x476))) (eq? (##source-code (car (##source-code %%x476))) 'lambda) #f) #f) #f))) (if (pair? %%x476) (eq? (car %%x476) 'lambda) #f)))) (%%build-sequence150 (lambda (%%ae478 %%exps479) ((letrec ((%%loop480 (lambda (%%exps481) (if (null? (cdr %%exps481)) (car %%exps481) (if ((lambda (%%x482) ((lambda (%%t483) (if %%t483 %%t483 (if (##source? %%x482) (if (pair? (##source-code %%x482)) (if (##source? (car (##source-code %%x482))) (if (eq? (##source-code (car (##source-code %%x482))) 'void) (null? (cdr (##source-code %%x482))) #f) #f) #f) #f))) (equal? %%x482 '(void)))) (car %%exps481)) (%%loop480 (cdr %%exps481)) (build-source %%ae478 (cons (build-source %%ae478 'begin) %%exps481))))))) %%loop480) %%exps479))) (%%build-letrec151 (lambda (%%ae484 %%vars485 %%val-exps486 %%body-exp487) (if (null? %%vars485) %%body-exp487 (build-source %%ae484 (list (build-source %%ae484 'letrec) (build-source %%ae484 (map (lambda (%%v488 %%e489) (build-source %%ae484 (list %%v488 %%e489))) %%vars485 %%val-exps486)) %%body-exp487))))) (%%build-body152 (lambda (%%ae490 %%vars491 %%val-exps492 %%body-exp493) (%%build-letrec151 %%ae490 %%vars491 %%val-exps492 %%body-exp493))) (%%build-top-module153 (lambda (%%ae494 %%types495 %%vars496 %%val-exps497 %%body-exp498) (call-with-values (lambda () ((letrec ((%%f499 (lambda (%%types500 %%vars501) (if (null? %%types500) (values '() '() '()) ((lambda (%%var502) (call-with-values (lambda () (%%f499 (cdr %%types500) (cdr %%vars501))) (lambda (%%vars503 %%defns504 %%sets505) (if (eq? (car %%types500) 'global) ((lambda (%%x506) (values (cons %%x506 %%vars503) (cons (build-source #f (list (build-source #f 'define) %%var502 (%%chi-void447))) %%defns504) (cons (build-source #f (list (build-source #f 'set!) %%var502 %%x506)) %%sets505))) (gensym %%var502)) (values (cons %%var502 %%vars503) %%defns504 %%sets505))))) (car %%vars501)))))) %%f499) %%types495 %%vars496)) (lambda (%%vars507 %%defns508 %%sets509) (if (null? %%defns508) (%%build-letrec151 %%ae494 %%vars507 %%val-exps497 %%body-exp498) (%%build-sequence150 #f (append %%defns508 (list (%%build-letrec151 %%ae494 %%vars507 %%val-exps497 (%%build-sequence150 #f (append %%sets509 (list %%body-exp498)))))))))))) (%%sanitize-binding186 (lambda (%%b510) (if (procedure? %%b510) (cons 'macro %%b510) (if (%%binding?200 %%b510) (if ((lambda (%%t511) (if (memv %%t511 '(core macro macro! deferred)) (procedure? (%%binding-value197 %%b510)) (if (memv %%t511 '($module)) (%%interface?371 (%%binding-value197 %%b510)) (if (memv %%t511 '(lexical)) #f (if (memv %%t511 '(global meta-variable)) (symbol? (%%binding-value197 %%b510)) (if (memv %%t511 '(syntax)) ((lambda (%%x512) (if (pair? %%x512) (if #f ((lambda (%%n513) (if (integer? %%n513) (if (exact? %%n513) (>= %%n513 0) #f) #f)) (cdr %%x512)) #f) #f)) (%%binding-value197 %%b510)) (if (memv %%t511 '(begin define define-syntax set! $module-key $import eval-when meta)) (null? (%%binding-value197 %%b510)) (if (memv %%t511 '(local-syntax)) (boolean? (%%binding-value197 %%b510)) (if (memv %%t511 '(displaced-lexical)) (eq? (%%binding-value197 %%b510) #f) #t))))))))) (%%binding-type196 %%b510)) %%b510 #f) #f)))) (%%binding-type196 car) (%%binding-value197 cdr) (%%set-binding-type!198 set-car!) (%%set-binding-value!199 set-cdr!) (%%binding?200 (lambda (%%x514) (if (pair? %%x514) (symbol? (car %%x514)) #f))) (%%extend-env210 (lambda (%%label515 %%binding516 %%r517) (cons (cons %%label515 %%binding516) %%r517))) (%%extend-env*211 (lambda (%%labels518 %%bindings519 %%r520) (if (null? %%labels518) %%r520 (%%extend-env*211 (cdr %%labels518) (cdr %%bindings519) (%%extend-env210 (car %%labels518) (car %%bindings519) %%r520))))) (%%extend-var-env*212 (lambda (%%labels521 %%vars522 %%r523) (if (null? %%labels521) %%r523 (%%extend-var-env*212 (cdr %%labels521) (cdr %%vars522) (%%extend-env210 (car %%labels521) (cons 'lexical (car %%vars522)) %%r523))))) (%%displaced-lexical?213 (lambda (%%id524 %%r525) ((lambda (%%n526) (if %%n526 ((lambda (%%b527) (eq? (%%binding-type196 %%b527) 'displaced-lexical)) (%%lookup216 %%n526 %%r525)) #f)) (%%id-var-name352 %%id524 '(()))))) (%%displaced-lexical-error214 (lambda (%%id528) (syntax-error %%id528 (if (%%id-var-name352 %%id528 '(())) "identifier out of context" "identifier not visible")))) (%%lookup*215 (lambda (%%x529 %%r530) ((lambda (%%t531) (if %%t531 (cdr %%t531) (if (symbol? %%x529) ((lambda (%%t532) (if %%t532 %%t532 (cons 'global %%x529))) (%%get-global-definition-hook44 %%x529)) '(displaced-lexical . #f)))) (assq %%x529 %%r530)))) (%%lookup216 (lambda (%%x533 %%r534) (letrec ((%%whack-binding!535 (lambda (%%b536 %%*b537) (begin (%%set-binding-type!198 %%b536 (%%binding-type196 %%*b537)) (%%set-binding-value!199 %%b536 (%%binding-value197 %%*b537)))))) ((lambda (%%b538) (begin (if (eq? (%%binding-type196 %%b538) 'deferred) (%%whack-binding!535 %%b538 (%%make-transformer-binding217 ((%%binding-value197 %%b538)))) (void)) %%b538)) (%%lookup*215 %%x533 %%r534))))) (%%make-transformer-binding217 (lambda (%%b539) ((lambda (%%t540) (if %%t540 %%t540 (syntax-error %%b539 "invalid transformer"))) (%%sanitize-binding186 %%b539)))) (%%defer-or-eval-transformer218 (lambda (%%eval541 %%x542) (if (%%built-lambda?132 %%x542) (cons 'deferred (lambda () (%%eval541 %%x542))) (%%make-transformer-binding217 (%%eval541 %%x542))))) (%%global-extend219 (lambda (%%type543 %%sym544 %%val545) (%%put-cte-hook43 %%sym544 (cons %%type543 %%val545)))) (%%nonsymbol-id?220 (lambda (%%x546) (if (%%syntax?37 %%x546) (symbol? ((lambda (%%e547) (if (annotation? %%e547) (annotation-expression %%e547) %%e547)) (%%syntax-expression38 %%x546))) #f))) (%%id?221 (lambda (%%x548) (if (symbol? %%x548) #t (if (%%syntax?37 %%x548) (symbol? ((lambda (%%e549) (if (annotation? %%e549) (annotation-expression %%e549) %%e549)) (%%syntax-expression38 %%x548))) (if (annotation? %%x548) (symbol? (annotation-expression %%x548)) #f))))) (%%id-marks227 (lambda (%%id550) (if (%%syntax?37 %%id550) (%%wrap-marks231 (%%syntax-wrap39 %%id550)) (%%wrap-marks231 '((top)))))) (%%id-subst228 (lambda (%%id551) (if (%%syntax?37 %%id551) (%%wrap-subst232 (%%syntax-wrap39 %%id551)) (%%wrap-marks231 '((top)))))) (%%id-sym-name&marks229 (lambda (%%x552 %%w553) (if (%%syntax?37 %%x552) (values ((lambda (%%e554) (if (annotation? %%e554) (annotation-expression %%e554) %%e554)) (%%syntax-expression38 %%x552)) (%%join-marks341 (%%wrap-marks231 %%w553) (%%wrap-marks231 (%%syntax-wrap39 %%x552)))) (values ((lambda (%%e555) (if (annotation? %%e555) (annotation-expression %%e555) %%e555)) %%x552) (%%wrap-marks231 %%w553))))) (%%make-wrap230 cons) (%%wrap-marks231 car) (%%wrap-subst232 cdr) (%%##type-1-indirect-label270 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-1-indirect-label") 'indirect-label 8 #f '#(label 0 #f))) (%%make-indirect-label271 (lambda (%%p1556) (begin (##declare (extended-bindings)) (##structure %%##type-1-indirect-label270 %%p1556)))) (%%indirect-label?272 (lambda (%%obj557) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj557 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-1-indirect-label270)))))))) (%%indirect-label-label273 (lambda (%%obj558) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj558 1 %%##type-1-indirect-label270 %%indirect-label-label273))) (%%set-indirect-label-label!274 (lambda (%%obj559 %%val560) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj559 %%val560 1 %%##type-1-indirect-label270 %%set-indirect-label-label!274))) (%%gen-indirect-label275 (lambda () (%%make-indirect-label271 (%%gen-label278)))) (%%get-indirect-label276 (lambda (%%x561) (%%indirect-label-label273 %%x561))) (%%set-indirect-label!277 (lambda (%%x562 %%v563) (%%set-indirect-label-label!274 %%x562 %%v563))) (%%gen-label278 (lambda () (string #\i))) (%%label?279 (lambda (%%x564) ((lambda (%%t565) (if %%t565 %%t565 ((lambda (%%t566) (if %%t566 %%t566 (%%indirect-label?272 %%x564))) (symbol? %%x564)))) (string? %%x564)))) (%%gen-labels280 (lambda (%%ls567) (if (null? %%ls567) '() (cons (%%gen-label278) (%%gen-labels280 (cdr %%ls567)))))) (%%make-ribcage281 (lambda (%%p1568 %%p2569 %%p3570) (begin (##declare (extended-bindings)) (##structure '#2=#structure(#1# ##type-3-0E54356E-1759-409D-AB3F-0E5AD9E68939 ribcage 24 #f #(symnames 0 #f marks 0 #f labels 0 #f)) %%p1568 %%p2569 %%p3570)))) (%%ribcage?282 (lambda (%%obj571) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj571 '##type-3-0E54356E-1759-409D-AB3F-0E5AD9E68939)))) (%%ribcage-symnames283 (lambda (%%obj572) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj572 1 '#2# %%ribcage-symnames283))) (%%set-ribcage-symnames!284 (lambda (%%obj573 %%val574) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj573 %%val574 1 '#2# %%set-ribcage-symnames!284))) (%%ribcage-marks285 (lambda (%%obj575) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj575 2 '#2# %%ribcage-marks285))) (%%set-ribcage-marks!286 (lambda (%%obj576 %%val577) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj576 %%val577 2 '#2# %%set-ribcage-marks!286))) (%%ribcage-labels287 (lambda (%%obj578) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj578 3 '#2# %%ribcage-labels287))) (%%set-ribcage-labels!288 (lambda (%%obj579 %%val580) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj579 %%val580 3 '#2# %%set-ribcage-labels!288))) (%%make-top-ribcage289 (lambda (%%p1581 %%p2582) (begin (##declare (extended-bindings)) (##structure '#3=#structure(#1# ##type-2-E14B1CA5-AADF-4FF2-9EAA-70CCC11E5A91 top-ribcage 24 #f #(key 0 #f mutable? 0 #f)) %%p1581 %%p2582)))) (%%top-ribcage?290 (lambda (%%obj583) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj583 '##type-2-E14B1CA5-AADF-4FF2-9EAA-70CCC11E5A91)))) (%%top-ribcage-key291 (lambda (%%obj584) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj584 1 '#3# %%top-ribcage-key291))) (%%set-top-ribcage-key!292 (lambda (%%obj585 %%val586) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj585 %%val586 1 '#3# %%set-top-ribcage-key!292))) (%%top-ribcage-mutable?293 (lambda (%%obj587) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj587 2 '#3# %%top-ribcage-mutable?293))) (%%set-top-ribcage-mutable?!294 (lambda (%%obj588 %%val589) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj588 %%val589 2 '#3# %%set-top-ribcage-mutable?!294))) (%%##type-2-import-interface295 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-2-import-interface") 'import-interface 8 #f '#(interface 0 #f new-marks 0 #f))) (%%make-import-interface296 (lambda (%%p1590 %%p2591) (begin (##declare (extended-bindings)) (##structure %%##type-2-import-interface295 %%p1590 %%p2591)))) (%%import-interface?297 (lambda (%%obj592) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj592 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-2-import-interface295)))))))) (%%import-interface-interface298 (lambda (%%obj593) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj593 1 %%##type-2-import-interface295 %%import-interface-interface298))) (%%import-interface-interface-set!299 (lambda (%%obj594 %%val595) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj594 %%val595 1 %%##type-2-import-interface295 %%import-interface-interface-set!299))) (%%import-interface-new-marks300 (lambda (%%obj596) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj596 2 %%##type-2-import-interface295 %%import-interface-new-marks300))) (%%import-interface-new-marks-set!301 (lambda (%%obj597 %%val598) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj597 %%val598 2 %%##type-2-import-interface295 %%import-interface-new-marks-set!301))) (%%##type-2-env302 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-2-env") 'env 8 #f '#(top-ribcage 0 #f wrap 0 #f))) (%%make-env303 (lambda (%%p1599 %%p2600) (begin (##declare (extended-bindings)) (##structure %%##type-2-env302 %%p1599 %%p2600)))) (%%env?304 (lambda (%%obj601) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj601 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-2-env302)))))))) (%%env-top-ribcage305 (lambda (%%obj602) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj602 1 %%##type-2-env302 %%env-top-ribcage305))) (%%env-top-ribcage-set!306 (lambda (%%obj603 %%val604) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj603 %%val604 1 %%##type-2-env302 %%env-top-ribcage-set!306))) (%%env-wrap307 (lambda (%%obj605) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj605 2 %%##type-2-env302 %%env-wrap307))) (%%env-wrap-set!308 (lambda (%%obj606 %%val607) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj606 %%val607 2 %%##type-2-env302 %%env-wrap-set!308))) (%%anti-mark318 (lambda (%%w608) (%%make-wrap230 (cons #f (%%wrap-marks231 %%w608)) (cons 'shift (%%wrap-subst232 %%w608))))) (%%barrier-marker323 #f) (%%extend-ribcage!328 (lambda (%%ribcage609 %%id610 %%label611) (begin (%%set-ribcage-symnames!284 %%ribcage609 (cons ((lambda (%%e612) (if (annotation? %%e612) (annotation-expression %%e612) %%e612)) (%%syntax-expression38 %%id610)) (%%ribcage-symnames283 %%ribcage609))) (%%set-ribcage-marks!286 %%ribcage609 (cons (%%wrap-marks231 (%%syntax-wrap39 %%id610)) (%%ribcage-marks285 %%ribcage609))) (%%set-ribcage-labels!288 %%ribcage609 (cons %%label611 (%%ribcage-labels287 %%ribcage609)))))) (%%import-extend-ribcage!329 (lambda (%%ribcage613 %%new-marks614 %%id615 %%label616) (begin (%%set-ribcage-symnames!284 %%ribcage613 (cons ((lambda (%%e617) (if (annotation? %%e617) (annotation-expression %%e617) %%e617)) (%%syntax-expression38 %%id615)) (%%ribcage-symnames283 %%ribcage613))) (%%set-ribcage-marks!286 %%ribcage613 (cons (%%join-marks341 %%new-marks614 (%%wrap-marks231 (%%syntax-wrap39 %%id615))) (%%ribcage-marks285 %%ribcage613))) (%%set-ribcage-labels!288 %%ribcage613 (cons %%label616 (%%ribcage-labels287 %%ribcage613)))))) (%%extend-ribcage-barrier!330 (lambda (%%ribcage618 %%killer-id619) (%%extend-ribcage-barrier-help!331 %%ribcage618 (%%syntax-wrap39 %%killer-id619)))) (%%extend-ribcage-barrier-help!331 (lambda (%%ribcage620 %%wrap621) (begin (%%set-ribcage-symnames!284 %%ribcage620 (cons %%barrier-marker323 (%%ribcage-symnames283 %%ribcage620))) (%%set-ribcage-marks!286 %%ribcage620 (cons (%%wrap-marks231 %%wrap621) (%%ribcage-marks285 %%ribcage620)))))) (%%extend-ribcage-subst!332 (lambda (%%ribcage622 %%import-iface623) (%%set-ribcage-symnames!284 %%ribcage622 (cons %%import-iface623 (%%ribcage-symnames283 %%ribcage622))))) (%%lookup-import-binding-name333 (lambda (%%sym624 %%marks625 %%token626 %%new-marks627) ((lambda (%%new628) (if %%new628 ((letrec ((%%f629 (lambda (%%new630) (if (pair? %%new630) ((lambda (%%t631) (if %%t631 %%t631 (%%f629 (cdr %%new630)))) (%%f629 (car %%new630))) (if (symbol? %%new630) (if (%%same-marks?343 %%marks625 (%%join-marks341 %%new-marks627 (%%wrap-marks231 '((top))))) %%new630 #f) (if (%%same-marks?343 %%marks625 (%%join-marks341 %%new-marks627 (%%wrap-marks231 (%%syntax-wrap39 %%new630)))) %%new630 #f)))))) %%f629) %%new628) #f)) (%%get-import-binding47 %%sym624 %%token626)))) (%%store-import-binding334 (lambda (%%id632 %%token633 %%new-marks634) (letrec ((%%cons-id635 (lambda (%%id637 %%x638) (if (not %%x638) %%id637 (cons %%id637 %%x638)))) (%%weed636 (lambda (%%marks639 %%x640) (if (pair? %%x640) (if (%%same-marks?343 (%%id-marks227 (car %%x640)) %%marks639) (%%weed636 %%marks639 (cdr %%x640)) (%%cons-id635 (car %%x640) (%%weed636 %%marks639 (cdr %%x640)))) (if %%x640 (if (not (%%same-marks?343 (%%id-marks227 %%x640) %%marks639)) %%x640 #f) #f))))) ((lambda (%%id641) ((lambda (%%sym642) (if (not (eq? %%id641 %%sym642)) ((lambda (%%marks643) (%%update-import-binding!48 %%sym642 %%token633 (lambda (%%old-binding644) ((lambda (%%x645) (%%cons-id635 (if (%%same-marks?343 %%marks643 (%%wrap-marks231 '((top)))) (%%resolved-id-var-name338 %%id641) %%id641) %%x645)) (%%weed636 %%marks643 %%old-binding644))))) (%%id-marks227 %%id641)) (void))) ((lambda (%%x646) ((lambda (%%e647) (if (annotation? %%e647) (annotation-expression %%e647) %%e647)) (if (%%syntax?37 %%x646) (%%syntax-expression38 %%x646) %%x646))) %%id641))) (if (null? %%new-marks634) %%id632 (%%make-syntax-object36 ((lambda (%%x648) ((lambda (%%e649) (if (annotation? %%e649) (annotation-expression %%e649) %%e649)) (if (%%syntax?37 %%x648) (%%syntax-expression38 %%x648) %%x648))) %%id632) (%%make-wrap230 (%%join-marks341 %%new-marks634 (%%id-marks227 %%id632)) (%%id-subst228 %%id632)))))))) (%%make-binding-wrap335 (lambda (%%ids650 %%labels651 %%w652) (if (null? %%ids650) %%w652 (%%make-wrap230 (%%wrap-marks231 %%w652) (cons ((lambda (%%labelvec653) ((lambda (%%n654) ((lambda (%%symnamevec655 %%marksvec656) (begin ((letrec ((%%f657 (lambda (%%ids658 %%i659) (if (not (null? %%ids658)) (call-with-values (lambda () (%%id-sym-name&marks229 (car %%ids658) %%w652)) (lambda (%%symname660 %%marks661) (begin (vector-set! %%symnamevec655 %%i659 %%symname660) (vector-set! %%marksvec656 %%i659 %%marks661) (%%f657 (cdr %%ids658) (fx+ %%i659 1))))) (void))))) %%f657) %%ids650 0) (%%make-ribcage281 %%symnamevec655 %%marksvec656 %%labelvec653))) (make-vector %%n654) (make-vector %%n654))) (vector-length %%labelvec653))) (list->vector %%labels651)) (%%wrap-subst232 %%w652)))))) (%%make-resolved-id336 (lambda (%%fromsym662 %%marks663 %%tosym664) (%%make-syntax-object36 %%fromsym662 (%%make-wrap230 %%marks663 (list (%%make-ribcage281 (vector %%fromsym662) (vector %%marks663) (vector %%tosym664))))))) (%%id->resolved-id337 (lambda (%%id665) (call-with-values (lambda () (%%id-var-name&marks350 %%id665 '(()))) (lambda (%%tosym666 %%marks667) (begin (if (not %%tosym666) (syntax-error %%id665 "identifier not visible for export") (void)) (%%make-resolved-id336 ((lambda (%%x668) ((lambda (%%e669) (if (annotation? %%e669) (annotation-expression %%e669) %%e669)) (if (%%syntax?37 %%x668) (%%syntax-expression38 %%x668) %%x668))) %%id665) %%marks667 %%tosym666)))))) (%%resolved-id-var-name338 (lambda (%%id670) (vector-ref (%%ribcage-labels287 (car (%%wrap-subst232 (%%syntax-wrap39 %%id670)))) 0))) (%%smart-append339 (lambda (%%m1671 %%m2672) (if (null? %%m2672) %%m1671 (append %%m1671 %%m2672)))) (%%join-wraps340 (lambda (%%w1673 %%w2674) ((lambda (%%m1675 %%s1676) (if (null? %%m1675) (if (null? %%s1676) %%w2674 (%%make-wrap230 (%%wrap-marks231 %%w2674) (%%join-subst342 %%s1676 (%%wrap-subst232 %%w2674)))) (%%make-wrap230 (%%join-marks341 %%m1675 (%%wrap-marks231 %%w2674)) (%%join-subst342 %%s1676 (%%wrap-subst232 %%w2674))))) (%%wrap-marks231 %%w1673) (%%wrap-subst232 %%w1673)))) (%%join-marks341 (lambda (%%m1677 %%m2678) (%%smart-append339 %%m1677 %%m2678))) (%%join-subst342 (lambda (%%s1679 %%s2680) (%%smart-append339 %%s1679 %%s2680))) (%%same-marks?343 (lambda (%%x681 %%y682) ((lambda (%%t683) (if %%t683 %%t683 (if (not (null? %%x681)) (if (not (null? %%y682)) (if (eq? (car %%x681) (car %%y682)) (%%same-marks?343 (cdr %%x681) (cdr %%y682)) #f) #f) #f))) (eq? %%x681 %%y682)))) (%%diff-marks344 (lambda (%%m1684 %%m2685) ((lambda (%%n1686 %%n2687) ((letrec ((%%f688 (lambda (%%n1689 %%m1690) (if (> %%n1689 %%n2687) (cons (car %%m1690) (%%f688 (- %%n1689 1) (cdr %%m1690))) (if (equal? %%m1690 %%m2685) '() (error "internal error in diff-marks" %%m1690 %%m2685)))))) %%f688) %%n1686 %%m1684)) (length %%m1684) (length %%m2685)))) (%%leave-implicit?345 (lambda (%%token691) (eq? %%token691 '*top*))) (%%new-binding346 (lambda (%%sym692 %%marks693 %%token694) ((lambda (%%loc695) ((lambda (%%id696) (begin (%%store-import-binding334 %%id696 %%token694 '()) (values %%loc695 %%id696))) (%%make-resolved-id336 %%sym692 %%marks693 %%loc695))) (if (if (%%leave-implicit?345 %%token694) (%%same-marks?343 %%marks693 (%%wrap-marks231 '((top)))) #f) %%sym692 (($generate-id) %%sym692))))) (%%top-id-bound-var-name347 (lambda (%%sym697 %%marks698 %%top-ribcage699) ((lambda (%%token700) ((lambda (%%t701) (if %%t701 ((lambda (%%id702) (if (symbol? %%id702) (if (%%read-only-binding?46 %%id702) (%%new-binding346 %%sym697 %%marks698 %%token700) (values %%id702 (%%make-resolved-id336 %%sym697 %%marks698 %%id702))) (values (%%resolved-id-var-name338 %%id702) %%id702))) %%t701) (%%new-binding346 %%sym697 %%marks698 %%token700))) (%%lookup-import-binding-name333 %%sym697 %%marks698 %%token700 '()))) (%%top-ribcage-key291 %%top-ribcage699)))) (%%top-id-free-var-name348 (lambda (%%sym703 %%marks704 %%top-ribcage705) ((lambda (%%token706) ((lambda (%%t707) (if %%t707 ((lambda (%%id708) (if (symbol? %%id708) %%id708 (%%resolved-id-var-name338 %%id708))) %%t707) (if (if (%%top-ribcage-mutable?293 %%top-ribcage705) (%%same-marks?343 %%marks704 (%%wrap-marks231 '((top)))) #f) (call-with-values (lambda () (%%new-binding346 %%sym703 (%%wrap-marks231 '((top))) %%token706)) (lambda (%%sym709 %%id710) %%sym709)) #f))) (%%lookup-import-binding-name333 %%sym703 %%marks704 %%token706 '()))) (%%top-ribcage-key291 %%top-ribcage705)))) (%%id-var-name-loc&marks349 (lambda (%%id711 %%w712) (letrec ((%%search713 (lambda (%%sym716 %%subst717 %%marks718) (if (null? %%subst717) (values #f %%marks718) ((lambda (%%fst719) (if (eq? %%fst719 'shift) (%%search713 %%sym716 (cdr %%subst717) (cdr %%marks718)) (if (%%ribcage?282 %%fst719) ((lambda (%%symnames720) (if (vector? %%symnames720) (%%search-vector-rib715 %%sym716 %%subst717 %%marks718 %%symnames720 %%fst719) (%%search-list-rib714 %%sym716 %%subst717 %%marks718 %%symnames720 %%fst719))) (%%ribcage-symnames283 %%fst719)) (if (%%top-ribcage?290 %%fst719) ((lambda (%%t721) (if %%t721 ((lambda (%%var-name722) (values %%var-name722 %%marks718)) %%t721) (%%search713 %%sym716 (cdr %%subst717) %%marks718))) (%%top-id-free-var-name348 %%sym716 %%marks718 %%fst719)) (error "internal error in id-var-name-loc&marks: improper subst" %%subst717))))) (car %%subst717))))) (%%search-list-rib714 (lambda (%%sym723 %%subst724 %%marks725 %%symnames726 %%ribcage727) ((letrec ((%%f728 (lambda (%%symnames729 %%i730) (if (null? %%symnames729) (%%search713 %%sym723 (cdr %%subst724) %%marks725) ((lambda (%%x731) (if (if (eq? %%x731 %%sym723) (%%same-marks?343 %%marks725 (list-ref (%%ribcage-marks285 %%ribcage727) %%i730)) #f) (values (list-ref (%%ribcage-labels287 %%ribcage727) %%i730) %%marks725) (if (%%import-interface?297 %%x731) ((lambda (%%iface732 %%new-marks733) ((lambda (%%t734) (if %%t734 ((lambda (%%token735) ((lambda (%%t736) (if %%t736 ((lambda (%%id737) (values (if (symbol? %%id737) %%id737 (%%resolved-id-var-name338 %%id737)) %%marks725)) %%t736) (%%f728 (cdr %%symnames729) %%i730))) (%%lookup-import-binding-name333 %%sym723 %%marks725 %%token735 %%new-marks733))) %%t734) ((lambda (%%ie738) ((lambda (%%n739) ((lambda () ((letrec ((%%g740 (lambda (%%j741) (if (fx= %%j741 %%n739) (%%f728 (cdr %%symnames729) %%i730) ((lambda (%%id742) ((lambda (%%id.sym743 %%id.marks744) (if (%%help-bound-id=?355 %%id.sym743 %%id.marks744 %%sym723 %%marks725) (values (%%lookup-import-label427 %%id742) %%marks725) (%%g740 (fx+ %%j741 1)))) ((lambda (%%x745) ((lambda (%%e746) (if (annotation? %%e746) (annotation-expression %%e746) %%e746)) (if (%%syntax?37 %%x745) (%%syntax-expression38 %%x745) %%x745))) %%id742) (%%join-marks341 %%new-marks733 (%%id-marks227 %%id742)))) (vector-ref %%ie738 %%j741)))))) %%g740) 0)))) (vector-length %%ie738))) (%%interface-exports374 %%iface732)))) (%%interface-token376 %%iface732))) (%%import-interface-interface298 %%x731) (%%import-interface-new-marks300 %%x731)) (if (if (eq? %%x731 %%barrier-marker323) (%%same-marks?343 %%marks725 (list-ref (%%ribcage-marks285 %%ribcage727) %%i730)) #f) (values #f %%marks725) (%%f728 (cdr %%symnames729) (fx+ %%i730 1)))))) (car %%symnames729)))))) %%f728) %%symnames726 0))) (%%search-vector-rib715 (lambda (%%sym747 %%subst748 %%marks749 %%symnames750 %%ribcage751) ((lambda (%%n752) ((letrec ((%%f753 (lambda (%%i754) (if (fx= %%i754 %%n752) (%%search713 %%sym747 (cdr %%subst748) %%marks749) (if (if (eq? (vector-ref %%symnames750 %%i754) %%sym747) (%%same-marks?343 %%marks749 (vector-ref (%%ribcage-marks285 %%ribcage751) %%i754)) #f) (values (vector-ref (%%ribcage-labels287 %%ribcage751) %%i754) %%marks749) (%%f753 (fx+ %%i754 1))))))) %%f753) 0)) (vector-length %%symnames750))))) (if (symbol? %%id711) (%%search713 %%id711 (%%wrap-subst232 %%w712) (%%wrap-marks231 %%w712)) (if (%%syntax?37 %%id711) ((lambda (%%sym755 %%w1756) (call-with-values (lambda () (%%search713 %%sym755 (%%wrap-subst232 %%w712) (%%join-marks341 (%%wrap-marks231 %%w712) (%%wrap-marks231 %%w1756)))) (lambda (%%name757 %%marks758) (if %%name757 (values %%name757 %%marks758) (%%search713 %%sym755 (%%wrap-subst232 %%w1756) %%marks758))))) ((lambda (%%e759) (if (annotation? %%e759) (annotation-expression %%e759) %%e759)) (%%syntax-expression38 %%id711)) (%%syntax-wrap39 %%id711)) (if (annotation? %%id711) (%%search713 ((lambda (%%e760) (if (annotation? %%e760) (annotation-expression %%e760) %%e760)) %%id711) (%%wrap-subst232 %%w712) (%%wrap-marks231 %%w712)) (error "(in id-var-name) invalid id" %%id711))))))) (%%id-var-name&marks350 (lambda (%%id761 %%w762) (call-with-values (lambda () (%%id-var-name-loc&marks349 %%id761 %%w762)) (lambda (%%label763 %%marks764) (values (if (%%indirect-label?272 %%label763) (%%get-indirect-label276 %%label763) %%label763) %%marks764))))) (%%id-var-name-loc351 (lambda (%%id765 %%w766) (call-with-values (lambda () (%%id-var-name-loc&marks349 %%id765 %%w766)) (lambda (%%label767 %%marks768) %%label767)))) (%%id-var-name352 (lambda (%%id769 %%w770) (call-with-values (lambda () (%%id-var-name-loc&marks349 %%id769 %%w770)) (lambda (%%label771 %%marks772) (if (%%indirect-label?272 %%label771) (%%get-indirect-label276 %%label771) %%label771))))) (%%free-id=?353 (lambda (%%i773 %%j774) (if (eq? ((lambda (%%x775) ((lambda (%%e776) (if (annotation? %%e776) (annotation-expression %%e776) %%e776)) (if (%%syntax?37 %%x775) (%%syntax-expression38 %%x775) %%x775))) %%i773) ((lambda (%%x777) ((lambda (%%e778) (if (annotation? %%e778) (annotation-expression %%e778) %%e778)) (if (%%syntax?37 %%x777) (%%syntax-expression38 %%x777) %%x777))) %%j774)) (eq? (%%id-var-name352 %%i773 '(())) (%%id-var-name352 %%j774 '(()))) #f))) (%%literal-id=?354 (lambda (%%id779 %%literal780) (if (eq? ((lambda (%%x781) ((lambda (%%e782) (if (annotation? %%e782) (annotation-expression %%e782) %%e782)) (if (%%syntax?37 %%x781) (%%syntax-expression38 %%x781) %%x781))) %%id779) ((lambda (%%x783) ((lambda (%%e784) (if (annotation? %%e784) (annotation-expression %%e784) %%e784)) (if (%%syntax?37 %%x783) (%%syntax-expression38 %%x783) %%x783))) %%literal780)) ((lambda (%%n-id785 %%n-literal786) ((lambda (%%t787) (if %%t787 %%t787 (if ((lambda (%%t788) (if %%t788 %%t788 (symbol? %%n-id785))) (not %%n-id785)) ((lambda (%%t789) (if %%t789 %%t789 (symbol? %%n-literal786))) (not %%n-literal786)) #f))) (eq? %%n-id785 %%n-literal786))) (%%id-var-name352 %%id779 '(())) (%%id-var-name352 %%literal780 '(()))) #f))) (%%help-bound-id=?355 (lambda (%%i.sym790 %%i.marks791 %%j.sym792 %%j.marks793) (if (eq? %%i.sym790 %%j.sym792) (%%same-marks?343 %%i.marks791 %%j.marks793) #f))) (%%bound-id=?356 (lambda (%%i794 %%j795) (%%help-bound-id=?355 ((lambda (%%x796) ((lambda (%%e797) (if (annotation? %%e797) (annotation-expression %%e797) %%e797)) (if (%%syntax?37 %%x796) (%%syntax-expression38 %%x796) %%x796))) %%i794) (%%id-marks227 %%i794) ((lambda (%%x798) ((lambda (%%e799) (if (annotation? %%e799) (annotation-expression %%e799) %%e799)) (if (%%syntax?37 %%x798) (%%syntax-expression38 %%x798) %%x798))) %%j795) (%%id-marks227 %%j795)))) (%%valid-bound-ids?357 (lambda (%%ids800) (if ((letrec ((%%all-ids?801 (lambda (%%ids802) ((lambda (%%t803) (if %%t803 %%t803 (if (%%id?221 (car %%ids802)) (%%all-ids?801 (cdr %%ids802)) #f))) (null? %%ids802))))) %%all-ids?801) %%ids800) (%%distinct-bound-ids?358 %%ids800) #f))) (%%distinct-bound-ids?358 (lambda (%%ids804) ((letrec ((%%distinct?805 (lambda (%%ids806) ((lambda (%%t807) (if %%t807 %%t807 (if (not (%%bound-id-member?360 (car %%ids806) (cdr %%ids806))) (%%distinct?805 (cdr %%ids806)) #f))) (null? %%ids806))))) %%distinct?805) %%ids804))) (%%invalid-ids-error359 (lambda (%%ids808 %%exp809 %%class810) ((letrec ((%%find811 (lambda (%%ids812 %%gooduns813) (if (null? %%ids812) (syntax-error %%exp809) (if (%%id?221 (car %%ids812)) (if (%%bound-id-member?360 (car %%ids812) %%gooduns813) (syntax-error (car %%ids812) "duplicate " %%class810) (%%find811 (cdr %%ids812) (cons (car %%ids812) %%gooduns813))) (syntax-error (car %%ids812) "invalid " %%class810)))))) %%find811) %%ids808 '()))) (%%bound-id-member?360 (lambda (%%x814 %%list815) (if (not (null? %%list815)) ((lambda (%%t816) (if %%t816 %%t816 (%%bound-id-member?360 %%x814 (cdr %%list815)))) (%%bound-id=?356 %%x814 (car %%list815))) #f))) (%%wrap361 (lambda (%%x817 %%w818) (if (if (null? (%%wrap-marks231 %%w818)) (null? (%%wrap-subst232 %%w818)) #f) %%x817 (if (%%syntax?37 %%x817) (%%make-syntax-object36 (%%syntax-expression38 %%x817) (%%join-wraps340 %%w818 (%%syntax-wrap39 %%x817))) (if (null? %%x817) %%x817 (%%make-syntax-object36 %%x817 %%w818)))))) (%%source-wrap362 (lambda (%%x819 %%w820 %%ae821) (%%wrap361 (if (annotation? %%ae821) (begin (if (not (eq? (annotation-expression %%ae821) %%x819)) (error "internal error in source-wrap: ae/x mismatch") (void)) %%ae821) %%x819) %%w820))) (%%chi-when-list363 (lambda (%%when-list822 %%w823) (map (lambda (%%x824) (if (%%literal-id=?354 %%x824 '#structure(#4=#structure(#1# ##type-2-2D9C624D-3630-42AF-884C-FD82C537B2D7 syntax-object 24 #f #(expression 2 #f wrap 2 #f)) #(#5=#(source1) compile #6="/home/alvatar/scsc/psyntax.ss" 2491979) (#7=(top) . #8=(#structure(#9=#structure(#1# ##type-3-0E54356E-1759-409D-AB3F-0E5AD9E68939 ribcage 24 #f #(symnames 0 #f marks 0 #f labels 0 #f)) () () ()) #structure(#9# #(x) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(when-list w) #(#7# #7#) #("i" "i")) #10=#structure(#9# (lambda-var-list gen-var strip strip* strip-annotation ellipsis? chi-void chi-local-syntax chi-lambda-clause debug-when parse-begin parse-alias parse-eval-when parse-meta parse-define-syntax parse-define parse-import parse-module do-import! lookup-import-label import-mark-delta chi-internal chi-body chi-macro chi-set! chi-application chi-expr chi chi-sequence chi-meta-frob chi-frobs ct-eval/residualize3 ct-eval/residualize2 rt-eval/residualize initial-mode-set update-mode-set do-top-import vfor-each vmap chi-external check-defined-ids check-module-exports id-set-diff chi-top-module frob-meta?-set! frob-meta? frob-e-set! frob-e frob? make-frob ##type-2-frob create-module-binding set-module-binding-exported! module-binding-exported module-binding-val-set! module-binding-val module-binding-imps-set! module-binding-imps module-binding-label-set! module-binding-label module-binding-id-set! module-binding-id module-binding-type-set! module-binding-type module-binding? make-module-binding ##type-6-module-binding make-resolved-interface make-unresolved-interface interface-token-set! interface-token interface-exports-set! interface-exports interface-marks-set! interface-marks interface? make-interface ##type-3-interface flatten-exports chi-top chi-top-sequence chi-top* syntax-type chi-when-list source-wrap wrap bound-id-member? invalid-ids-error distinct-bound-ids? valid-bound-ids? bound-id=? help-bound-id=? literal-id=? free-id=? id-var-name id-var-name-loc id-var-name&marks id-var-name-loc&marks top-id-free-var-name top-id-bound-var-name anon diff-marks same-marks? join-subst join-marks join-wraps smart-append resolved-id-var-name id->resolved-id make-resolved-id make-binding-wrap store-import-binding lookup-import-binding-name extend-ribcage-subst! extend-ribcage-barrier-help! extend-ribcage-barrier! import-extend-ribcage! extend-ribcage! make-empty-ribcage barrier-marker new-mark anti-mark the-anti-mark env-wrap-set! env-wrap env-top-ribcage-set! env-top-ribcage env? make-env ##type-2-env import-interface-new-marks-set! import-interface-new-marks import-interface-interface-set! import-interface-interface import-interface? make-import-interface ##type-2-import-interface set-top-ribcage-mutable?! top-ribcage-mutable? set-top-ribcage-key! top-ribcage-key top-ribcage? make-top-ribcage set-ribcage-labels! ribcage-labels set-ribcage-marks! ribcage-marks set-ribcage-symnames! ribcage-symnames ribcage? make-ribcage gen-labels label? gen-label set-indirect-label! get-indirect-label indirect-label? gen-indirect-label anon only-top-marked? top-marked? tmp-wrap top-wrap empty-wrap wrap-subst wrap-marks make-wrap id-sym-name&marks id-subst id-marks id-sym-name id? nonsymbol-id? global-extend defer-or-eval-transformer make-transformer-binding lookup lookup* displaced-lexical-error displaced-lexical? extend-var-env* extend-env* extend-env null-env binding? set-binding-value! set-binding-type! binding-value binding-type make-binding sanitize-binding arg-check no-source unannotate self-evaluating? lexical-var? build-lexical-var build-top-module build-body build-letrec build-sequence build-data build-primref built-lambda? build-dsssl-lambda build-lambda build-revisit-only build-visit-only build-cte-install build-global-definition build-global-assignment build-global-reference build-lexical-assignment build-lexical-reference build-conditional build-application update-import-binding! get-import-binding read-only-binding? put-global-definition-hook get-global-definition-hook put-cte-hook define-top-level-value-hook local-eval-hook top-level-eval-hook syntax-wrap syntax-expression syntax? make-syntax-object noexpand let-values define-structure unless when) (#7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# ("m" . #11=(top)) #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# ("m" . #11#) #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7# #7#) ("i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i" "i")) . #12=(#structure(#structure(#1# ##type-2-E14B1CA5-AADF-4FF2-9EAA-70CCC11E5A91 top-ribcage 24 #f #(key 0 #f mutable? 0 #f)) *top* #t)))))) 'compile (if (%%literal-id=?354 %%x824 '#structure(#4# #(#5# load #6# 2491980) (#7# . #8#))) 'load (if (%%literal-id=?354 %%x824 '#structure(#4# #(#5# visit #6# 2491981) (#7# . #8#))) 'visit (if (%%literal-id=?354 %%x824 '#structure(#4# #(#5# revisit #6# 2491982) (#7# . #8#))) 'revisit (if (%%literal-id=?354 %%x824 '#structure(#4# #(#5# eval #6# 2491983) (#7# . #8#))) 'eval (syntax-error (%%wrap361 %%x824 %%w823) "invalid eval-when situation"))))))) %%when-list822))) (%%syntax-type364 (lambda (%%e825 %%r826 %%w827 %%ae828 %%rib829) (if (symbol? %%e825) ((lambda (%%n830) ((lambda (%%b831) ((lambda (%%type832) ((lambda () ((lambda (%%t833) (if (memv %%t833 '(macro macro!)) (%%syntax-type364 (%%chi-macro423 (%%binding-value197 %%b831) %%e825 %%r826 %%w827 %%ae828 %%rib829) %%r826 '(()) #f %%rib829) (values %%type832 (%%binding-value197 %%b831) %%e825 %%w827 %%ae828))) %%type832)))) (%%binding-type196 %%b831))) (%%lookup216 %%n830 %%r826))) (%%id-var-name352 %%e825 %%w827)) (if (pair? %%e825) ((lambda (%%first834) (if (%%id?221 %%first834) ((lambda (%%n835) ((lambda (%%b836) ((lambda (%%type837) ((lambda () ((lambda (%%t838) (if (memv %%t838 '(lexical)) (values 'lexical-call (%%binding-value197 %%b836) %%e825 %%w827 %%ae828) (if (memv %%t838 '(macro macro!)) (%%syntax-type364 (%%chi-macro423 (%%binding-value197 %%b836) %%e825 %%r826 %%w827 %%ae828 %%rib829) %%r826 '(()) #f %%rib829) (if (memv %%t838 '(core)) (values %%type837 (%%binding-value197 %%b836) %%e825 %%w827 %%ae828) (if (memv %%t838 '(begin ##begin)) (values 'begin-form #f %%e825 %%w827 %%ae828) (if (memv %%t838 '(alias)) (values 'alias-form #f %%e825 %%w827 %%ae828) (if (memv %%t838 '(define)) (values 'define-form #f %%e825 %%w827 %%ae828) (if (memv %%t838 '(define-syntax)) (values 'define-syntax-form #f %%e825 %%w827 %%ae828) (if (memv %%t838 '(set!)) (%%chi-set!422 %%e825 %%r826 %%w827 %%ae828 %%rib829) (if (memv %%t838 '($module-key)) (values '$module-form #f %%e825 %%w827 %%ae828) (if (memv %%t838 '($import)) (values '$import-form #f %%e825 %%w827 %%ae828) (if (memv %%t838 '(eval-when)) (values 'eval-when-form #f %%e825 %%w827 %%ae828) (if (memv %%t838 '(meta)) (values 'meta-form #f %%e825 %%w827 %%ae828) (if (memv %%t838 '(local-syntax)) (values 'local-syntax-form (%%binding-value197 %%b836) %%e825 %%w827 %%ae828) (values 'call #f %%e825 %%w827 %%ae828))))))))))))))) %%type837)))) (%%binding-type196 %%b836))) (%%lookup216 %%n835 %%r826))) (%%id-var-name352 %%first834 %%w827)) (values 'call #f %%e825 %%w827 %%ae828))) (car %%e825)) (if (%%syntax?37 %%e825) (%%syntax-type364 (%%syntax-expression38 %%e825) %%r826 (%%join-wraps340 %%w827 (%%syntax-wrap39 %%e825)) #f %%rib829) (if (annotation? %%e825) (%%syntax-type364 (annotation-expression %%e825) %%r826 %%w827 %%e825 %%rib829) (if ((lambda (%%x839) (self-eval? %%x839)) %%e825) (values 'constant #f %%e825 %%w827 %%ae828) (values 'other #f %%e825 %%w827 %%ae828)))))))) (%%chi-top*365 (lambda (%%e840 %%r841 %%w842 %%ctem843 %%rtem844 %%meta?845 %%top-ribcage846) ((lambda (%%meta-residuals847) (letrec ((%%meta-residualize!848 (lambda (%%x849) (set! %%meta-residuals847 (cons %%x849 %%meta-residuals847))))) ((lambda (%%e850) (%%build-sequence150 #f (reverse (cons %%e850 %%meta-residuals847)))) (%%chi-top367 %%e840 %%r841 %%w842 %%ctem843 %%rtem844 %%meta?845 %%top-ribcage846 %%meta-residualize!848 #f)))) '()))) (%%chi-top-sequence366 (lambda (%%body851 %%r852 %%w853 %%ae854 %%ctem855 %%rtem856 %%meta?857 %%ribcage858 %%meta-residualize!859) (%%build-sequence150 %%ae854 ((letrec ((%%dobody860 (lambda (%%body861) (if (null? %%body861) '() ((lambda (%%first862) (cons %%first862 (%%dobody860 (cdr %%body861)))) (%%chi-top367 (car %%body861) %%r852 %%w853 %%ctem855 %%rtem856 %%meta?857 %%ribcage858 %%meta-residualize!859 #f)))))) %%dobody860) %%body851)))) (%%chi-top367 (lambda (%%e863 %%r864 %%w865 %%ctem866 %%rtem867 %%meta?868 %%top-ribcage869 %%meta-residualize!870 %%meta-seen?871) (call-with-values (lambda () (%%syntax-type364 %%e863 %%r864 %%w865 #f %%top-ribcage869)) (lambda (%%type872 %%value873 %%e874 %%w875 %%ae876) ((lambda (%%t877) (if (memv %%t877 '(begin-form)) ((lambda (%%forms878) (if (null? %%forms878) (%%chi-void447) (%%chi-top-sequence366 %%forms878 %%r864 %%w875 %%ae876 %%ctem866 %%rtem867 %%meta?868 %%top-ribcage869 %%meta-residualize!870))) (%%parse-begin436 %%e874 %%w875 %%ae876 #t)) (if (memv %%t877 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax446 %%value873 %%e874 %%r864 %%r864 %%w875 %%ae876)) (lambda (%%forms879 %%r880 %%mr881 %%w882 %%ae883) (%%chi-top-sequence366 %%forms879 %%r880 %%w882 %%ae883 %%ctem866 %%rtem867 %%meta?868 %%top-ribcage869 %%meta-residualize!870))) (if (memv %%t877 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when434 %%e874 %%w875 %%ae876)) (lambda (%%when-list884 %%forms885) ((lambda (%%ctem886 %%rtem887) (if (if (null? %%ctem886) (null? %%rtem887) #f) (%%chi-void447) (%%chi-top-sequence366 %%forms885 %%r864 %%w875 %%ae876 %%ctem886 %%rtem887 %%meta?868 %%top-ribcage869 %%meta-residualize!870))) (%%update-mode-set411 %%when-list884 %%ctem866) (%%update-mode-set411 %%when-list884 %%rtem867)))) (if (memv %%t877 '(meta-form)) (%%chi-top367 (%%parse-meta433 %%e874 %%w875 %%ae876) %%r864 %%w875 %%ctem866 %%rtem867 #t %%top-ribcage869 %%meta-residualize!870 #t) (if (memv %%t877 '(define-syntax-form)) (call-with-values (lambda () (%%parse-define-syntax432 %%e874 %%w875 %%ae876)) (lambda (%%id888 %%rhs889 %%w890) ((lambda (%%id891) (begin (if (%%displaced-lexical?213 %%id891 %%r864) (%%displaced-lexical-error214 %%id891) (void)) (if (not (%%top-ribcage-mutable?293 %%top-ribcage869)) (syntax-error (%%source-wrap362 %%e874 %%w890 %%ae876) "invalid definition in read-only environment") (void)) ((lambda (%%sym892) (call-with-values (lambda () (%%top-id-bound-var-name347 %%sym892 (%%wrap-marks231 (%%syntax-wrap39 %%id891)) %%top-ribcage869)) (lambda (%%valsym893 %%bound-id894) (begin (if (not (eq? (%%id-var-name352 %%id891 '(())) %%valsym893)) (syntax-error (%%source-wrap362 %%e874 %%w890 %%ae876) "definition not permitted") (void)) (if (%%read-only-binding?46 %%valsym893) (syntax-error (%%source-wrap362 %%e874 %%w890 %%ae876) "invalid definition of read-only identifier") (void)) (%%ct-eval/residualize2414 %%ctem866 (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%bound-id894)) (%%chi419 %%rhs889 %%r864 %%r864 %%w890 #t) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key291 %%top-ribcage869))))))))))) ((lambda (%%x895) ((lambda (%%e896) (if (annotation? %%e896) (annotation-expression %%e896) %%e896)) (if (%%syntax?37 %%x895) (%%syntax-expression38 %%x895) %%x895))) %%id891)))) (%%wrap361 %%id888 %%w890)))) (if (memv %%t877 '(define-form)) (call-with-values (lambda () (%%parse-define431 %%e874 %%w875 %%ae876)) (lambda (%%id897 %%rhs898 %%w899) ((lambda (%%id900) (begin (if (%%displaced-lexical?213 %%id900 %%r864) (%%displaced-lexical-error214 %%id900) (void)) (if (not (%%top-ribcage-mutable?293 %%top-ribcage869)) (syntax-error (%%source-wrap362 %%e874 %%w899 %%ae876) "invalid definition in read-only environment") (void)) ((lambda (%%sym901) (call-with-values (lambda () (%%top-id-bound-var-name347 %%sym901 (%%wrap-marks231 (%%syntax-wrap39 %%id900)) %%top-ribcage869)) (lambda (%%valsym902 %%bound-id903) (begin (if (not (eq? (%%id-var-name352 %%id900 '(())) %%valsym902)) (syntax-error (%%source-wrap362 %%e874 %%w899 %%ae876) "definition not permitted") (void)) (if (%%read-only-binding?46 %%valsym902) (syntax-error (%%source-wrap362 %%e874 %%w899 %%ae876) "invalid definition of read-only identifier") (void)) (if %%meta?868 (%%ct-eval/residualize2414 %%ctem866 (lambda () (%%build-sequence150 #f (list (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%bound-id903)) ((lambda (%%x904) (if (self-eval? (cons 'meta-variable %%valsym902)) %%x904 (build-source #f (list (build-source #f 'quote) %%x904)))) (attach-source #f (cons 'meta-variable %%valsym902))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key291 %%top-ribcage869))))) (build-source %%ae876 (list (build-source %%ae876 'define) %%valsym902 (%%chi419 %%rhs898 %%r864 %%r864 %%w899 #t))))))) ((lambda (%%x905) (%%build-sequence150 #f (list %%x905 (%%rt-eval/residualize413 %%rtem867 (lambda () (build-source %%ae876 (list (build-source %%ae876 'define) %%valsym902 (%%chi419 %%rhs898 %%r864 %%r864 %%w899 #f)))))))) (%%ct-eval/residualize2414 %%ctem866 (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%bound-id903)) ((lambda (%%x906) (if (self-eval? (cons 'global %%valsym902)) %%x906 (build-source #f (list (build-source #f 'quote) %%x906)))) (attach-source #f (cons 'global %%valsym902))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key291 %%top-ribcage869))))))))))))) ((lambda (%%x907) ((lambda (%%e908) (if (annotation? %%e908) (annotation-expression %%e908) %%e908)) (if (%%syntax?37 %%x907) (%%syntax-expression38 %%x907) %%x907))) %%id900)))) (%%wrap361 %%id897 %%w899)))) (if (memv %%t877 '($module-form)) ((lambda (%%ribcage909) (call-with-values (lambda () (%%parse-module429 %%e874 %%w875 %%ae876 (%%make-wrap230 (%%wrap-marks231 %%w875) (cons %%ribcage909 (%%wrap-subst232 %%w875))))) (lambda (%%orig910 %%id911 %%exports912 %%forms913) (begin (if (%%displaced-lexical?213 %%id911 %%r864) (%%displaced-lexical-error214 (%%wrap361 %%id911 %%w875)) (void)) (if (not (%%top-ribcage-mutable?293 %%top-ribcage869)) (syntax-error %%orig910 "invalid definition in read-only environment") (void)) (%%chi-top-module403 %%orig910 %%r864 %%r864 %%top-ribcage869 %%ribcage909 %%ctem866 %%rtem867 %%meta?868 %%id911 %%exports912 %%forms913 %%meta-residualize!870))))) (%%make-ribcage281 '() '() '())) (if (memv %%t877 '($import-form)) (call-with-values (lambda () (%%parse-import430 %%e874 %%w875 %%ae876)) (lambda (%%orig914 %%only?915 %%mid916) (begin (if (not (%%top-ribcage-mutable?293 %%top-ribcage869)) (syntax-error %%orig914 "invalid definition in read-only environment") (void)) (%%ct-eval/residualize2414 %%ctem866 (lambda () ((letrec ((%%retry917 (lambda (%%binding918) ((lambda (%%t919) (if (memv %%t919 '($module)) (begin ($update-module %%mid916 %%ctem866 %%rtem867) (%%do-top-import410 %%only?915 %%top-ribcage869 %%mid916 (%%interface-token376 (%%binding-value197 %%binding918)))) (if (memv %%t919 '(displaced-lexical)) (%%displaced-lexical-error214 %%mid916) ((lambda (%%t920) (if (memv %%t920 '(success)) (%%retry917 (%%lookup216 (%%id-var-name352 %%mid916 '(())) '())) (if (memv %%t920 '(ignore)) ((lambda (%%x921) (if (self-eval? (void)) %%x921 (build-source #f (list (build-source #f 'quote) %%x921)))) (attach-source #f (void))) (if (memv %%t920 '(not-found)) (syntax-error %%mid916 "unknown module") (void))))) ($load-module %%mid916 %%ctem866 %%rtem867))))) (%%binding-type196 %%binding918))))) %%retry917) (%%lookup216 (%%id-var-name352 %%mid916 '(())) '()))))))) (if (memv %%t877 '(alias-form)) (call-with-values (lambda () (%%parse-alias435 %%e874 %%w875 %%ae876)) (lambda (%%new-id922 %%old-id923) ((lambda (%%new-id924) (begin (if (%%displaced-lexical?213 %%new-id924 %%r864) (%%displaced-lexical-error214 %%new-id924) (void)) (if (not (%%top-ribcage-mutable?293 %%top-ribcage869)) (syntax-error (%%source-wrap362 %%e874 %%w875 %%ae876) "invalid definition in read-only environment") (void)) ((lambda (%%sym925) (call-with-values (lambda () (%%top-id-bound-var-name347 %%sym925 (%%wrap-marks231 (%%syntax-wrap39 %%new-id924)) %%top-ribcage869)) (lambda (%%valsym926 %%bound-id927) (begin (if (not (eq? (%%id-var-name352 %%new-id924 '(())) %%valsym926)) (syntax-error (%%source-wrap362 %%e874 %%w875 %%ae876) "definition not permitted") (void)) (if (%%read-only-binding?46 %%valsym926) (syntax-error (%%source-wrap362 %%e874 %%w875 %%ae876) "invalid definition of read-only identifier") (void)) (%%ct-eval/residualize2414 %%ctem866 (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) (%%make-resolved-id336 %%sym925 (%%wrap-marks231 (%%syntax-wrap39 %%new-id924)) (%%id-var-name352 %%old-id923 %%w875)))) ((lambda (%%x928) (if (self-eval? '(do-alias . #f)) %%x928 (build-source #f (list (build-source #f 'quote) %%x928)))) (attach-source #f '(do-alias . #f))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key291 %%top-ribcage869))))))))))) ((lambda (%%x929) ((lambda (%%e930) (if (annotation? %%e930) (annotation-expression %%e930) %%e930)) (if (%%syntax?37 %%x929) (%%syntax-expression38 %%x929) %%x929))) %%new-id924)))) (%%wrap361 %%new-id922 %%w875)))) (begin (if %%meta-seen?871 (syntax-error (%%source-wrap362 %%e874 %%w875 %%ae876) "invalid meta definition") (void)) (if %%meta?868 ((lambda (%%x931) (begin (%%top-level-eval-hook40 %%x931) (%%ct-eval/residualize3415 %%ctem866 void (lambda () %%x931)))) (%%chi-expr420 %%type872 %%value873 %%e874 %%r864 %%r864 %%w875 %%ae876 #t)) (%%rt-eval/residualize413 %%rtem867 (lambda () (%%chi-expr420 %%type872 %%value873 %%e874 %%r864 %%r864 %%w875 %%ae876 #f))))))))))))))) %%type872))))) (%%flatten-exports368 (lambda (%%exports932) ((letrec ((%%loop933 (lambda (%%exports934 %%ls935) (if (null? %%exports934) %%ls935 (%%loop933 (cdr %%exports934) (if (pair? (car %%exports934)) (%%loop933 (car %%exports934) %%ls935) (cons (car %%exports934) %%ls935))))))) %%loop933) %%exports932 '()))) (%%##type-3-interface369 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-3-interface") 'interface 8 #f '#(marks 0 #f exports 0 #f token 0 #f))) (%%make-interface370 (lambda (%%p1936 %%p2937 %%p3938) (begin (##declare (extended-bindings)) (##structure %%##type-3-interface369 %%p1936 %%p2937 %%p3938)))) (%%interface?371 (lambda (%%obj939) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj939 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-3-interface369)))))))) (%%interface-marks372 (lambda (%%obj940) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj940 1 %%##type-3-interface369 %%interface-marks372))) (%%interface-marks-set!373 (lambda (%%obj941 %%val942) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj941 %%val942 1 %%##type-3-interface369 %%interface-marks-set!373))) (%%interface-exports374 (lambda (%%obj943) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj943 2 %%##type-3-interface369 %%interface-exports374))) (%%interface-exports-set!375 (lambda (%%obj944 %%val945) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj944 %%val945 2 %%##type-3-interface369 %%interface-exports-set!375))) (%%interface-token376 (lambda (%%obj946) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj946 3 %%##type-3-interface369 %%interface-token376))) (%%interface-token-set!377 (lambda (%%obj947 %%val948) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj947 %%val948 3 %%##type-3-interface369 %%interface-token-set!377))) (%%make-unresolved-interface378 (lambda (%%mid949 %%exports950) (%%make-interface370 (%%wrap-marks231 (%%syntax-wrap39 %%mid949)) (list->vector (map (lambda (%%x951) (if (pair? %%x951) (car %%x951) %%x951)) %%exports950)) #f))) (%%make-resolved-interface379 (lambda (%%mid952 %%exports953 %%token954) (%%make-interface370 (%%wrap-marks231 (%%syntax-wrap39 %%mid952)) (list->vector (map (lambda (%%x955) (%%id->resolved-id337 (if (pair? %%x955) (car %%x955) %%x955))) %%exports953)) %%token954))) (%%##type-6-module-binding380 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-6-module-binding") 'module-binding 8 #f '#(type 0 #f id 0 #f label 0 #f imps 0 #f val 0 #f exported 0 #f))) (%%make-module-binding381 (lambda (%%p1956 %%p2957 %%p3958 %%p4959 %%p5960 %%p6961) (begin (##declare (extended-bindings)) (##structure %%##type-6-module-binding380 %%p1956 %%p2957 %%p3958 %%p4959 %%p5960 %%p6961)))) (%%module-binding?382 (lambda (%%obj962) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj962 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-6-module-binding380)))))))) (%%module-binding-type383 (lambda (%%obj963) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj963 1 %%##type-6-module-binding380 %%module-binding-type383))) (%%module-binding-type-set!384 (lambda (%%obj964 %%val965) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj964 %%val965 1 %%##type-6-module-binding380 %%module-binding-type-set!384))) (%%module-binding-id385 (lambda (%%obj966) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj966 2 %%##type-6-module-binding380 %%module-binding-id385))) (%%module-binding-id-set!386 (lambda (%%obj967 %%val968) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj967 %%val968 2 %%##type-6-module-binding380 %%module-binding-id-set!386))) (%%module-binding-label387 (lambda (%%obj969) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj969 3 %%##type-6-module-binding380 %%module-binding-label387))) (%%module-binding-label-set!388 (lambda (%%obj970 %%val971) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj970 %%val971 3 %%##type-6-module-binding380 %%module-binding-label-set!388))) (%%module-binding-imps389 (lambda (%%obj972) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj972 4 %%##type-6-module-binding380 %%module-binding-imps389))) (%%module-binding-imps-set!390 (lambda (%%obj973 %%val974) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj973 %%val974 4 %%##type-6-module-binding380 %%module-binding-imps-set!390))) (%%module-binding-val391 (lambda (%%obj975) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj975 5 %%##type-6-module-binding380 %%module-binding-val391))) (%%module-binding-val-set!392 (lambda (%%obj976 %%val977) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj976 %%val977 5 %%##type-6-module-binding380 %%module-binding-val-set!392))) (%%module-binding-exported393 (lambda (%%obj978) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj978 6 %%##type-6-module-binding380 %%module-binding-exported393))) (%%set-module-binding-exported!394 (lambda (%%obj979 %%val980) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj979 %%val980 6 %%##type-6-module-binding380 %%set-module-binding-exported!394))) (%%create-module-binding395 (lambda (%%type981 %%id982 %%label983 %%imps984 %%val985) (%%make-module-binding381 %%type981 %%id982 %%label983 %%imps984 %%val985 #f))) (%%##type-2-frob396 (((lambda () (begin (##declare (extended-bindings)) ##structure))) ##type-type (((lambda () (begin (##declare (extended-bindings)) ##make-uninterned-symbol))) "##type-2-frob") 'frob 8 #f '#(e 0 #f meta? 0 #f))) (%%make-frob397 (lambda (%%p1986 %%p2987) (begin (##declare (extended-bindings)) (##structure %%##type-2-frob396 %%p1986 %%p2987)))) (%%frob?398 (lambda (%%obj988) (begin (##declare (extended-bindings)) (##structure-direct-instance-of? %%obj988 ((lambda () (begin (##declare (extended-bindings) (not safe)) (##type-id %%##type-2-frob396)))))))) (%%frob-e399 (lambda (%%obj989) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj989 1 %%##type-2-frob396 %%frob-e399))) (%%frob-e-set!400 (lambda (%%obj990 %%val991) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj990 %%val991 1 %%##type-2-frob396 %%frob-e-set!400))) (%%frob-meta?401 (lambda (%%obj992) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-ref))) %%obj992 2 %%##type-2-frob396 %%frob-meta?401))) (%%frob-meta?-set!402 (lambda (%%obj993 %%val994) (((lambda () (begin (##declare (extended-bindings)) ##direct-structure-set!))) %%obj993 %%val994 2 %%##type-2-frob396 %%frob-meta?-set!402))) (%%chi-top-module403 (lambda (%%orig995 %%r996 %%mr997 %%top-ribcage998 %%ribcage999 %%ctem1000 %%rtem1001 %%meta?1002 %%id1003 %%exports1004 %%forms1005 %%meta-residualize!1006) ((lambda (%%fexports1007) (call-with-values (lambda () (%%chi-external407 %%ribcage999 %%orig995 (map (lambda (%%d1008) (%%make-frob397 %%d1008 %%meta?1002)) %%forms1005) %%r996 %%mr997 %%ctem1000 %%exports1004 %%fexports1007 %%meta-residualize!1006)) (lambda (%%r1009 %%mr1010 %%bindings1011 %%inits1012) ((letrec ((%%process-exports1013 (lambda (%%fexports1014 %%ctdefs1015) (if (null? %%fexports1014) ((letrec ((%%process-locals1016 (lambda (%%bs1017 %%r1018 %%dts1019 %%dvs1020 %%des1021) (if (null? %%bs1017) ((lambda (%%des1022 %%inits1023) (%%build-sequence150 #f (append (%%ctdefs1015) (list (%%ct-eval/residualize2414 %%ctem1000 (lambda () ((lambda (%%sym1024) ((lambda (%%token1025) ((lambda (%%b1026) ((lambda () (call-with-values (lambda () (%%top-id-bound-var-name347 %%sym1024 (%%wrap-marks231 (%%syntax-wrap39 %%id1003)) %%top-ribcage998)) (lambda (%%valsym1027 %%bound-id1028) (begin (if (not (eq? (%%id-var-name352 %%id1003 '(())) %%valsym1027)) (syntax-error %%orig995 "definition not permitted") (void)) (if (%%read-only-binding?46 %%valsym1027) (syntax-error %%orig995 "invalid definition of read-only identifier") (void)) (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%bound-id1028)) %%b1026 (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key291 %%top-ribcage998))))))))))) ((lambda (%%x1029) (if (self-eval? (cons '$module (%%make-resolved-interface379 %%id1003 %%exports1004 %%token1025))) %%x1029 (build-source #f (list (build-source #f 'quote) %%x1029)))) (attach-source #f (cons '$module (%%make-resolved-interface379 %%id1003 %%exports1004 %%token1025)))))) (($generate-id) %%sym1024))) ((lambda (%%x1030) ((lambda (%%e1031) (if (annotation? %%e1031) (annotation-expression %%e1031) %%e1031)) (if (%%syntax?37 %%x1030) (%%syntax-expression38 %%x1030) %%x1030))) %%id1003)))) (%%rt-eval/residualize413 %%rtem1001 (lambda () (%%build-top-module153 #f %%dts1019 %%dvs1020 %%des1022 (if (null? %%inits1023) (%%chi-void447) (%%build-sequence150 #f (append %%inits1023 (list (%%chi-void447)))))))))))) (%%chi-frobs416 %%des1021 %%r1018 %%mr1010 #f) (%%chi-frobs416 %%inits1012 %%r1018 %%mr1010 #f)) ((lambda (%%b1032 %%bs1033) ((lambda (%%t1034) ((lambda (%%t1035) (if (memv %%t1035 '(define-form)) ((lambda (%%label1036) (if (%%module-binding-exported393 %%b1032) ((lambda (%%var1037) (%%process-locals1016 %%bs1033 %%r1018 (cons 'global %%dts1019) (cons %%label1036 %%dvs1020) (cons (%%module-binding-val391 %%b1032) %%des1021))) (%%module-binding-id385 %%b1032)) ((lambda (%%var1038) (%%process-locals1016 %%bs1033 (%%extend-env210 %%label1036 (cons 'lexical %%var1038) %%r1018) (cons 'local %%dts1019) (cons %%var1038 %%dvs1020) (cons (%%module-binding-val391 %%b1032) %%des1021))) (%%gen-var452 (%%module-binding-id385 %%b1032))))) (%%get-indirect-label276 (%%module-binding-label387 %%b1032))) (if (memv %%t1035 '(ctdefine-form define-syntax-form $module-form alias-form)) (%%process-locals1016 %%bs1033 %%r1018 %%dts1019 %%dvs1020 %%des1021) (error "unexpected module binding type" %%t1034)))) (%%module-binding-type383 %%b1032))) (%%module-binding-type383 %%b1032))) (car %%bs1017) (cdr %%bs1017)))))) %%process-locals1016) %%bindings1011 %%r1009 '() '() '()) ((lambda (%%id1039 %%fexports1040) ((letrec ((%%loop1041 (lambda (%%bs1042) (if (null? %%bs1042) (%%process-exports1013 %%fexports1040 %%ctdefs1015) ((lambda (%%b1043 %%bs1044) (if (%%free-id=?353 (%%module-binding-id385 %%b1043) %%id1039) (if (%%module-binding-exported393 %%b1043) (%%process-exports1013 %%fexports1040 %%ctdefs1015) ((lambda (%%t1045) ((lambda (%%label1046) ((lambda (%%imps1047) ((lambda (%%fexports1048) ((lambda () (begin (%%set-module-binding-exported!394 %%b1043 #t) ((lambda (%%t1049) (if (memv %%t1049 '(define-form)) ((lambda (%%sym1050) (begin (%%set-indirect-label!277 %%label1046 %%sym1050) (%%process-exports1013 %%fexports1048 %%ctdefs1015))) (($generate-id) ((lambda (%%x1051) ((lambda (%%e1052) (if (annotation? %%e1052) (annotation-expression %%e1052) %%e1052)) (if (%%syntax?37 %%x1051) (%%syntax-expression38 %%x1051) %%x1051))) %%id1039))) (if (memv %%t1049 '(ctdefine-form)) ((lambda (%%b1053) (%%process-exports1013 %%fexports1048 (lambda () ((lambda (%%sym1054) (begin (%%set-indirect-label!277 %%label1046 %%sym1054) (cons (%%ct-eval/residualize3415 %%ctem1000 (lambda () (%%put-cte-hook43 %%sym1054 %%b1053)) (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%sym1054)) ((lambda (%%x1055) (if (self-eval? %%b1053) %%x1055 (build-source #f (list (build-source #f 'quote) %%x1055)))) (attach-source #f %%b1053)) (build-source #f (list (build-source #f 'quote) #f)))))) (%%ctdefs1015)))) (%%binding-value197 %%b1053))))) (%%module-binding-val391 %%b1043)) (if (memv %%t1049 '(define-syntax-form)) ((lambda (%%sym1056) (%%process-exports1013 %%fexports1048 (lambda () ((lambda (%%local-label1057) (begin (%%set-indirect-label!277 %%label1046 %%sym1056) (cons (%%ct-eval/residualize3415 %%ctem1000 (lambda () (%%put-cte-hook43 %%sym1056 (car (%%module-binding-val391 %%b1043)))) (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%sym1056)) (cdr (%%module-binding-val391 %%b1043)) (build-source #f (list (build-source #f 'quote) #f)))))) (%%ctdefs1015)))) (%%get-indirect-label276 %%label1046))))) (($generate-id) ((lambda (%%x1058) ((lambda (%%e1059) (if (annotation? %%e1059) (annotation-expression %%e1059) %%e1059)) (if (%%syntax?37 %%x1058) (%%syntax-expression38 %%x1058) %%x1058))) %%id1039))) (if (memv %%t1049 '($module-form)) ((lambda (%%sym1060 %%exports1061) (%%process-exports1013 (append (%%flatten-exports368 %%exports1061) %%fexports1048) (lambda () (begin (%%set-indirect-label!277 %%label1046 %%sym1060) ((lambda (%%rest1062) ((lambda (%%x1063) (cons (%%ct-eval/residualize3415 %%ctem1000 (lambda () (%%put-cte-hook43 %%sym1060 %%x1063)) (lambda () (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%sym1060)) ((lambda (%%x1064) (if (self-eval? %%x1063) %%x1064 (build-source #f (list (build-source #f 'quote) %%x1064)))) (attach-source #f %%x1063)) (build-source #f (list (build-source #f 'quote) #f)))))) %%rest1062)) (cons '$module (%%make-resolved-interface379 %%id1039 %%exports1061 %%sym1060)))) (%%ctdefs1015)))))) (($generate-id) ((lambda (%%x1065) ((lambda (%%e1066) (if (annotation? %%e1066) (annotation-expression %%e1066) %%e1066)) (if (%%syntax?37 %%x1065) (%%syntax-expression38 %%x1065) %%x1065))) %%id1039)) (%%module-binding-val391 %%b1043)) (if (memv %%t1049 '(alias-form)) (%%process-exports1013 %%fexports1048 (lambda () ((lambda (%%rest1067) (begin (if (%%indirect-label?272 %%label1046) (if (not (symbol? (%%get-indirect-label276 %%label1046))) (syntax-error (%%module-binding-id385 %%b1043) "unexported target of alias") (void)) (void)) %%rest1067)) (%%ctdefs1015)))) (error "unexpected module binding type" %%t1045))))))) %%t1045))))) (append %%imps1047 %%fexports1040))) (%%module-binding-imps389 %%b1043))) (%%module-binding-label387 %%b1043))) (%%module-binding-type383 %%b1043))) (%%loop1041 %%bs1044))) (car %%bs1042) (cdr %%bs1042)))))) %%loop1041) %%bindings1011)) (car %%fexports1014) (cdr %%fexports1014)))))) %%process-exports1013) %%fexports1007 (lambda () '()))))) (%%flatten-exports368 %%exports1004)))) (%%id-set-diff404 (lambda (%%exports1068 %%defs1069) (if (null? %%exports1068) '() (if (%%bound-id-member?360 (car %%exports1068) %%defs1069) (%%id-set-diff404 (cdr %%exports1068) %%defs1069) (cons (car %%exports1068) (%%id-set-diff404 (cdr %%exports1068) %%defs1069)))))) (%%check-module-exports405 (lambda (%%source-exp1070 %%fexports1071 %%ids1072) (letrec ((%%defined?1073 (lambda (%%e1074 %%ids1075) (ormap (lambda (%%x1076) (if (%%import-interface?297 %%x1076) ((lambda (%%x.iface1077 %%x.new-marks1078) ((lambda (%%t1079) (if %%t1079 ((lambda (%%token1080) (%%lookup-import-binding-name333 ((lambda (%%x1081) ((lambda (%%e1082) (if (annotation? %%e1082) (annotation-expression %%e1082) %%e1082)) (if (%%syntax?37 %%x1081) (%%syntax-expression38 %%x1081) %%x1081))) %%e1074) (%%id-marks227 %%e1074) %%token1080 %%x.new-marks1078)) %%t1079) ((lambda (%%v1083) ((letrec ((%%lp1084 (lambda (%%i1085) (if (fx>= %%i1085 0) ((lambda (%%t1086) (if %%t1086 %%t1086 (%%lp1084 (fx- %%i1085 1)))) ((lambda (%%id1087) (%%help-bound-id=?355 ((lambda (%%x1088) ((lambda (%%e1089) (if (annotation? %%e1089) (annotation-expression %%e1089) %%e1089)) (if (%%syntax?37 %%x1088) (%%syntax-expression38 %%x1088) %%x1088))) %%id1087) (%%join-marks341 %%x.new-marks1078 (%%id-marks227 %%id1087)) ((lambda (%%x1090) ((lambda (%%e1091) (if (annotation? %%e1091) (annotation-expression %%e1091) %%e1091)) (if (%%syntax?37 %%x1090) (%%syntax-expression38 %%x1090) %%x1090))) %%e1074) (%%id-marks227 %%e1074))) (vector-ref %%v1083 %%i1085))) #f)))) %%lp1084) (fx- (vector-length %%v1083) 1))) (%%interface-exports374 %%x.iface1077)))) (%%interface-token376 %%x.iface1077))) (%%import-interface-interface298 %%x1076) (%%import-interface-new-marks300 %%x1076)) (%%bound-id=?356 %%e1074 %%x1076))) %%ids1075)))) ((letrec ((%%loop1092 (lambda (%%fexports1093 %%missing1094) (if (null? %%fexports1093) (if (not (null? %%missing1094)) (syntax-error (car %%missing1094) (if (= (length %%missing1094) 1) "missing definition for export" "missing definition for multiple exports, including")) (void)) ((lambda (%%e1095 %%fexports1096) (if (%%defined?1073 %%e1095 %%ids1072) (%%loop1092 %%fexports1096 %%missing1094) (%%loop1092 %%fexports1096 (cons %%e1095 %%missing1094)))) (car %%fexports1093) (cdr %%fexports1093)))))) %%loop1092) %%fexports1071 '())))) (%%check-defined-ids406 (lambda (%%source-exp1097 %%ls1098) (letrec ((%%vfold1099 (lambda (%%v1102 %%p1103 %%cls1104) ((lambda (%%len1105) ((letrec ((%%lp1106 (lambda (%%i1107 %%cls1108) (if (fx= %%i1107 %%len1105) %%cls1108 (%%lp1106 (fx+ %%i1107 1) (%%p1103 (vector-ref %%v1102 %%i1107) %%cls1108)))))) %%lp1106) 0 %%cls1104)) (vector-length %%v1102)))) (%%conflicts1100 (lambda (%%x1109 %%y1110 %%cls1111) (if (%%import-interface?297 %%x1109) ((lambda (%%x.iface1112 %%x.new-marks1113) (if (%%import-interface?297 %%y1110) ((lambda (%%y.iface1114 %%y.new-marks1115) ((lambda (%%xe1116 %%ye1117) (if (fx> (vector-length %%xe1116) (vector-length %%ye1117)) (%%vfold1099 %%ye1117 (lambda (%%id1118 %%cls1119) (%%id-iface-conflicts1101 %%id1118 %%y.new-marks1115 %%x.iface1112 %%x.new-marks1113 %%cls1119)) %%cls1111) (%%vfold1099 %%xe1116 (lambda (%%id1120 %%cls1121) (%%id-iface-conflicts1101 %%id1120 %%x.new-marks1113 %%y.iface1114 %%y.new-marks1115 %%cls1121)) %%cls1111))) (%%interface-exports374 %%x.iface1112) (%%interface-exports374 %%y.iface1114))) (%%import-interface-interface298 %%y1110) (%%import-interface-new-marks300 %%y1110)) (%%id-iface-conflicts1101 %%y1110 '() %%x.iface1112 %%x.new-marks1113 %%cls1111))) (%%import-interface-interface298 %%x1109) (%%import-interface-new-marks300 %%x1109)) (if (%%import-interface?297 %%y1110) ((lambda (%%y.iface1122 %%y.new-marks1123) (%%id-iface-conflicts1101 %%x1109 '() %%y.iface1122 %%y.new-marks1123 %%cls1111)) (%%import-interface-interface298 %%y1110) (%%import-interface-new-marks300 %%y1110)) (if (%%bound-id=?356 %%x1109 %%y1110) (cons %%x1109 %%cls1111) %%cls1111))))) (%%id-iface-conflicts1101 (lambda (%%id1124 %%id.new-marks1125 %%iface1126 %%iface.new-marks1127 %%cls1128) ((lambda (%%id.sym1129 %%id.marks1130) ((lambda (%%t1131) (if %%t1131 ((lambda (%%token1132) (if (%%lookup-import-binding-name333 %%id.sym1129 %%id.marks1130 %%token1132 %%iface.new-marks1127) (cons %%id1124 %%cls1128) %%cls1128)) %%t1131) (%%vfold1099 (%%interface-exports374 %%iface1126) (lambda (%%*id1133 %%cls1134) ((lambda (%%*id.sym1135 %%*id.marks1136) (if (%%help-bound-id=?355 %%*id.sym1135 %%*id.marks1136 %%id.sym1129 %%id.marks1130) (cons %%*id1133 %%cls1134) %%cls1134)) ((lambda (%%x1137) ((lambda (%%e1138) (if (annotation? %%e1138) (annotation-expression %%e1138) %%e1138)) (if (%%syntax?37 %%x1137) (%%syntax-expression38 %%x1137) %%x1137))) %%*id1133) (%%join-marks341 %%iface.new-marks1127 (%%id-marks227 %%*id1133)))) %%cls1128))) (%%interface-token376 %%iface1126))) ((lambda (%%x1139) ((lambda (%%e1140) (if (annotation? %%e1140) (annotation-expression %%e1140) %%e1140)) (if (%%syntax?37 %%x1139) (%%syntax-expression38 %%x1139) %%x1139))) %%id1124) (%%join-marks341 %%id.new-marks1125 (%%id-marks227 %%id1124)))))) (if (not (null? %%ls1098)) ((letrec ((%%lp1141 (lambda (%%x1142 %%ls1143 %%cls1144) (if (null? %%ls1143) (if (not (null? %%cls1144)) ((lambda (%%cls1145) (syntax-error %%source-exp1097 "duplicate definition for " (symbol->string (car %%cls1145)) " in")) (syntax->datum %%cls1144)) (void)) ((letrec ((%%lp21146 (lambda (%%ls21147 %%cls1148) (if (null? %%ls21147) (%%lp1141 (car %%ls1143) (cdr %%ls1143) %%cls1148) (%%lp21146 (cdr %%ls21147) (%%conflicts1100 %%x1142 (car %%ls21147) %%cls1148)))))) %%lp21146) %%ls1143 %%cls1144))))) %%lp1141) (car %%ls1098) (cdr %%ls1098) '()) (void))))) (%%chi-external407 (lambda (%%ribcage1149 %%source-exp1150 %%body1151 %%r1152 %%mr1153 %%ctem1154 %%exports1155 %%fexports1156 %%meta-residualize!1157) (letrec ((%%return1158 (lambda (%%r1161 %%mr1162 %%bindings1163 %%ids1164 %%inits1165) (begin (%%check-defined-ids406 %%source-exp1150 %%ids1164) (%%check-module-exports405 %%source-exp1150 %%fexports1156 %%ids1164) (values %%r1161 %%mr1162 %%bindings1163 %%inits1165)))) (%%get-implicit-exports1159 (lambda (%%id1166) ((letrec ((%%f1167 (lambda (%%exports1168) (if (null? %%exports1168) '() (if (if (pair? (car %%exports1168)) (%%bound-id=?356 %%id1166 (caar %%exports1168)) #f) (%%flatten-exports368 (cdar %%exports1168)) (%%f1167 (cdr %%exports1168))))))) %%f1167) %%exports1155))) (%%update-imp-exports1160 (lambda (%%bindings1169 %%exports1170) ((lambda (%%exports1171) (map (lambda (%%b1172) ((lambda (%%id1173) (if (not (%%bound-id-member?360 %%id1173 %%exports1171)) %%b1172 (%%create-module-binding395 (%%module-binding-type383 %%b1172) %%id1173 (%%module-binding-label387 %%b1172) (append (%%get-implicit-exports1159 %%id1173) (%%module-binding-imps389 %%b1172)) (%%module-binding-val391 %%b1172)))) (%%module-binding-id385 %%b1172))) %%bindings1169)) (map (lambda (%%x1174) (if (pair? %%x1174) (car %%x1174) %%x1174)) %%exports1170))))) ((letrec ((%%parse1175 (lambda (%%body1176 %%r1177 %%mr1178 %%ids1179 %%bindings1180 %%inits1181 %%meta-seen?1182) (if (null? %%body1176) (%%return1158 %%r1177 %%mr1178 %%bindings1180 %%ids1179 %%inits1181) ((lambda (%%fr1183) ((lambda (%%e1184) ((lambda (%%meta?1185) ((lambda () (call-with-values (lambda () (%%syntax-type364 %%e1184 %%r1177 '(()) #f %%ribcage1149)) (lambda (%%type1186 %%value1187 %%e1188 %%w1189 %%ae1190) ((lambda (%%t1191) (if (memv %%t1191 '(define-form)) (call-with-values (lambda () (%%parse-define431 %%e1188 %%w1189 %%ae1190)) (lambda (%%id1192 %%rhs1193 %%w1194) ((lambda (%%id1195) ((lambda (%%label1196) ((lambda (%%imps1197) ((lambda () (begin (%%extend-ribcage!328 %%ribcage1149 %%id1195 %%label1196) (if %%meta?1185 ((lambda (%%sym1198) ((lambda (%%b1199) ((lambda () ((lambda (%%mr1200) ((lambda (%%exp1201) (begin (%%define-top-level-value-hook42 %%sym1198 (%%top-level-eval-hook40 %%exp1201)) (%%meta-residualize!1157 (%%ct-eval/residualize3415 %%ctem1154 void (lambda () (build-source #f (list (build-source #f 'define) %%sym1198 %%exp1201))))) (%%parse1175 (cdr %%body1176) %%r1177 %%mr1200 (cons %%id1195 %%ids1179) (cons (%%create-module-binding395 'ctdefine-form %%id1195 %%label1196 %%imps1197 %%b1199) %%bindings1180) %%inits1181 #f))) (%%chi419 %%rhs1193 %%mr1200 %%mr1200 %%w1194 #t))) (%%extend-env210 (%%get-indirect-label276 %%label1196) %%b1199 %%mr1178))))) (cons 'meta-variable %%sym1198))) (($generate-id) ((lambda (%%x1202) ((lambda (%%e1203) (if (annotation? %%e1203) (annotation-expression %%e1203) %%e1203)) (if (%%syntax?37 %%x1202) (%%syntax-expression38 %%x1202) %%x1202))) %%id1195))) (%%parse1175 (cdr %%body1176) %%r1177 %%mr1178 (cons %%id1195 %%ids1179) (cons (%%create-module-binding395 %%type1186 %%id1195 %%label1196 %%imps1197 (%%make-frob397 (%%wrap361 %%rhs1193 %%w1194) %%meta?1185)) %%bindings1180) %%inits1181 #f)))))) (%%get-implicit-exports1159 %%id1195))) (%%gen-indirect-label275))) (%%wrap361 %%id1192 %%w1194)))) (if (memv %%t1191 '(define-syntax-form)) (call-with-values (lambda () (%%parse-define-syntax432 %%e1188 %%w1189 %%ae1190)) (lambda (%%id1204 %%rhs1205 %%w1206) ((lambda (%%id1207) ((lambda (%%label1208) ((lambda (%%imps1209) ((lambda (%%exp1210) ((lambda () (begin (%%extend-ribcage!328 %%ribcage1149 %%id1207 %%label1208) ((lambda (%%l1211 %%b1212) (%%parse1175 (cdr %%body1176) (%%extend-env210 %%l1211 %%b1212 %%r1177) (%%extend-env210 %%l1211 %%b1212 %%mr1178) (cons %%id1207 %%ids1179) (cons (%%create-module-binding395 %%type1186 %%id1207 %%label1208 %%imps1209 (cons %%b1212 %%exp1210)) %%bindings1180) %%inits1181 #f)) (%%get-indirect-label276 %%label1208) (%%defer-or-eval-transformer218 %%top-level-eval-hook40 %%exp1210)))))) (%%chi419 %%rhs1205 %%mr1178 %%mr1178 %%w1206 #t))) (%%get-implicit-exports1159 %%id1207))) (%%gen-indirect-label275))) (%%wrap361 %%id1204 %%w1206)))) (if (memv %%t1191 '($module-form)) ((lambda (%%*ribcage1213) ((lambda (%%*w1214) ((lambda () (call-with-values (lambda () (%%parse-module429 %%e1188 %%w1189 %%ae1190 %%*w1214)) (lambda (%%orig1215 %%id1216 %%*exports1217 %%forms1218) (call-with-values (lambda () (%%chi-external407 %%*ribcage1213 %%orig1215 (map (lambda (%%d1219) (%%make-frob397 %%d1219 %%meta?1185)) %%forms1218) %%r1177 %%mr1178 %%ctem1154 %%*exports1217 (%%flatten-exports368 %%*exports1217) %%meta-residualize!1157)) (lambda (%%r1220 %%mr1221 %%*bindings1222 %%*inits1223) ((lambda (%%iface1224 %%bindings1225 %%inits1226 %%label1227 %%imps1228) (begin (%%extend-ribcage!328 %%ribcage1149 %%id1216 %%label1227) ((lambda (%%l1229 %%b1230) (%%parse1175 (cdr %%body1176) (%%extend-env210 %%l1229 %%b1230 %%r1220) (%%extend-env210 %%l1229 %%b1230 %%mr1221) (cons %%id1216 %%ids1179) (cons (%%create-module-binding395 %%type1186 %%id1216 %%label1227 %%imps1228 %%*exports1217) %%bindings1225) %%inits1226 #f)) (%%get-indirect-label276 %%label1227) (cons '$module %%iface1224)))) (%%make-unresolved-interface378 %%id1216 %%*exports1217) (append %%*bindings1222 %%bindings1180) (append %%inits1181 %%*inits1223) (%%gen-indirect-label275) (%%get-implicit-exports1159 %%id1216))))))))) (%%make-wrap230 (%%wrap-marks231 %%w1189) (cons %%*ribcage1213 (%%wrap-subst232 %%w1189))))) (%%make-ribcage281 '() '() '())) (if (memv %%t1191 '($import-form)) (call-with-values (lambda () (%%parse-import430 %%e1188 %%w1189 %%ae1190)) (lambda (%%orig1231 %%only?1232 %%mid1233) ((lambda (%%mlabel1234) ((lambda (%%binding1235) ((lambda (%%t1236) (if (memv %%t1236 '($module)) ((lambda (%%iface1237) ((lambda (%%import-iface1238) ((lambda () (begin (if %%only?1232 (%%extend-ribcage-barrier!330 %%ribcage1149 %%mid1233) (void)) (%%do-import!428 %%import-iface1238 %%ribcage1149) (%%parse1175 (cdr %%body1176) %%r1177 %%mr1178 (cons %%import-iface1238 %%ids1179) (%%update-imp-exports1160 %%bindings1180 (vector->list (%%interface-exports374 %%iface1237))) %%inits1181 #f))))) (%%make-import-interface296 %%iface1237 (%%import-mark-delta426 %%mid1233 %%iface1237)))) (%%binding-value197 %%binding1235)) (if (memv %%t1236 '(displaced-lexical)) (%%displaced-lexical-error214 %%mid1233) (syntax-error %%mid1233 "unknown module")))) (%%binding-type196 %%binding1235))) (%%lookup216 %%mlabel1234 %%r1177))) (%%id-var-name352 %%mid1233 '(()))))) (if (memv %%t1191 '(alias-form)) (call-with-values (lambda () (%%parse-alias435 %%e1188 %%w1189 %%ae1190)) (lambda (%%new-id1239 %%old-id1240) ((lambda (%%new-id1241) ((lambda (%%label1242) ((lambda (%%imps1243) ((lambda () (begin (%%extend-ribcage!328 %%ribcage1149 %%new-id1241 %%label1242) (%%parse1175 (cdr %%body1176) %%r1177 %%mr1178 (cons %%new-id1241 %%ids1179) (cons (%%create-module-binding395 %%type1186 %%new-id1241 %%label1242 %%imps1243 #f) %%bindings1180) %%inits1181 #f))))) (%%get-implicit-exports1159 %%new-id1241))) (%%id-var-name-loc351 %%old-id1240 %%w1189))) (%%wrap361 %%new-id1239 %%w1189)))) (if (memv %%t1191 '(begin-form)) (%%parse1175 ((letrec ((%%f1244 (lambda (%%forms1245) (if (null? %%forms1245) (cdr %%body1176) (cons (%%make-frob397 (%%wrap361 (car %%forms1245) %%w1189) %%meta?1185) (%%f1244 (cdr %%forms1245))))))) %%f1244) (%%parse-begin436 %%e1188 %%w1189 %%ae1190 #t)) %%r1177 %%mr1178 %%ids1179 %%bindings1180 %%inits1181 #f) (if (memv %%t1191 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when434 %%e1188 %%w1189 %%ae1190)) (lambda (%%when-list1246 %%forms1247) (%%parse1175 (if (memq 'eval %%when-list1246) ((letrec ((%%f1248 (lambda (%%forms1249) (if (null? %%forms1249) (cdr %%body1176) (cons (%%make-frob397 (%%wrap361 (car %%forms1249) %%w1189) %%meta?1185) (%%f1248 (cdr %%forms1249))))))) %%f1248) %%forms1247) (cdr %%body1176)) %%r1177 %%mr1178 %%ids1179 %%bindings1180 %%inits1181 #f))) (if (memv %%t1191 '(meta-form)) (%%parse1175 (cons (%%make-frob397 (%%wrap361 (%%parse-meta433 %%e1188 %%w1189 %%ae1190) %%w1189) #t) (cdr %%body1176)) %%r1177 %%mr1178 %%ids1179 %%bindings1180 %%inits1181 #t) (if (memv %%t1191 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax446 %%value1187 %%e1188 %%r1177 %%mr1178 %%w1189 %%ae1190)) (lambda (%%forms1250 %%r1251 %%mr1252 %%w1253 %%ae1254) (%%parse1175 ((letrec ((%%f1255 (lambda (%%forms1256) (if (null? %%forms1256) (cdr %%body1176) (cons (%%make-frob397 (%%wrap361 (car %%forms1256) %%w1253) %%meta?1185) (%%f1255 (cdr %%forms1256))))))) %%f1255) %%forms1250) %%r1251 %%mr1252 %%ids1179 %%bindings1180 %%inits1181 #f))) (begin (if %%meta-seen?1182 (syntax-error (%%source-wrap362 %%e1188 %%w1189 %%ae1190) "invalid meta definition") (void)) ((letrec ((%%f1257 (lambda (%%body1258) (if ((lambda (%%t1259) (if %%t1259 %%t1259 (not (%%frob-meta?401 (car %%body1258))))) (null? %%body1258)) (%%return1158 %%r1177 %%mr1178 %%bindings1180 %%ids1179 (append %%inits1181 %%body1258)) (begin ((lambda (%%x1260) (begin (%%top-level-eval-hook40 %%x1260) (%%meta-residualize!1157 (%%ct-eval/residualize3415 %%ctem1154 void (lambda () %%x1260))))) (%%chi-meta-frob417 (car %%body1258) %%mr1178)) (%%f1257 (cdr %%body1258))))))) %%f1257) (cons (%%make-frob397 (%%source-wrap362 %%e1188 %%w1189 %%ae1190) %%meta?1185) (cdr %%body1176)))))))))))))) %%type1186)))))) (%%frob-meta?401 %%fr1183))) (%%frob-e399 %%fr1183))) (car %%body1176)))))) %%parse1175) %%body1151 %%r1152 %%mr1153 '() '() '() #f)))) (%%vmap408 (lambda (%%fn1261 %%v1262) ((letrec ((%%do1263 (lambda (%%i1264 %%ls1265) (if (fx< %%i1264 0) %%ls1265 (%%do1263 (fx- %%i1264 1) (cons (%%fn1261 (vector-ref %%v1262 %%i1264)) %%ls1265)))))) %%do1263) (fx- (vector-length %%v1262) 1) '()))) (%%vfor-each409 (lambda (%%fn1266 %%v1267) ((lambda (%%len1268) ((letrec ((%%do1269 (lambda (%%i1270) (if (not (fx= %%i1270 %%len1268)) (begin (%%fn1266 (vector-ref %%v1267 %%i1270)) (%%do1269 (fx+ %%i1270 1))) (void))))) %%do1269) 0)) (vector-length %%v1267)))) (%%do-top-import410 (lambda (%%import-only?1271 %%top-ribcage1272 %%mid1273 %%token1274) (build-source #f (list (build-source #f (list (build-source #f '$sc-put-cte))) (build-source #f (list (build-source #f 'quote) %%mid1273)) ((lambda (%%x1275) (if (self-eval? (cons 'do-import %%token1274)) %%x1275 (build-source #f (list (build-source #f 'quote) %%x1275)))) (attach-source #f (cons 'do-import %%token1274))) (build-source #f (list (build-source #f 'quote) (%%top-ribcage-key291 %%top-ribcage1272))))))) (%%update-mode-set411 ((lambda (%%table1276) (lambda (%%when-list1277 %%mode-set1278) (letrec ((%%remq1279 (lambda (%%x1280 %%ls1281) (if (null? %%ls1281) '() (if (eq? (car %%ls1281) %%x1280) (%%remq1279 %%x1280 (cdr %%ls1281)) (cons (car %%ls1281) (%%remq1279 %%x1280 (cdr %%ls1281)))))))) (%%remq1279 '- (apply append (map (lambda (%%m1282) ((lambda (%%row1283) (map (lambda (%%s1284) (cdr (assq %%s1284 %%row1283))) %%when-list1277)) (cdr (assq %%m1282 %%table1276)))) %%mode-set1278)))))) '((L (load . L) (compile . C) (visit . V) (revisit . R) (eval . -)) (C (load . -) (compile . -) (visit . -) (revisit . -) (eval . C)) (V (load . V) (compile . C) (visit . V) (revisit . -) (eval . -)) (R (load . R) (compile . C) (visit . -) (revisit . R) (eval . -)) (E (load . -) (compile . -) (visit . -) (revisit . -) (eval . E))))) (%%initial-mode-set412 (lambda (%%when-list1285 %%compiling-a-file1286) (apply append (map (lambda (%%s1287) (if %%compiling-a-file1286 ((lambda (%%t1288) (if (memv %%t1288 '(compile)) '(C) (if (memv %%t1288 '(load)) '(L) (if (memv %%t1288 '(visit)) '(V) (if (memv %%t1288 '(revisit)) '(R) '()))))) %%s1287) ((lambda (%%t1289) (if (memv %%t1289 '(eval)) '(E) '())) %%s1287))) %%when-list1285)))) (%%rt-eval/residualize413 (lambda (%%rtem1290 %%thunk1291) (if (memq 'E %%rtem1290) (%%thunk1291) ((lambda (%%thunk1292) (if (memq 'V %%rtem1290) (if ((lambda (%%t1293) (if %%t1293 %%t1293 (memq 'R %%rtem1290))) (memq 'L %%rtem1290)) (%%thunk1292) (begin (vector-set! (%%thunk1292) 0 visit-marker) (%%thunk1292))) (if ((lambda (%%t1294) (if %%t1294 %%t1294 (memq 'R %%rtem1290))) (memq 'L %%rtem1290)) (%%thunk1292) (%%chi-void447)))) (if (memq 'C %%rtem1290) ((lambda (%%x1295) (begin (%%top-level-eval-hook40 %%x1295) (lambda () %%x1295))) (%%thunk1291)) %%thunk1291))))) (%%ct-eval/residualize2414 (lambda (%%ctem1296 %%thunk1297) ((lambda (%%t1298) (%%ct-eval/residualize3415 %%ctem1296 (lambda () (begin (if (not %%t1298) (set! %%t1298 (%%thunk1297)) (void)) (%%top-level-eval-hook40 %%t1298))) (lambda () ((lambda (%%t1299) (if %%t1299 %%t1299 (%%thunk1297))) %%t1298)))) #f))) (%%ct-eval/residualize3415 (lambda (%%ctem1300 %%eval-thunk1301 %%residualize-thunk1302) (if (memq 'E %%ctem1300) (begin (%%eval-thunk1301) (%%chi-void447)) (begin (if (memq 'C %%ctem1300) (%%eval-thunk1301) (void)) (if (memq 'R %%ctem1300) (if ((lambda (%%t1303) (if %%t1303 %%t1303 (memq 'V %%ctem1300))) (memq 'L %%ctem1300)) (%%residualize-thunk1302) (%%residualize-thunk1302)) (if ((lambda (%%t1304) (if %%t1304 %%t1304 (memq 'V %%ctem1300))) (memq 'L %%ctem1300)) (begin (vector-set! (%%residualize-thunk1302) 0 visit-marker) (%%residualize-thunk1302)) (%%chi-void447))))))) (%%chi-frobs416 (lambda (%%frob*1305 %%r1306 %%mr1307 %%m?1308) (map (lambda (%%x1309) (%%chi419 (%%frob-e399 %%x1309) %%r1306 %%mr1307 '(()) %%m?1308)) %%frob*1305))) (%%chi-meta-frob417 (lambda (%%x1310 %%mr1311) (%%chi419 (%%frob-e399 %%x1310) %%mr1311 %%mr1311 '(()) #t))) (%%chi-sequence418 (lambda (%%body1312 %%r1313 %%mr1314 %%w1315 %%ae1316 %%m?1317) (%%build-sequence150 %%ae1316 ((letrec ((%%dobody1318 (lambda (%%body1319) (if (null? %%body1319) '() ((lambda (%%first1320) (cons %%first1320 (%%dobody1318 (cdr %%body1319)))) (%%chi419 (car %%body1319) %%r1313 %%mr1314 %%w1315 %%m?1317)))))) %%dobody1318) %%body1312)))) (%%chi419 (lambda (%%e1321 %%r1322 %%mr1323 %%w1324 %%m?1325) (call-with-values (lambda () (%%syntax-type364 %%e1321 %%r1322 %%w1324 #f #f)) (lambda (%%type1326 %%value1327 %%e1328 %%w1329 %%ae1330) (%%chi-expr420 %%type1326 %%value1327 %%e1328 %%r1322 %%mr1323 %%w1329 %%ae1330 %%m?1325))))) (%%chi-expr420 (lambda (%%type1331 %%value1332 %%e1333 %%r1334 %%mr1335 %%w1336 %%ae1337 %%m?1338) ((lambda (%%t1339) (if (memv %%t1339 '(lexical)) %%value1332 (if (memv %%t1339 '(core)) (%%value1332 %%e1333 %%r1334 %%mr1335 %%w1336 %%ae1337 %%m?1338) (if (memv %%t1339 '(lexical-call)) (%%chi-application421 %%value1332 %%e1333 %%r1334 %%mr1335 %%w1336 %%ae1337 %%m?1338) (if (memv %%t1339 '(constant)) ((lambda (%%x1340) (if (self-eval? (%%strip451 (%%source-wrap362 %%e1333 %%w1336 %%ae1337) '(()))) %%x1340 (build-source %%ae1337 (list (build-source %%ae1337 'quote) %%x1340)))) (attach-source %%ae1337 (%%strip451 (%%source-wrap362 %%e1333 %%w1336 %%ae1337) '(())))) (if (memv %%t1339 '(global)) (build-source %%ae1337 %%value1332) (if (memv %%t1339 '(meta-variable)) (if %%m?1338 (build-source %%ae1337 %%value1332) (%%displaced-lexical-error214 (%%source-wrap362 %%e1333 %%w1336 %%ae1337))) (if (memv %%t1339 '(call)) (%%chi-application421 (%%chi419 (car %%e1333) %%r1334 %%mr1335 %%w1336 %%m?1338) %%e1333 %%r1334 %%mr1335 %%w1336 %%ae1337 %%m?1338) (if (memv %%t1339 '(begin-form)) (%%chi-sequence418 (%%parse-begin436 %%e1333 %%w1336 %%ae1337 #f) %%r1334 %%mr1335 %%w1336 %%ae1337 %%m?1338) (if (memv %%t1339 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax446 %%value1332 %%e1333 %%r1334 %%mr1335 %%w1336 %%ae1337)) (lambda (%%forms1341 %%r1342 %%mr1343 %%w1344 %%ae1345) (%%chi-sequence418 %%forms1341 %%r1342 %%mr1343 %%w1344 %%ae1345 %%m?1338))) (if (memv %%t1339 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when434 %%e1333 %%w1336 %%ae1337)) (lambda (%%when-list1346 %%forms1347) (if (memq 'eval %%when-list1346) (%%chi-sequence418 %%forms1347 %%r1334 %%mr1335 %%w1336 %%ae1337 %%m?1338) (%%chi-void447)))) (if (memv %%t1339 '(meta-form)) (syntax-error (%%source-wrap362 %%e1333 %%w1336 %%ae1337) "invalid context for meta definition") (if (memv %%t1339 '(define-form)) (begin (%%parse-define431 %%e1333 %%w1336 %%ae1337) (syntax-error (%%source-wrap362 %%e1333 %%w1336 %%ae1337) "invalid context for definition")) (if (memv %%t1339 '(define-syntax-form)) (begin (%%parse-define-syntax432 %%e1333 %%w1336 %%ae1337) (syntax-error (%%source-wrap362 %%e1333 %%w1336 %%ae1337) "invalid context for definition")) (if (memv %%t1339 '($module-form)) (call-with-values (lambda () (%%parse-module429 %%e1333 %%w1336 %%ae1337 %%w1336)) (lambda (%%orig1348 %%id1349 %%exports1350 %%forms1351) (syntax-error %%orig1348 "invalid context for definition"))) (if (memv %%t1339 '($import-form)) (call-with-values (lambda () (%%parse-import430 %%e1333 %%w1336 %%ae1337)) (lambda (%%orig1352 %%only?1353 %%mid1354) (syntax-error %%orig1352 "invalid context for definition"))) (if (memv %%t1339 '(alias-form)) (begin (%%parse-alias435 %%e1333 %%w1336 %%ae1337) (syntax-error (%%source-wrap362 %%e1333 %%w1336 %%ae1337) "invalid context for definition")) (if (memv %%t1339 '(syntax)) (syntax-error (%%source-wrap362 %%e1333 %%w1336 %%ae1337) "reference to pattern variable outside syntax form") (if (memv %%t1339 '(displaced-lexical)) (%%displaced-lexical-error214 (%%source-wrap362 %%e1333 %%w1336 %%ae1337)) (syntax-error (%%source-wrap362 %%e1333 %%w1336 %%ae1337))))))))))))))))))))) %%type1331))) (%%chi-application421 (lambda (%%x1355 %%e1356 %%r1357 %%mr1358 %%w1359 %%ae1360 %%m?1361) ((lambda (%%tmp1362) ((lambda (%%tmp1363) (if %%tmp1363 (apply (lambda (%%e01364 %%e11365) (build-source %%ae1360 (cons %%x1355 (map (lambda (%%e1366) (%%chi419 %%e1366 %%r1357 %%mr1358 %%w1359 %%m?1361)) %%e11365)))) %%tmp1363) ((lambda (%%_1368) (syntax-error (%%source-wrap362 %%e1356 %%w1359 %%ae1360))) %%tmp1362))) ($syntax-dispatch %%tmp1362 '(any . each-any)))) %%e1356))) (%%chi-set!422 (lambda (%%e1369 %%r1370 %%w1371 %%ae1372 %%rib1373) ((lambda (%%tmp1374) ((lambda (%%tmp1375) (if (if %%tmp1375 (apply (lambda (%%_1376 %%id1377 %%val1378) (%%id?221 %%id1377)) %%tmp1375) #f) (apply (lambda (%%_1379 %%id1380 %%val1381) ((lambda (%%n1382) ((lambda (%%b1383) ((lambda (%%t1384) (if (memv %%t1384 '(macro!)) ((lambda (%%id1385 %%val1386) (%%syntax-type364 (%%chi-macro423 (%%binding-value197 %%b1383) (list '#structure(#4# #(#5# set! #6# 2755032) (#7# #structure(#9# () () ()) #structure(#9# #(id val) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(t) #(("m" . #11#)) #("i")) #structure(#9# () () ()) #structure(#9# #(b) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(n) #(#7#) #("i")) #structure(#9# #(_ id val) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(e r w ae rib) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #10# . #12#)) %%id1385 %%val1386) %%r1370 '(()) #f %%rib1373) %%r1370 '(()) #f %%rib1373)) (%%wrap361 %%id1380 %%w1371) (%%wrap361 %%val1381 %%w1371)) (values 'core (lambda (%%e1387 %%r1388 %%mr1389 %%w1390 %%ae1391 %%m?1392) ((lambda (%%val1393 %%n1394) ((lambda (%%b1395) ((lambda (%%t1396) (if (memv %%t1396 '(lexical)) (build-source %%ae1391 (list (build-source %%ae1391 'set!) (%%binding-value197 %%b1395) %%val1393)) (if (memv %%t1396 '(global)) ((lambda (%%sym1397) (begin (if (%%read-only-binding?46 %%n1394) (syntax-error (%%source-wrap362 %%e1387 %%w1390 %%ae1391) "invalid assignment to read-only variable") (void)) (build-source %%ae1391 (list (build-source %%ae1391 'set!) %%sym1397 %%val1393)))) (%%binding-value197 %%b1395)) (if (memv %%t1396 '(meta-variable)) (if %%m?1392 (build-source %%ae1391 (list (build-source %%ae1391 'set!) (%%binding-value197 %%b1395) %%val1393)) (%%displaced-lexical-error214 (%%wrap361 %%id1380 %%w1390))) (if (memv %%t1396 '(displaced-lexical)) (%%displaced-lexical-error214 (%%wrap361 %%id1380 %%w1390)) (syntax-error (%%source-wrap362 %%e1387 %%w1390 %%ae1391))))))) (%%binding-type196 %%b1395))) (%%lookup216 %%n1394 %%r1388))) (%%chi419 %%val1381 %%r1388 %%mr1389 %%w1390 %%m?1392) (%%id-var-name352 %%id1380 %%w1390))) %%e1369 %%w1371 %%ae1372))) (%%binding-type196 %%b1383))) (%%lookup216 %%n1382 %%r1370))) (%%id-var-name352 %%id1380 %%w1371))) %%tmp1375) ((lambda (%%_1398) (syntax-error (%%source-wrap362 %%e1369 %%w1371 %%ae1372))) %%tmp1374))) ($syntax-dispatch %%tmp1374 '(any any any)))) %%e1369))) (%%chi-macro423 (lambda (%%p1399 %%e1400 %%r1401 %%w1402 %%ae1403 %%rib1404) (letrec ((%%rebuild-macro-output1405 (lambda (%%x1406 %%m1407) (if (pair? %%x1406) (cons (%%rebuild-macro-output1405 (car %%x1406) %%m1407) (%%rebuild-macro-output1405 (cdr %%x1406) %%m1407)) (if (%%syntax?37 %%x1406) ((lambda (%%w1408) ((lambda (%%ms1409 %%s1410) (%%make-syntax-object36 (%%syntax-expression38 %%x1406) (if (if (pair? %%ms1409) (eq? (car %%ms1409) #f) #f) (%%make-wrap230 (cdr %%ms1409) (cdr %%s1410)) (%%make-wrap230 (cons %%m1407 %%ms1409) (if %%rib1404 (cons %%rib1404 (cons 'shift %%s1410)) (cons 'shift %%s1410)))))) (%%wrap-marks231 %%w1408) (%%wrap-subst232 %%w1408))) (%%syntax-wrap39 %%x1406)) (if (vector? %%x1406) ((lambda (%%n1411) ((lambda (%%v1412) ((lambda () ((letrec ((%%do1413 (lambda (%%i1414) (if (fx= %%i1414 %%n1411) %%v1412 (begin (vector-set! %%v1412 %%i1414 (%%rebuild-macro-output1405 (vector-ref %%x1406 %%i1414) %%m1407)) (%%do1413 (fx+ %%i1414 1))))))) %%do1413) 0)))) (make-vector %%n1411))) (vector-length %%x1406)) (if (symbol? %%x1406) (syntax-error (%%source-wrap362 %%e1400 %%w1402 %%ae1403) "encountered raw symbol " (symbol->string %%x1406) " in output of macro") %%x1406))))))) (%%rebuild-macro-output1405 ((lambda (%%out1415) (if (procedure? %%out1415) (%%out1415 (lambda (%%id1416) (begin (if (not (identifier? %%id1416)) (syntax-error %%id1416 "environment argument is not an identifier") (void)) (%%lookup216 (%%id-var-name352 %%id1416 '(())) %%r1401)))) %%out1415)) (%%p1399 (%%source-wrap362 %%e1400 (%%anti-mark318 %%w1402) %%ae1403))) (string #\m))))) (%%chi-body424 (lambda (%%body1417 %%outer-form1418 %%r1419 %%mr1420 %%w1421 %%m?1422) ((lambda (%%ribcage1423) ((lambda (%%w1424) ((lambda (%%body1425) ((lambda () (call-with-values (lambda () (%%chi-internal425 %%ribcage1423 %%outer-form1418 %%body1425 %%r1419 %%mr1420 %%m?1422)) (lambda (%%r1426 %%mr1427 %%exprs1428 %%ids1429 %%vars1430 %%vals1431 %%inits1432) (begin (if (null? %%exprs1428) (syntax-error %%outer-form1418 "no expressions in body") (void)) (%%build-body152 #f (reverse %%vars1430) (%%chi-frobs416 (reverse %%vals1431) %%r1426 %%mr1427 %%m?1422) (%%build-sequence150 #f (%%chi-frobs416 (append %%inits1432 %%exprs1428) %%r1426 %%mr1427 %%m?1422))))))))) (map (lambda (%%x1433) (%%make-frob397 (%%wrap361 %%x1433 %%w1424) #f)) %%body1417))) (%%make-wrap230 (%%wrap-marks231 %%w1421) (cons %%ribcage1423 (%%wrap-subst232 %%w1421))))) (%%make-ribcage281 '() '() '())))) (%%chi-internal425 (lambda (%%ribcage1434 %%source-exp1435 %%body1436 %%r1437 %%mr1438 %%m?1439) (letrec ((%%return1440 (lambda (%%r1441 %%mr1442 %%exprs1443 %%ids1444 %%vars1445 %%vals1446 %%inits1447) (begin (%%check-defined-ids406 %%source-exp1435 %%ids1444) (values %%r1441 %%mr1442 %%exprs1443 %%ids1444 %%vars1445 %%vals1446 %%inits1447))))) ((letrec ((%%parse1448 (lambda (%%body1449 %%r1450 %%mr1451 %%ids1452 %%vars1453 %%vals1454 %%inits1455 %%meta-seen?1456) (if (null? %%body1449) (%%return1440 %%r1450 %%mr1451 %%body1449 %%ids1452 %%vars1453 %%vals1454 %%inits1455) ((lambda (%%fr1457) ((lambda (%%e1458) ((lambda (%%meta?1459) ((lambda () (call-with-values (lambda () (%%syntax-type364 %%e1458 %%r1450 '(()) #f %%ribcage1434)) (lambda (%%type1460 %%value1461 %%e1462 %%w1463 %%ae1464) ((lambda (%%t1465) (if (memv %%t1465 '(define-form)) (call-with-values (lambda () (%%parse-define431 %%e1462 %%w1463 %%ae1464)) (lambda (%%id1466 %%rhs1467 %%w1468) ((lambda (%%id1469 %%label1470) (if %%meta?1459 ((lambda (%%sym1471) (begin (%%extend-ribcage!328 %%ribcage1434 %%id1469 %%label1470) ((lambda (%%mr1472) (begin (%%define-top-level-value-hook42 %%sym1471 (%%top-level-eval-hook40 (%%chi419 %%rhs1467 %%mr1472 %%mr1472 %%w1468 #t))) (%%parse1448 (cdr %%body1449) %%r1450 %%mr1472 (cons %%id1469 %%ids1452) %%vars1453 %%vals1454 %%inits1455 #f))) (%%extend-env210 %%label1470 (cons 'meta-variable %%sym1471) %%mr1451)))) (($generate-id) ((lambda (%%x1473) ((lambda (%%e1474) (if (annotation? %%e1474) (annotation-expression %%e1474) %%e1474)) (if (%%syntax?37 %%x1473) (%%syntax-expression38 %%x1473) %%x1473))) %%id1469))) ((lambda (%%var1475) (begin (%%extend-ribcage!328 %%ribcage1434 %%id1469 %%label1470) (%%parse1448 (cdr %%body1449) (%%extend-env210 %%label1470 (cons 'lexical %%var1475) %%r1450) %%mr1451 (cons %%id1469 %%ids1452) (cons %%var1475 %%vars1453) (cons (%%make-frob397 (%%wrap361 %%rhs1467 %%w1468) %%meta?1459) %%vals1454) %%inits1455 #f))) (%%gen-var452 %%id1469)))) (%%wrap361 %%id1466 %%w1468) (%%gen-label278)))) (if (memv %%t1465 '(define-syntax-form)) (call-with-values (lambda () (%%parse-define-syntax432 %%e1462 %%w1463 %%ae1464)) (lambda (%%id1476 %%rhs1477 %%w1478) ((lambda (%%id1479 %%label1480 %%exp1481) (begin (%%extend-ribcage!328 %%ribcage1434 %%id1479 %%label1480) ((lambda (%%b1482) (%%parse1448 (cdr %%body1449) (%%extend-env210 %%label1480 %%b1482 %%r1450) (%%extend-env210 %%label1480 %%b1482 %%mr1451) (cons %%id1479 %%ids1452) %%vars1453 %%vals1454 %%inits1455 #f)) (%%defer-or-eval-transformer218 %%local-eval-hook41 %%exp1481)))) (%%wrap361 %%id1476 %%w1478) (%%gen-label278) (%%chi419 %%rhs1477 %%mr1451 %%mr1451 %%w1478 #t)))) (if (memv %%t1465 '($module-form)) ((lambda (%%*ribcage1483) ((lambda (%%*w1484) ((lambda () (call-with-values (lambda () (%%parse-module429 %%e1462 %%w1463 %%ae1464 %%*w1484)) (lambda (%%orig1485 %%id1486 %%exports1487 %%forms1488) (call-with-values (lambda () (%%chi-internal425 %%*ribcage1483 %%orig1485 (map (lambda (%%d1489) (%%make-frob397 %%d1489 %%meta?1459)) %%forms1488) %%r1450 %%mr1451 %%m?1439)) (lambda (%%r1490 %%mr1491 %%*body1492 %%*ids1493 %%*vars1494 %%*vals1495 %%*inits1496) (begin (%%check-module-exports405 %%source-exp1435 (%%flatten-exports368 %%exports1487) %%*ids1493) ((lambda (%%iface1497 %%vars1498 %%vals1499 %%inits1500 %%label1501) (begin (%%extend-ribcage!328 %%ribcage1434 %%id1486 %%label1501) ((lambda (%%b1502) (%%parse1448 (cdr %%body1449) (%%extend-env210 %%label1501 %%b1502 %%r1490) (%%extend-env210 %%label1501 %%b1502 %%mr1491) (cons %%id1486 %%ids1452) %%vars1498 %%vals1499 %%inits1500 #f)) (cons '$module %%iface1497)))) (%%make-resolved-interface379 %%id1486 %%exports1487 #f) (append %%*vars1494 %%vars1453) (append %%*vals1495 %%vals1454) (append %%inits1455 %%*inits1496 %%*body1492) (%%gen-label278)))))))))) (%%make-wrap230 (%%wrap-marks231 %%w1463) (cons %%*ribcage1483 (%%wrap-subst232 %%w1463))))) (%%make-ribcage281 '() '() '())) (if (memv %%t1465 '($import-form)) (call-with-values (lambda () (%%parse-import430 %%e1462 %%w1463 %%ae1464)) (lambda (%%orig1503 %%only?1504 %%mid1505) ((lambda (%%mlabel1506) ((lambda (%%binding1507) ((lambda (%%t1508) (if (memv %%t1508 '($module)) ((lambda (%%iface1509) ((lambda (%%import-iface1510) ((lambda () (begin (if %%only?1504 (%%extend-ribcage-barrier!330 %%ribcage1434 %%mid1505) (void)) (%%do-import!428 %%import-iface1510 %%ribcage1434) (%%parse1448 (cdr %%body1449) %%r1450 %%mr1451 (cons %%import-iface1510 %%ids1452) %%vars1453 %%vals1454 %%inits1455 #f))))) (%%make-import-interface296 %%iface1509 (%%import-mark-delta426 %%mid1505 %%iface1509)))) (%%binding-value197 %%binding1507)) (if (memv %%t1508 '(displaced-lexical)) (%%displaced-lexical-error214 %%mid1505) (syntax-error %%mid1505 "unknown module")))) (%%binding-type196 %%binding1507))) (%%lookup216 %%mlabel1506 %%r1450))) (%%id-var-name352 %%mid1505 '(()))))) (if (memv %%t1465 '(alias-form)) (call-with-values (lambda () (%%parse-alias435 %%e1462 %%w1463 %%ae1464)) (lambda (%%new-id1511 %%old-id1512) ((lambda (%%new-id1513) (begin (%%extend-ribcage!328 %%ribcage1434 %%new-id1513 (%%id-var-name-loc351 %%old-id1512 %%w1463)) (%%parse1448 (cdr %%body1449) %%r1450 %%mr1451 (cons %%new-id1513 %%ids1452) %%vars1453 %%vals1454 %%inits1455 #f))) (%%wrap361 %%new-id1511 %%w1463)))) (if (memv %%t1465 '(begin-form)) (%%parse1448 ((letrec ((%%f1514 (lambda (%%forms1515) (if (null? %%forms1515) (cdr %%body1449) (cons (%%make-frob397 (%%wrap361 (car %%forms1515) %%w1463) %%meta?1459) (%%f1514 (cdr %%forms1515))))))) %%f1514) (%%parse-begin436 %%e1462 %%w1463 %%ae1464 #t)) %%r1450 %%mr1451 %%ids1452 %%vars1453 %%vals1454 %%inits1455 #f) (if (memv %%t1465 '(eval-when-form)) (call-with-values (lambda () (%%parse-eval-when434 %%e1462 %%w1463 %%ae1464)) (lambda (%%when-list1516 %%forms1517) (%%parse1448 (if (memq 'eval %%when-list1516) ((letrec ((%%f1518 (lambda (%%forms1519) (if (null? %%forms1519) (cdr %%body1449) (cons (%%make-frob397 (%%wrap361 (car %%forms1519) %%w1463) %%meta?1459) (%%f1518 (cdr %%forms1519))))))) %%f1518) %%forms1517) (cdr %%body1449)) %%r1450 %%mr1451 %%ids1452 %%vars1453 %%vals1454 %%inits1455 #f))) (if (memv %%t1465 '(meta-form)) (%%parse1448 (cons (%%make-frob397 (%%wrap361 (%%parse-meta433 %%e1462 %%w1463 %%ae1464) %%w1463) #t) (cdr %%body1449)) %%r1450 %%mr1451 %%ids1452 %%vars1453 %%vals1454 %%inits1455 #t) (if (memv %%t1465 '(local-syntax-form)) (call-with-values (lambda () (%%chi-local-syntax446 %%value1461 %%e1462 %%r1450 %%mr1451 %%w1463 %%ae1464)) (lambda (%%forms1520 %%r1521 %%mr1522 %%w1523 %%ae1524) (%%parse1448 ((letrec ((%%f1525 (lambda (%%forms1526) (if (null? %%forms1526) (cdr %%body1449) (cons (%%make-frob397 (%%wrap361 (car %%forms1526) %%w1523) %%meta?1459) (%%f1525 (cdr %%forms1526))))))) %%f1525) %%forms1520) %%r1521 %%mr1522 %%ids1452 %%vars1453 %%vals1454 %%inits1455 #f))) (begin (if %%meta-seen?1456 (syntax-error (%%source-wrap362 %%e1462 %%w1463 %%ae1464) "invalid meta definition") (void)) ((letrec ((%%f1527 (lambda (%%body1528) (if ((lambda (%%t1529) (if %%t1529 %%t1529 (not (%%frob-meta?401 (car %%body1528))))) (null? %%body1528)) (%%return1440 %%r1450 %%mr1451 %%body1528 %%ids1452 %%vars1453 %%vals1454 %%inits1455) (begin (%%top-level-eval-hook40 (%%chi-meta-frob417 (car %%body1528) %%mr1451)) (%%f1527 (cdr %%body1528))))))) %%f1527) (cons (%%make-frob397 (%%source-wrap362 %%e1462 %%w1463 %%ae1464) %%meta?1459) (cdr %%body1449)))))))))))))) %%type1460)))))) (%%frob-meta?401 %%fr1457))) (%%frob-e399 %%fr1457))) (car %%body1449)))))) %%parse1448) %%body1436 %%r1437 %%mr1438 '() '() '() '() #f)))) (%%import-mark-delta426 (lambda (%%mid1530 %%iface1531) (%%diff-marks344 (%%id-marks227 %%mid1530) (%%interface-marks372 %%iface1531)))) (%%lookup-import-label427 (lambda (%%id1532) ((lambda (%%label1533) (begin (if (not %%label1533) (syntax-error %%id1532 "exported identifier not visible") (void)) %%label1533)) (%%id-var-name-loc351 %%id1532 '(()))))) (%%do-import!428 (lambda (%%import-iface1534 %%ribcage1535) ((lambda (%%ie1536) (if (<= (vector-length %%ie1536) 20) ((lambda (%%new-marks1537) (%%vfor-each409 (lambda (%%id1538) (%%import-extend-ribcage!329 %%ribcage1535 %%new-marks1537 %%id1538 (%%lookup-import-label427 %%id1538))) %%ie1536)) (%%import-interface-new-marks300 %%import-iface1534)) (%%extend-ribcage-subst!332 %%ribcage1535 %%import-iface1534))) (%%interface-exports374 (%%import-interface-interface298 %%import-iface1534))))) (%%parse-module429 (lambda (%%e1539 %%w1540 %%ae1541 %%*w1542) (letrec ((%%listify1543 (lambda (%%exports1544) (if (null? %%exports1544) '() (cons ((lambda (%%tmp1545) ((lambda (%%tmp1546) (if %%tmp1546 (apply (lambda (%%ex1547) (%%listify1543 %%ex1547)) %%tmp1546) ((lambda (%%x1549) (if (%%id?221 %%x1549) (%%wrap361 %%x1549 %%*w1542) (syntax-error (%%source-wrap362 %%e1539 %%w1540 %%ae1541) "invalid exports list in"))) %%tmp1545))) ($syntax-dispatch %%tmp1545 'each-any))) (car %%exports1544)) (%%listify1543 (cdr %%exports1544))))))) ((lambda (%%tmp1550) ((lambda (%%tmp1551) (if (if %%tmp1551 (apply (lambda (%%_1552 %%orig1553 %%mid1554 %%ex1555 %%form1556) (%%id?221 %%mid1554)) %%tmp1551) #f) (apply (lambda (%%_1557 %%orig1558 %%mid1559 %%ex1560 %%form1561) (values %%orig1558 (%%wrap361 %%mid1559 %%w1540) (%%listify1543 %%ex1560) (map (lambda (%%x1563) (%%wrap361 %%x1563 %%*w1542)) %%form1561))) %%tmp1551) ((lambda (%%_1565) (syntax-error (%%source-wrap362 %%e1539 %%w1540 %%ae1541))) %%tmp1550))) ($syntax-dispatch %%tmp1550 '(any any any each-any . each-any)))) %%e1539)))) (%%parse-import430 (lambda (%%e1566 %%w1567 %%ae1568) ((lambda (%%tmp1569) ((lambda (%%tmp1570) (if (if %%tmp1570 (apply (lambda (%%_1571 %%orig1572 %%mid1573) (%%id?221 %%mid1573)) %%tmp1570) #f) (apply (lambda (%%_1574 %%orig1575 %%mid1576) (values %%orig1575 #t (%%wrap361 %%mid1576 %%w1567))) %%tmp1570) ((lambda (%%tmp1577) (if (if %%tmp1577 (apply (lambda (%%_1578 %%orig1579 %%mid1580) (%%id?221 %%mid1580)) %%tmp1577) #f) (apply (lambda (%%_1581 %%orig1582 %%mid1583) (values %%orig1582 #f (%%wrap361 %%mid1583 %%w1567))) %%tmp1577) ((lambda (%%_1584) (syntax-error (%%source-wrap362 %%e1566 %%w1567 %%ae1568))) %%tmp1569))) ($syntax-dispatch %%tmp1569 '(any any #(atom #f) any))))) ($syntax-dispatch %%tmp1569 '(any any #(atom #t) any)))) %%e1566))) (%%parse-define431 (lambda (%%e1585 %%w1586 %%ae1587) ((lambda (%%tmp1588) ((lambda (%%tmp1589) (if (if %%tmp1589 (apply (lambda (%%_1590 %%name1591 %%val1592) (%%id?221 %%name1591)) %%tmp1589) #f) (apply (lambda (%%_1593 %%name1594 %%val1595) (values %%name1594 %%val1595 %%w1586)) %%tmp1589) ((lambda (%%tmp1596) (if (if %%tmp1596 (apply (lambda (%%_1597 %%name1598 %%args1599 %%e11600 %%e21601) (%%id?221 %%name1598)) %%tmp1596) #f) (apply (lambda (%%_1602 %%name1603 %%args1604 %%e11605 %%e21606) (values (%%wrap361 %%name1603 %%w1586) (cons '#structure(#4# #(#5# lambda #6# 1903368) (#7# #structure(#9# #(_ name args e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #13=(#structure(#9# () () ()) #structure(#9# #(e w ae) #(#7# #7# #7#) #("i" "i" "i")) #10# . #12#))) (%%wrap361 (cons %%args1604 (cons %%e11605 %%e21606)) %%w1586)) '(()))) %%tmp1596) ((lambda (%%tmp1608) (if (if %%tmp1608 (apply (lambda (%%_1609 %%name1610) (%%id?221 %%name1610)) %%tmp1608) #f) (apply (lambda (%%_1611 %%name1612) (values (%%wrap361 %%name1612 %%w1586) '#structure(#4# #(#5# (#(#5# void #6# 3083020)) #6# 3017484) (#7# #structure(#9# #(_ name) #(#7# #7#) #("i" "i")) . #13#)) '(()))) %%tmp1608) ((lambda (%%_1613) (syntax-error (%%source-wrap362 %%e1585 %%w1586 %%ae1587))) %%tmp1588))) ($syntax-dispatch %%tmp1588 '(any any))))) ($syntax-dispatch %%tmp1588 '(any (any . any) any . each-any))))) ($syntax-dispatch %%tmp1588 '(any any any)))) %%e1585))) (%%parse-define-syntax432 (lambda (%%e1614 %%w1615 %%ae1616) ((lambda (%%tmp1617) ((lambda (%%tmp1618) (if (if %%tmp1618 (apply (lambda (%%_1619 %%name1620 %%id1621 %%e11622 %%e21623) (if (%%id?221 %%name1620) (%%id?221 %%id1621) #f)) %%tmp1618) #f) (apply (lambda (%%_1624 %%name1625 %%id1626 %%e11627 %%e21628) (values (%%wrap361 %%name1625 %%w1615) (cons '#structure(#4# #(#5# lambda #6# 1706773) (#7# #structure(#9# #(_ name id e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(e w ae) #(#7# #7# #7#) #("i" "i" "i")) #10# . #12#)) (cons (%%wrap361 (list %%id1626) %%w1615) (%%wrap361 (cons %%e11627 %%e21628) %%w1615))) '(()))) %%tmp1618) ((lambda (%%tmp1630) (if (if %%tmp1630 (apply (lambda (%%_1631 %%name1632 %%val1633) (%%id?221 %%name1632)) %%tmp1630) #f) (apply (lambda (%%_1634 %%name1635 %%val1636) (values %%name1635 %%val1636 %%w1615)) %%tmp1630) ((lambda (%%_1637) (syntax-error (%%source-wrap362 %%e1614 %%w1615 %%ae1616))) %%tmp1617))) ($syntax-dispatch %%tmp1617 '(any any any))))) ($syntax-dispatch %%tmp1617 '(any (any any) any . each-any)))) %%e1614))) (%%parse-meta433 (lambda (%%e1638 %%w1639 %%ae1640) ((lambda (%%tmp1641) ((lambda (%%tmp1642) (if %%tmp1642 (apply (lambda (%%_1643 %%form1644) %%form1644) %%tmp1642) ((lambda (%%_1645) (syntax-error (%%source-wrap362 %%e1638 %%w1639 %%ae1640))) %%tmp1641))) ($syntax-dispatch %%tmp1641 '(any . any)))) %%e1638))) (%%parse-eval-when434 (lambda (%%e1646 %%w1647 %%ae1648) ((lambda (%%tmp1649) ((lambda (%%tmp1650) (if %%tmp1650 (apply (lambda (%%_1651 %%x1652 %%e11653 %%e21654) (values (%%chi-when-list363 %%x1652 %%w1647) (cons %%e11653 %%e21654))) %%tmp1650) ((lambda (%%_1657) (syntax-error (%%source-wrap362 %%e1646 %%w1647 %%ae1648))) %%tmp1649))) ($syntax-dispatch %%tmp1649 '(any each-any any . each-any)))) %%e1646))) (%%parse-alias435 (lambda (%%e1658 %%w1659 %%ae1660) ((lambda (%%tmp1661) ((lambda (%%tmp1662) (if (if %%tmp1662 (apply (lambda (%%_1663 %%new-id1664 %%old-id1665) (if (%%id?221 %%new-id1664) (%%id?221 %%old-id1665) #f)) %%tmp1662) #f) (apply (lambda (%%_1666 %%new-id1667 %%old-id1668) (values %%new-id1667 %%old-id1668)) %%tmp1662) ((lambda (%%_1669) (syntax-error (%%source-wrap362 %%e1658 %%w1659 %%ae1660))) %%tmp1661))) ($syntax-dispatch %%tmp1661 '(any any any)))) %%e1658))) (%%parse-begin436 (lambda (%%e1670 %%w1671 %%ae1672 %%empty-okay?1673) ((lambda (%%tmp1674) ((lambda (%%tmp1675) (if (if %%tmp1675 (apply (lambda (%%_1676) %%empty-okay?1673) %%tmp1675) #f) (apply (lambda (%%_1677) '()) %%tmp1675) ((lambda (%%tmp1678) (if %%tmp1678 (apply (lambda (%%_1679 %%e11680 %%e21681) (cons %%e11680 %%e21681)) %%tmp1678) ((lambda (%%_1683) (syntax-error (%%source-wrap362 %%e1670 %%w1671 %%ae1672))) %%tmp1674))) ($syntax-dispatch %%tmp1674 '(any any . each-any))))) ($syntax-dispatch %%tmp1674 '(any)))) %%e1670))) (%%chi-lambda-clause445 (lambda (%%e1684 %%c1685 %%r1686 %%mr1687 %%w1688 %%m?1689) (letrec ((%%reverse*1690 (lambda (%%l1693) ((letrec ((%%f1694 (lambda (%%ls11695 %%ls21696) (if (null? %%ls11695) %%ls21696 (%%f1694 (cdr %%ls11695) (cons (car %%ls11695) %%ls21696)))))) %%f1694) (cdr %%l1693) (car %%l1693)))) (%%ids/emitter1691 (lambda (%%formals1697 %%ids1698 %%emitter1699 %%ae1700 %%template1701) (begin (if (if (pair? (syntax-case-debug)) (memq 'dsssl (syntax-case-debug)) #f) (pp (vector 'ids/emitter %%ids1698 'template %%template1701)) (void)) (if (null? %%ids1698) (values (reverse %%formals1697) %%emitter1699) (if (%%syntax?37 (car %%ids1698)) (%%ids/emitter1691 %%formals1697 (cons (syntax->datum (car %%ids1698)) (cdr %%ids1698)) %%emitter1699 %%ae1700 (car %%ids1698)) (if (annotation? (car %%ids1698)) (%%ids/emitter1691 %%formals1697 (cons ((lambda (%%e1702) (if (annotation? %%e1702) (annotation-expression %%e1702) %%e1702)) (car %%ids1698)) (cdr %%ids1698)) %%emitter1699 (car %%ids1698) %%template1701) (if (eq? (car %%ids1698) #!key) (%%ids/emitter1691 %%formals1697 (cdr %%ids1698) 'keyword %%ae1700 #f) (if (memq (car %%ids1698) '(#!optional #!rest)) (%%ids/emitter1691 %%formals1697 (cdr %%ids1698) ((lambda (%%t1703) (if %%t1703 %%t1703 %%emitter1699)) (if (eq? %%emitter1699 'rnrs) 'optional/rest #f)) %%ae1700 #f) (if (pair? (car %%ids1698)) (%%ids/emitter1691 %%formals1697 (cons (car (car %%ids1698)) (cdr %%ids1698)) %%emitter1699 %%ae1700 (if %%template1701 (%%make-syntax-object36 (car ((lambda (%%e1704) (if (annotation? %%e1704) (annotation-expression %%e1704) %%e1704)) (%%syntax-expression38 %%template1701))) (%%syntax-wrap39 %%template1701)) #f)) (%%ids/emitter1691 (cons (if %%template1701 (datum->syntax %%template1701 (car %%ids1698)) (if %%ae1700 (build-source %%ae1700 (car %%ids1698)) (build-source #f (car %%ids1698)))) %%formals1697) (cdr %%ids1698) %%emitter1699 %%ae1700 #f)))))))))) (%%emit-formals1692 (lambda (%%formals*1705 %%formals1706 %%vars1707 %%emitter1708 %%ae1709 %%template1710) (letrec ((%%formal1711 (lambda () ((lambda (%%t1712) (if (memv %%t1712 '(optional/rest)) %%vars1707 (if (memv %%t1712 '(rnrs keyword)) %%formals1706 (void)))) %%emitter1708)))) (if (null? %%formals1706) (reverse %%formals*1705) (if (%%syntax?37 %%formals1706) (%%emit-formals1692 %%formals*1705 (syntax->datum %%formals1706) %%vars1707 %%emitter1708 %%ae1709 %%formals1706) (if (%%id?221 %%formals1706) (%%reverse*1690 (cons (%%formal1711) %%formals*1705)) (if (annotation? %%formals1706) (%%emit-formals1692 %%formals*1705 ((lambda (%%e1713) (if (annotation? %%e1713) (annotation-expression %%e1713) %%e1713)) %%formals1706) %%vars1707 %%emitter1708 %%ae1709 %%template1710) (if (annotation? (car %%formals1706)) (%%emit-formals1692 %%formals*1705 (cons ((lambda (%%e1714) (if (annotation? %%e1714) (annotation-expression %%e1714) %%e1714)) (car %%formals1706)) (cdr %%formals1706)) %%vars1707 %%emitter1708 (car %%formals1706) %%template1710) (if (%%syntax?37 (car %%formals1706)) (%%emit-formals1692 %%formals*1705 (cons (syntax->datum (car %%formals1706)) (cdr %%formals1706)) %%vars1707 %%emitter1708 %%ae1709 (car %%formals1706)) (if (memq (car %%formals1706) '(#!optional #!rest #!key)) (%%emit-formals1692 (cons (build-source %%ae1709 (car %%formals1706)) %%formals*1705) (cdr %%formals1706) %%vars1707 %%emitter1708 %%ae1709 %%template1710) (if (pair? (car %%formals1706)) (%%emit-formals1692 (cons (cons (car ((lambda (%%t1715) (if (memv %%t1715 '(keyword)) (car (%%formal1711)) (if (memv %%t1715 '(optional/rest)) (%%formal1711) (void)))) %%emitter1708)) ((lambda (%%e1716) (if (annotation? %%e1716) (annotation-expression %%e1716) %%e1716)) (%%chi419 (cdr (car %%formals1706)) %%r1686 %%mr1687 %%w1688 %%m?1689))) %%formals*1705) (cdr %%formals1706) (cdr %%vars1707) %%emitter1708 %%ae1709 %%template1710) (if (%%id?221 (car %%formals1706)) (%%emit-formals1692 (cons (car (%%formal1711)) %%formals*1705) (cdr (syntax->datum %%formals1706)) (cdr %%vars1707) %%emitter1708 %%ae1709 %%template1710) (error (list 'unexpected-formal (car %%formals1706)))))))))))))))) ((lambda (%%tmp1717) ((lambda (%%tmp1718) (if %%tmp1718 (apply (lambda (%%id1719 %%e11720 %%e21721) ((lambda (%%formals1722) (call-with-values (lambda () (%%ids/emitter1691 '() %%formals1722 'rnrs #f #f)) (lambda (%%ids1723 %%emitter1724) (begin (if (if (pair? (syntax-case-debug)) (memq 'dsssl (syntax-case-debug)) #f) (pp (vector 'formals %%formals1722 'ids %%ids1723)) (void)) (if (not (%%valid-bound-ids?357 %%ids1723)) (syntax-error %%e1684 "invalid parameter list in") ((lambda (%%labels1725 %%new-vars1726) (begin (if (if (pair? (syntax-case-debug)) (memq 'dsssl (syntax-case-debug)) #f) (pp (vector 'labels %%labels1725 'new-vars %%new-vars1726 'bw %%w1688 (%%make-binding-wrap335 %%ids1723 %%labels1725 %%w1688))) (void)) (values %%emitter1724 (if (eq? %%emitter1724 'keyword) (%%gen-var452 'dsssl-args) #f) (build-source %%formals1722 %%new-vars1726) (%%emit-formals1692 '() %%formals1722 %%new-vars1726 %%emitter1724 #f #f) (map syntax->datum %%ids1723) (%%chi-body424 (cons %%e11720 %%e21721) %%e1684 (%%extend-var-env*212 %%labels1725 %%new-vars1726 %%r1686) %%mr1687 (%%make-binding-wrap335 %%ids1723 %%labels1725 %%w1688) %%m?1689)))) (%%gen-labels280 %%ids1723) (map (lambda (%%id1728) (build-source %%id1728 (%%gen-var452 %%id1728))) %%ids1723))))))) %%id1719)) %%tmp1718) ((lambda (%%tmp1730) (if %%tmp1730 (apply (lambda (%%ids1731 %%e11732 %%e21733) ((lambda (%%formals1734) (call-with-values (lambda () (%%ids/emitter1691 '() (%%lambda-var-list453 %%formals1734) 'rnrs #f #f)) (lambda (%%old-ids1735 %%emitter1736) (if (not (%%valid-bound-ids?357 %%old-ids1735)) (syntax-error %%e1684 "invalid parameter list in") ((lambda (%%labels1737 %%new-vars1738) (values %%emitter1736 (if (eq? %%emitter1736 'keyword) (%%gen-var452 'dsssl-args) #f) ((lambda (%%vars1739) (if ((lambda (%%t1740) (if %%t1740 %%t1740 (null? %%vars1739))) (pair? %%vars1739)) (build-source %%old-ids1735 %%vars1739) %%vars1739)) (if (eq? %%emitter1736 'rnrs) (%%reverse*1690 %%new-vars1738) (reverse %%new-vars1738))) (%%emit-formals1692 '() %%formals1734 (%%reverse*1690 %%new-vars1738) %%emitter1736 #f #f) (reverse (map syntax->datum %%old-ids1735)) (%%chi-body424 (cons %%e11732 %%e21733) %%e1684 (%%extend-var-env*212 %%labels1737 %%new-vars1738 %%r1686) %%mr1687 (%%make-binding-wrap335 %%old-ids1735 %%labels1737 %%w1688) %%m?1689))) (%%gen-labels280 %%old-ids1735) (map (lambda (%%id1742) (build-source %%id1742 (%%gen-var452 %%id1742))) %%old-ids1735)))))) %%ids1731)) %%tmp1730) ((lambda (%%_1743) (syntax-error %%e1684)) %%tmp1717))) ($syntax-dispatch %%tmp1717 '(any any . each-any))))) ($syntax-dispatch %%tmp1717 '(each-any any . each-any)))) %%c1685)))) (%%chi-local-syntax446 (lambda (%%rec?1744 %%e1745 %%r1746 %%mr1747 %%w1748 %%ae1749) ((lambda (%%tmp1750) ((lambda (%%tmp1751) (if %%tmp1751 (apply (lambda (%%_1752 %%id1753 %%val1754 %%e11755 %%e21756) ((lambda (%%ids1757) (if (not (%%valid-bound-ids?357 %%ids1757)) (%%invalid-ids-error359 (map (lambda (%%x1758) (%%wrap361 %%x1758 %%w1748)) %%ids1757) (%%source-wrap362 %%e1745 %%w1748 %%ae1749) "keyword") ((lambda (%%labels1759) ((lambda (%%new-w1760) ((lambda (%%b*1761) (values (cons %%e11755 %%e21756) (%%extend-env*211 %%labels1759 %%b*1761 %%r1746) (%%extend-env*211 %%labels1759 %%b*1761 %%mr1747) %%new-w1760 %%ae1749)) ((lambda (%%w1763) (map (lambda (%%x1764) (%%defer-or-eval-transformer218 %%local-eval-hook41 (%%chi419 %%x1764 %%mr1747 %%mr1747 %%w1763 #t))) %%val1754)) (if %%rec?1744 %%new-w1760 %%w1748)))) (%%make-binding-wrap335 %%ids1757 %%labels1759 %%w1748))) (%%gen-labels280 %%ids1757)))) %%id1753)) %%tmp1751) ((lambda (%%_1767) (syntax-error (%%source-wrap362 %%e1745 %%w1748 %%ae1749))) %%tmp1750))) ($syntax-dispatch %%tmp1750 '(any #(each (any any)) any . each-any)))) %%e1745))) (%%chi-void447 (lambda () (build-source #f (cons 'void '())))) (%%ellipsis?448 (lambda (%%x1768) (if (%%nonsymbol-id?220 %%x1768) (%%literal-id=?354 %%x1768 '#structure(#4# #(#5# ... #6# 2493405) (#7# #structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) #f))) (%%strip-annotation449 (lambda (%%x1769) (if (pair? %%x1769) (cons (%%strip-annotation449 (car %%x1769)) (%%strip-annotation449 (cdr %%x1769))) (if (annotation? %%x1769) (annotation-stripped %%x1769) %%x1769)))) (%%strip*450 (lambda (%%x1770 %%w1771 %%fn1772) (if (memq 'top (%%wrap-marks231 %%w1771)) (%%fn1772 %%x1770) ((letrec ((%%f1773 (lambda (%%x1774) (if (%%syntax?37 %%x1774) (%%strip*450 (%%syntax-expression38 %%x1774) (%%syntax-wrap39 %%x1774) %%fn1772) (if (pair? %%x1774) ((lambda (%%a1775 %%d1776) (if (if (eq? %%a1775 (car %%x1774)) (eq? %%d1776 (cdr %%x1774)) #f) %%x1774 (cons %%a1775 %%d1776))) (%%f1773 (car %%x1774)) (%%f1773 (cdr %%x1774))) (if (vector? %%x1774) ((lambda (%%old1777) ((lambda (%%new1778) (if (andmap eq? %%old1777 %%new1778) %%x1774 (list->vector %%new1778))) (map %%f1773 %%old1777))) (vector->list %%x1774)) %%x1774)))))) %%f1773) %%x1770)))) (%%strip451 (lambda (%%x1779 %%w1780) (%%strip*450 %%x1779 %%w1780 (lambda (%%x1781) (if ((lambda (%%t1782) (if %%t1782 %%t1782 (if (pair? %%x1781) (annotation? (car %%x1781)) #f))) (annotation? %%x1781)) (%%strip-annotation449 %%x1781) %%x1781))))) (%%gen-var452 (lambda (%%id1783) ((lambda (%%id1784) (if (annotation? %%id1784) (gensym (annotation-expression %%id1784)) (gensym %%id1784))) (if (%%syntax?37 %%id1783) (%%syntax-expression38 %%id1783) %%id1783)))) (%%lambda-var-list453 (lambda (%%vars1785) ((letrec ((%%lvl1786 (lambda (%%vars1787 %%ls1788 %%w1789) (if (pair? %%vars1787) (%%lvl1786 (cdr %%vars1787) (cons (%%wrap361 (car %%vars1787) %%w1789) %%ls1788) %%w1789) (if (%%id?221 %%vars1787) (cons (%%wrap361 %%vars1787 %%w1789) %%ls1788) (if (null? %%vars1787) %%ls1788 (if (%%syntax?37 %%vars1787) (%%lvl1786 (%%syntax-expression38 %%vars1787) %%ls1788 (%%join-wraps340 %%w1789 (%%syntax-wrap39 %%vars1787))) (if (annotation? %%vars1787) (%%lvl1786 (annotation-expression %%vars1787) %%ls1788 %%w1789) (cons %%vars1787 %%ls1788))))))))) %%lvl1786) %%vars1785 '() '(()))))) (begin (set! $load-module (lambda (%%mid1790 %%ctem1791 %%rtem1792) 'not-found)) (set! $update-module (lambda (%%mid1793 %%ctem1794 %%rtem1795) (void))) (set! $include-file-hook (lambda (%%filename1796) (void))) (set! $sc-put-cte (make-parameter (lambda (%%id1797 %%b1798 %%top-token1799) (letrec ((%%sc-put-module1800 (lambda (%%exports1802 %%token1803 %%new-marks1804) (%%vfor-each409 (lambda (%%id1805) (%%store-import-binding334 %%id1805 %%token1803 %%new-marks1804)) %%exports1802))) (%%put-cte1801 (lambda (%%id1806 %%binding1807 %%token1808) ((lambda (%%sym1809) (begin (%%store-import-binding334 %%id1806 %%token1808 '()) (%%put-global-definition-hook45 %%sym1809 (if (if (eq? (%%binding-type196 %%binding1807) 'global) (eq? (%%binding-value197 %%binding1807) %%sym1809) #f) #f %%binding1807)))) (if (symbol? %%id1806) %%id1806 (%%id-var-name352 %%id1806 '(()))))))) ((lambda (%%binding1810) ((lambda (%%t1811) (if (memv %%t1811 '($module)) (begin ((lambda (%%iface1812) (%%sc-put-module1800 (%%interface-exports374 %%iface1812) (%%interface-token376 %%iface1812) '())) (%%binding-value197 %%binding1810)) (%%put-cte1801 %%id1797 %%binding1810 %%top-token1799)) (if (memv %%t1811 '(do-alias)) (%%store-import-binding334 %%id1797 %%top-token1799 '()) (if (memv %%t1811 '(do-import)) ((lambda (%%token1813) ((lambda (%%b1814) ((lambda (%%t1815) (if (memv %%t1815 '($module)) ((lambda (%%iface1816) ((lambda (%%exports1817) ((lambda () (begin (if (not (eq? (%%interface-token376 %%iface1816) %%token1813)) (syntax-error %%id1797 "import mismatch for module") (void)) (%%sc-put-module1800 (%%interface-exports374 %%iface1816) %%top-token1799 (%%import-mark-delta426 %%id1797 %%iface1816)))))) (%%interface-exports374 %%iface1816))) (%%binding-value197 %%b1814)) (syntax-error %%id1797 "unknown module"))) (%%binding-type196 %%b1814))) (%%lookup216 (%%id-var-name352 %%id1797 '(())) '()))) (%%binding-value197 %%b1798)) (%%put-cte1801 %%id1797 %%binding1810 %%top-token1799))))) (%%binding-type196 %%binding1810))) (%%make-transformer-binding217 %%b1798)))))) (%%global-extend219 'core 'c-define-type (lambda (%%e1818 %%r1819 %%mr1820 %%w1821 %%ae1822 %%m?1823) (attach-source %%ae1822 (%%strip451 %%e1818 %%w1821)))) (%%global-extend219 'core 'c-declare (lambda (%%e1824 %%r1825 %%mr1826 %%w1827 %%ae1828 %%m?1829) (attach-source %%ae1828 (%%strip451 %%e1824 %%w1827)))) (%%global-extend219 'core 'c-initialize (lambda (%%e1830 %%r1831 %%mr1832 %%w1833 %%ae1834 %%m?1835) (attach-source %%ae1834 (%%strip451 %%e1830 %%w1833)))) (%%global-extend219 'core 'c-lambda (lambda (%%e1836 %%r1837 %%mr1838 %%w1839 %%ae1840 %%m?1841) (attach-source %%ae1840 (%%strip451 %%e1836 %%w1839)))) (%%global-extend219 'core 'c-define (lambda (%%e1842 %%r1843 %%mr1844 %%w1845 %%ae1846 %%m?1847) (attach-source %%ae1846 (%%strip451 %%e1842 %%w1845)))) (%%global-extend219 'core 'declare (lambda (%%e1848 %%r1849 %%mr1850 %%w1851 %%ae1852 %%m?1853) (attach-source %%ae1852 (%%strip451 %%e1848 %%w1851)))) (%%global-extend219 'local-syntax 'letrec-syntax #t) (%%global-extend219 'local-syntax 'let-syntax #f) (%%global-extend219 'core 'fluid-let-syntax (lambda (%%e1854 %%r1855 %%mr1856 %%w1857 %%ae1858 %%m?1859) ((lambda (%%tmp1860) ((lambda (%%tmp1861) (if (if %%tmp1861 (apply (lambda (%%_1862 %%var1863 %%val1864 %%e11865 %%e21866) (%%valid-bound-ids?357 %%var1863)) %%tmp1861) #f) (apply (lambda (%%_1868 %%var1869 %%val1870 %%e11871 %%e21872) ((lambda (%%names1873) (begin (for-each (lambda (%%id1874 %%n1875) ((lambda (%%t1876) (if (memv %%t1876 '(displaced-lexical)) (%%displaced-lexical-error214 (%%wrap361 %%id1874 %%w1857)) (void))) (%%binding-type196 (%%lookup216 %%n1875 %%r1855)))) %%var1869 %%names1873) ((lambda (%%b*1878) (%%chi-body424 (cons %%e11871 %%e21872) (%%source-wrap362 %%e1854 %%w1857 %%ae1858) (%%extend-env*211 %%names1873 %%b*1878 %%r1855) (%%extend-env*211 %%names1873 %%b*1878 %%mr1856) %%w1857 %%m?1859)) (map (lambda (%%x1880) (%%defer-or-eval-transformer218 %%local-eval-hook41 (%%chi419 %%x1880 %%mr1856 %%mr1856 %%w1857 #t))) %%val1870)))) (map (lambda (%%x1882) (%%id-var-name352 %%x1882 %%w1857)) %%var1869))) %%tmp1861) ((lambda (%%_1884) (syntax-error (%%source-wrap362 %%e1854 %%w1857 %%ae1858))) %%tmp1860))) ($syntax-dispatch %%tmp1860 '(any #(each (any any)) any . each-any)))) %%e1854))) (%%global-extend219 'core 'quote (lambda (%%e1885 %%r1886 %%mr1887 %%w1888 %%ae1889 %%m?1890) ((lambda (%%tmp1891) ((lambda (%%tmp1892) (if %%tmp1892 (apply (lambda (%%_1893 %%e1894) ((lambda (%%x1895) (if (self-eval? (%%strip451 %%e1894 %%w1888)) %%x1895 (build-source %%ae1889 (list (build-source %%ae1889 'quote) %%x1895)))) (attach-source %%ae1889 (%%strip451 %%e1894 %%w1888)))) %%tmp1892) ((lambda (%%_1896) (syntax-error (%%source-wrap362 %%e1885 %%w1888 %%ae1889))) %%tmp1891))) ($syntax-dispatch %%tmp1891 '(any any)))) %%e1885))) (%%global-extend219 'core 'syntax ((lambda () (letrec ((%%gen-syntax1897 (lambda (%%src1905 %%e1906 %%r1907 %%maps1908 %%ellipsis?1909 %%vec?1910) (if (%%id?221 %%e1906) ((lambda (%%label1911) ((lambda (%%b1912) (if (eq? (%%binding-type196 %%b1912) 'syntax) (call-with-values (lambda () ((lambda (%%var.lev1913) (%%gen-ref1898 %%src1905 (car %%var.lev1913) (cdr %%var.lev1913) %%maps1908)) (%%binding-value197 %%b1912))) (lambda (%%var1914 %%maps1915) (values (list 'ref %%var1914) %%maps1915))) (if (%%ellipsis?1909 %%e1906) (syntax-error %%src1905 "misplaced ellipsis in syntax form") (values (list 'quote %%e1906) %%maps1908)))) (%%lookup216 %%label1911 %%r1907))) (%%id-var-name352 %%e1906 '(()))) ((lambda (%%tmp1916) ((lambda (%%tmp1917) (if (if %%tmp1917 (apply (lambda (%%dots1918 %%e1919) (%%ellipsis?1909 %%dots1918)) %%tmp1917) #f) (apply (lambda (%%dots1920 %%e1921) (if %%vec?1910 (syntax-error %%src1905 "misplaced ellipsis in syntax template") (%%gen-syntax1897 %%src1905 %%e1921 %%r1907 %%maps1908 (lambda (%%x1922) #f) #f))) %%tmp1917) ((lambda (%%tmp1923) (if (if %%tmp1923 (apply (lambda (%%x1924 %%dots1925 %%y1926) (%%ellipsis?1909 %%dots1925)) %%tmp1923) #f) (apply (lambda (%%x1927 %%dots1928 %%y1929) ((letrec ((%%f1930 (lambda (%%y1931 %%k1932) ((lambda (%%tmp1933) ((lambda (%%tmp1934) (if (if %%tmp1934 (apply (lambda (%%dots1935 %%y1936) (%%ellipsis?1909 %%dots1935)) %%tmp1934) #f) (apply (lambda (%%dots1937 %%y1938) (%%f1930 %%y1938 (lambda (%%maps1939) (call-with-values (lambda () (%%k1932 (cons '() %%maps1939))) (lambda (%%x1940 %%maps1941) (if (null? (car %%maps1941)) (syntax-error %%src1905 "extra ellipsis in syntax form") (values (%%gen-mappend1900 %%x1940 (car %%maps1941)) (cdr %%maps1941)))))))) %%tmp1934) ((lambda (%%_1942) (call-with-values (lambda () (%%gen-syntax1897 %%src1905 %%y1931 %%r1907 %%maps1908 %%ellipsis?1909 %%vec?1910)) (lambda (%%y1943 %%maps1944) (call-with-values (lambda () (%%k1932 %%maps1944)) (lambda (%%x1945 %%maps1946) (values (%%gen-append1899 %%x1945 %%y1943) %%maps1946)))))) %%tmp1933))) ($syntax-dispatch %%tmp1933 '(any . any)))) %%y1931)))) %%f1930) %%y1929 (lambda (%%maps1947) (call-with-values (lambda () (%%gen-syntax1897 %%src1905 %%x1927 %%r1907 (cons '() %%maps1947) %%ellipsis?1909 #f)) (lambda (%%x1948 %%maps1949) (if (null? (car %%maps1949)) (syntax-error %%src1905 "extra ellipsis in syntax form") (values (%%gen-map1901 %%x1948 (car %%maps1949)) (cdr %%maps1949)))))))) %%tmp1923) ((lambda (%%tmp1950) (if %%tmp1950 (apply (lambda (%%x1951 %%y1952) (call-with-values (lambda () (%%gen-syntax1897 %%src1905 %%x1951 %%r1907 %%maps1908 %%ellipsis?1909 #f)) (lambda (%%xnew1953 %%maps1954) (call-with-values (lambda () (%%gen-syntax1897 %%src1905 %%y1952 %%r1907 %%maps1954 %%ellipsis?1909 %%vec?1910)) (lambda (%%ynew1955 %%maps1956) (values (%%gen-cons1902 %%e1906 %%x1951 %%y1952 %%xnew1953 %%ynew1955) %%maps1956)))))) %%tmp1950) ((lambda (%%tmp1957) (if %%tmp1957 (apply (lambda (%%x11958 %%x21959) ((lambda (%%ls1960) (call-with-values (lambda () (%%gen-syntax1897 %%src1905 %%ls1960 %%r1907 %%maps1908 %%ellipsis?1909 #t)) (lambda (%%lsnew1961 %%maps1962) (values (%%gen-vector1903 %%e1906 %%ls1960 %%lsnew1961) %%maps1962)))) (cons %%x11958 %%x21959))) %%tmp1957) ((lambda (%%_1964) (values (list 'quote %%e1906) %%maps1908)) %%tmp1916))) ($syntax-dispatch %%tmp1916 '#(vector (any . each-any)))))) ($syntax-dispatch %%tmp1916 '(any . any))))) ($syntax-dispatch %%tmp1916 '(any any . any))))) ($syntax-dispatch %%tmp1916 '(any any)))) %%e1906)))) (%%gen-ref1898 (lambda (%%src1965 %%var1966 %%level1967 %%maps1968) (if (fx= %%level1967 0) (values %%var1966 %%maps1968) (if (null? %%maps1968) (syntax-error %%src1965 "missing ellipsis in syntax form") (call-with-values (lambda () (%%gen-ref1898 %%src1965 %%var1966 (fx- %%level1967 1) (cdr %%maps1968))) (lambda (%%outer-var1969 %%outer-maps1970) ((lambda (%%b1971) (if %%b1971 (values (cdr %%b1971) %%maps1968) ((lambda (%%inner-var1972) (values %%inner-var1972 (cons (cons (cons %%outer-var1969 %%inner-var1972) (car %%maps1968)) %%outer-maps1970))) (%%gen-var452 'tmp)))) (assq %%outer-var1969 (car %%maps1968))))))))) (%%gen-append1899 (lambda (%%x1973 %%y1974) (if (equal? %%y1974 ''()) %%x1973 (list 'append %%x1973 %%y1974)))) (%%gen-mappend1900 (lambda (%%e1975 %%map-env1976) (list 'apply '(primitive append) (%%gen-map1901 %%e1975 %%map-env1976)))) (%%gen-map1901 (lambda (%%e1977 %%map-env1978) ((lambda (%%formals1979 %%actuals1980) (if (eq? (car %%e1977) 'ref) (car %%actuals1980) (if (andmap (lambda (%%x1981) (if (eq? (car %%x1981) 'ref) (memq (cadr %%x1981) %%formals1979) #f)) (cdr %%e1977)) (cons 'map (cons (list 'primitive (car %%e1977)) (map ((lambda (%%r1982) (lambda (%%x1983) (cdr (assq (cadr %%x1983) %%r1982)))) (map cons %%formals1979 %%actuals1980)) (cdr %%e1977)))) (cons 'map (cons (list 'lambda %%formals1979 %%e1977) %%actuals1980))))) (map cdr %%map-env1978) (map (lambda (%%x1984) (list 'ref (car %%x1984))) %%map-env1978)))) (%%gen-cons1902 (lambda (%%e1985 %%x1986 %%y1987 %%xnew1988 %%ynew1989) ((lambda (%%t1990) (if (memv %%t1990 '(quote)) (if (eq? (car %%xnew1988) 'quote) ((lambda (%%xnew1991 %%ynew1992) (if (if (eq? %%xnew1991 %%x1986) (eq? %%ynew1992 %%y1987) #f) (list 'quote %%e1985) (list 'quote (cons %%xnew1991 %%ynew1992)))) (cadr %%xnew1988) (cadr %%ynew1989)) (if (eq? (cadr %%ynew1989) '()) (list 'list %%xnew1988) (list 'cons %%xnew1988 %%ynew1989))) (if (memv %%t1990 '(list)) (cons 'list (cons %%xnew1988 (cdr %%ynew1989))) (list 'cons %%xnew1988 %%ynew1989)))) (car %%ynew1989)))) (%%gen-vector1903 (lambda (%%e1993 %%ls1994 %%lsnew1995) (if (eq? (car %%lsnew1995) 'quote) (if (eq? (cadr %%lsnew1995) %%ls1994) (list 'quote %%e1993) (list 'quote (list->vector (cadr %%lsnew1995)))) (if (eq? (car %%lsnew1995) 'list) (cons 'vector (cdr %%lsnew1995)) (list 'list->vector %%lsnew1995))))) (%%regen1904 (lambda (%%x1996) ((lambda (%%t1997) (if (memv %%t1997 '(ref)) (cadr %%x1996) (if (memv %%t1997 '(primitive)) (cadr %%x1996) (if (memv %%t1997 '(quote)) ((lambda (%%x1998) (if (self-eval? (cadr %%x1996)) %%x1998 (build-source #f (list (build-source #f 'quote) %%x1998)))) (attach-source #f (cadr %%x1996))) (if (memv %%t1997 '(lambda)) (build-source #f (list (build-source #f 'lambda) (cadr %%x1996) (%%regen1904 (caddr %%x1996)))) (if (memv %%t1997 '(map)) ((lambda (%%ls1999) (build-source #f (cons (if (fx= (length %%ls1999) 2) 'map 'map) %%ls1999))) (map %%regen1904 (cdr %%x1996))) (build-source #f (cons (car %%x1996) (map %%regen1904 (cdr %%x1996)))))))))) (car %%x1996))))) (lambda (%%e2000 %%r2001 %%mr2002 %%w2003 %%ae2004 %%m?2005) ((lambda (%%e2006) ((lambda (%%tmp2007) ((lambda (%%tmp2008) (if %%tmp2008 (apply (lambda (%%_2009 %%x2010) (call-with-values (lambda () (%%gen-syntax1897 %%e2006 %%x2010 %%r2001 '() %%ellipsis?448 #f)) (lambda (%%e2011 %%maps2012) (%%regen1904 %%e2011)))) %%tmp2008) ((lambda (%%_2013) (syntax-error %%e2006)) %%tmp2007))) ($syntax-dispatch %%tmp2007 '(any any)))) %%e2006)) (%%source-wrap362 %%e2000 %%w2003 %%ae2004))))))) (%%global-extend219 'core 'lambda (lambda (%%e2014 %%r2015 %%mr2016 %%w2017 %%ae2018 %%m?2019) ((lambda (%%tmp2020) ((lambda (%%tmp2021) (if %%tmp2021 (apply (lambda (%%_2022 %%c2023) (call-with-values (lambda () (%%chi-lambda-clause445 (%%source-wrap362 %%e2014 %%w2017 %%ae2018) %%c2023 %%r2015 %%mr2016 %%w2017 %%m?2019)) (lambda (%%emitter2024 %%dsssl-args2025 %%vars2026 %%dsssl-formals2027 %%orig-vars2028 %%body2029) ((lambda (%%t2030) (if (memv %%t2030 '(keyword)) (build-source %%ae2018 (list (build-source %%ae2018 'lambda) %%dsssl-args2025 (build-source %%ae2018 (list (build-source %%ae2018 'receive) %%vars2026 (build-source %%ae2018 (list (build-source %%ae2018 'apply) (build-source %%ae2018 (list (build-source %%ae2018 'lambda) %%dsssl-formals2027 (build-source %%ae2018 (cons (build-source %%ae2018 'values) %%orig-vars2028)))) %%dsssl-args2025)) %%body2029)))) (if (memv %%t2030 '(optional/rest)) (build-source %%ae2018 (list (build-source %%ae2018 'lambda) %%dsssl-formals2027 %%body2029)) (if (memv %%t2030 '(rnrs)) (build-source %%ae2018 (list (build-source %%ae2018 'lambda) %%vars2026 %%body2029)) (void))))) %%emitter2024)))) %%tmp2021) (syntax-error %%tmp2020))) ($syntax-dispatch %%tmp2020 '(any . any)))) %%e2014))) (%%global-extend219 'core 'letrec (lambda (%%e2031 %%r2032 %%mr2033 %%w2034 %%ae2035 %%m?2036) ((lambda (%%tmp2037) ((lambda (%%tmp2038) (if %%tmp2038 (apply (lambda (%%_2039 %%id2040 %%val2041 %%e12042 %%e22043) ((lambda (%%ids2044) (if (not (%%valid-bound-ids?357 %%ids2044)) (%%invalid-ids-error359 (map (lambda (%%x2045) (%%wrap361 %%x2045 %%w2034)) %%ids2044) (%%source-wrap362 %%e2031 %%w2034 %%ae2035) "bound variable") ((lambda (%%labels2046 %%new-vars2047) ((lambda (%%w2048 %%r2049) (%%build-letrec151 %%ae2035 %%new-vars2047 (map (lambda (%%x2050) (%%chi419 %%x2050 %%r2049 %%mr2033 %%w2048 %%m?2036)) %%val2041) (%%chi-body424 (cons %%e12042 %%e22043) (%%source-wrap362 %%e2031 %%w2048 %%ae2035) %%r2049 %%mr2033 %%w2048 %%m?2036))) (%%make-binding-wrap335 %%ids2044 %%labels2046 %%w2034) (%%extend-var-env*212 %%labels2046 %%new-vars2047 %%r2032))) (%%gen-labels280 %%ids2044) (map %%gen-var452 %%ids2044)))) %%id2040)) %%tmp2038) ((lambda (%%_2054) (syntax-error (%%source-wrap362 %%e2031 %%w2034 %%ae2035))) %%tmp2037))) ($syntax-dispatch %%tmp2037 '(any #(each (any any)) any . each-any)))) %%e2031))) (%%global-extend219 'core 'if (lambda (%%e2055 %%r2056 %%mr2057 %%w2058 %%ae2059 %%m?2060) ((lambda (%%tmp2061) ((lambda (%%tmp2062) (if %%tmp2062 (apply (lambda (%%_2063 %%test2064 %%then2065) (build-source %%ae2059 (list (build-source %%ae2059 'if) (%%chi419 %%test2064 %%r2056 %%mr2057 %%w2058 %%m?2060) (%%chi419 %%then2065 %%r2056 %%mr2057 %%w2058 %%m?2060) (%%chi-void447)))) %%tmp2062) ((lambda (%%tmp2066) (if %%tmp2066 (apply (lambda (%%_2067 %%test2068 %%then2069 %%else2070) (build-source %%ae2059 (list (build-source %%ae2059 'if) (%%chi419 %%test2068 %%r2056 %%mr2057 %%w2058 %%m?2060) (%%chi419 %%then2069 %%r2056 %%mr2057 %%w2058 %%m?2060) (%%chi419 %%else2070 %%r2056 %%mr2057 %%w2058 %%m?2060)))) %%tmp2066) ((lambda (%%_2071) (syntax-error (%%source-wrap362 %%e2055 %%w2058 %%ae2059))) %%tmp2061))) ($syntax-dispatch %%tmp2061 '(any any any any))))) ($syntax-dispatch %%tmp2061 '(any any any)))) %%e2055))) (%%global-extend219 'set! 'set! '()) (%%global-extend219 'alias 'alias '()) (%%global-extend219 'begin 'begin '()) (%%global-extend219 'begin '##begin '()) (%%global-extend219 '$module-key '$module '()) (%%global-extend219 '$import '$import '()) (%%global-extend219 'define 'define '()) (%%global-extend219 'define-syntax 'define-syntax '()) (%%global-extend219 'eval-when 'eval-when '()) (%%global-extend219 'meta 'meta '()) (%%global-extend219 'core 'syntax-case ((lambda () (letrec ((%%convert-pattern2072 (lambda (%%pattern2076 %%keys2077) (letrec ((%%cvt*2078 (lambda (%%p*2080 %%n2081 %%ids2082) (if (null? %%p*2080) (values '() %%ids2082) (call-with-values (lambda () (%%cvt*2078 (cdr %%p*2080) %%n2081 %%ids2082)) (lambda (%%y2083 %%ids2084) (call-with-values (lambda () (%%cvt2079 (car %%p*2080) %%n2081 %%ids2084)) (lambda (%%x2085 %%ids2086) (values (cons %%x2085 %%y2083) %%ids2086)))))))) (%%cvt2079 (lambda (%%p2087 %%n2088 %%ids2089) (if (%%id?221 %%p2087) (if (%%bound-id-member?360 %%p2087 %%keys2077) (values (vector 'free-id %%p2087) %%ids2089) (values 'any (cons (cons %%p2087 %%n2088) %%ids2089))) ((lambda (%%tmp2090) ((lambda (%%tmp2091) (if (if %%tmp2091 (apply (lambda (%%x2092 %%dots2093) (%%ellipsis?448 %%dots2093)) %%tmp2091) #f) (apply (lambda (%%x2094 %%dots2095) (call-with-values (lambda () (%%cvt2079 %%x2094 (fx+ %%n2088 1) %%ids2089)) (lambda (%%p2096 %%ids2097) (values (if (eq? %%p2096 'any) 'each-any (vector 'each %%p2096)) %%ids2097)))) %%tmp2091) ((lambda (%%tmp2098) (if (if %%tmp2098 (apply (lambda (%%x2099 %%dots2100 %%y2101 %%z2102) (%%ellipsis?448 %%dots2100)) %%tmp2098) #f) (apply (lambda (%%x2103 %%dots2104 %%y2105 %%z2106) (call-with-values (lambda () (%%cvt2079 %%z2106 %%n2088 %%ids2089)) (lambda (%%z2107 %%ids2108) (call-with-values (lambda () (%%cvt*2078 %%y2105 %%n2088 %%ids2108)) (lambda (%%y2110 %%ids2111) (call-with-values (lambda () (%%cvt2079 %%x2103 (fx+ %%n2088 1) %%ids2111)) (lambda (%%x2112 %%ids2113) (values (vector 'each+ %%x2112 (reverse %%y2110) %%z2107) %%ids2113)))))))) %%tmp2098) ((lambda (%%tmp2114) (if %%tmp2114 (apply (lambda (%%x2115 %%y2116) (call-with-values (lambda () (%%cvt2079 %%y2116 %%n2088 %%ids2089)) (lambda (%%y2117 %%ids2118) (call-with-values (lambda () (%%cvt2079 %%x2115 %%n2088 %%ids2118)) (lambda (%%x2119 %%ids2120) (values (cons %%x2119 %%y2117) %%ids2120)))))) %%tmp2114) ((lambda (%%tmp2121) (if %%tmp2121 (apply (lambda () (values '() %%ids2089)) %%tmp2121) ((lambda (%%tmp2122) (if %%tmp2122 (apply (lambda (%%x2123) (call-with-values (lambda () (%%cvt2079 %%x2123 %%n2088 %%ids2089)) (lambda (%%p2125 %%ids2126) (values (vector 'vector %%p2125) %%ids2126)))) %%tmp2122) ((lambda (%%x2127) (values (vector 'atom (%%strip451 %%p2087 '(()))) %%ids2089)) %%tmp2090))) ($syntax-dispatch %%tmp2090 '#(vector each-any))))) ($syntax-dispatch %%tmp2090 '())))) ($syntax-dispatch %%tmp2090 '(any . any))))) ($syntax-dispatch %%tmp2090 '(any any . #(each+ any () any)))))) ($syntax-dispatch %%tmp2090 '(any any)))) %%p2087))))) (%%cvt2079 %%pattern2076 0 '())))) (%%build-dispatch-call2073 (lambda (%%pvars2128 %%exp2129 %%y2130 %%r2131 %%mr2132 %%m?2133) ((lambda (%%ids2134 %%levels2135) ((lambda (%%labels2136 %%new-vars2137) (build-source #f (cons 'apply (list (build-source #f (list (build-source #f 'lambda) %%new-vars2137 (%%chi419 %%exp2129 (%%extend-env*211 %%labels2136 (map (lambda (%%var2138 %%level2139) (cons 'syntax (cons %%var2138 %%level2139))) %%new-vars2137 (map cdr %%pvars2128)) %%r2131) %%mr2132 (%%make-binding-wrap335 %%ids2134 %%labels2136 '(())) %%m?2133))) %%y2130)))) (%%gen-labels280 %%ids2134) (map %%gen-var452 %%ids2134))) (map car %%pvars2128) (map cdr %%pvars2128)))) (%%gen-clause2074 (lambda (%%x2140 %%keys2141 %%clauses2142 %%r2143 %%mr2144 %%m?2145 %%pat2146 %%fender2147 %%exp2148) (call-with-values (lambda () (%%convert-pattern2072 %%pat2146 %%keys2141)) (lambda (%%p2149 %%pvars2150) (if (not (%%distinct-bound-ids?358 (map car %%pvars2150))) (%%invalid-ids-error359 (map car %%pvars2150) %%pat2146 "pattern variable") (if (not (andmap (lambda (%%x2151) (not (%%ellipsis?448 (car %%x2151)))) %%pvars2150)) (syntax-error %%pat2146 "misplaced ellipsis in syntax-case pattern") ((lambda (%%y2152) (build-source #f (cons (build-source #f (list (build-source #f 'lambda) (list %%y2152) (build-source #f (list (build-source #f 'if) ((lambda (%%tmp2162) ((lambda (%%tmp2163) (if %%tmp2163 (apply (lambda () %%y2152) %%tmp2163) ((lambda (%%_2164) (build-source #f (list (build-source #f 'if) %%y2152 (%%build-dispatch-call2073 %%pvars2150 %%fender2147 %%y2152 %%r2143 %%mr2144 %%m?2145) ((lambda (%%x2165) (if (self-eval? #f) %%x2165 (build-source #f (list (build-source #f 'quote) %%x2165)))) (attach-source #f #f))))) %%tmp2162))) ($syntax-dispatch %%tmp2162 '#(atom #t)))) %%fender2147) (%%build-dispatch-call2073 %%pvars2150 %%exp2148 %%y2152 %%r2143 %%mr2144 %%m?2145) (%%gen-syntax-case2075 %%x2140 %%keys2141 %%clauses2142 %%r2143 %%mr2144 %%m?2145))))) (list (if (eq? %%p2149 'any) (build-source #f (cons 'list (list %%x2140))) (build-source #f (cons '$syntax-dispatch (list %%x2140 ((lambda (%%x2166) (if (self-eval? %%p2149) %%x2166 (build-source #f (list (build-source #f 'quote) %%x2166)))) (attach-source #f %%p2149)))))))))) (%%gen-var452 'tmp)))))))) (%%gen-syntax-case2075 (lambda (%%x2167 %%keys2168 %%clauses2169 %%r2170 %%mr2171 %%m?2172) (if (null? %%clauses2169) (build-source #f (cons 'syntax-error (list %%x2167))) ((lambda (%%tmp2173) ((lambda (%%tmp2174) (if %%tmp2174 (apply (lambda (%%pat2175 %%exp2176) (if (if (%%id?221 %%pat2175) (if (not (%%bound-id-member?360 %%pat2175 %%keys2168)) (not (%%ellipsis?448 %%pat2175)) #f) #f) ((lambda (%%label2177 %%var2178) (build-source #f (cons (build-source #f (list (build-source #f 'lambda) (list %%var2178) (%%chi419 %%exp2176 (%%extend-env210 %%label2177 (cons 'syntax (cons %%var2178 0)) %%r2170) %%mr2171 (%%make-binding-wrap335 (list %%pat2175) (list %%label2177) '(())) %%m?2172))) (list %%x2167)))) (%%gen-label278) (%%gen-var452 %%pat2175)) (%%gen-clause2074 %%x2167 %%keys2168 (cdr %%clauses2169) %%r2170 %%mr2171 %%m?2172 %%pat2175 #t %%exp2176))) %%tmp2174) ((lambda (%%tmp2179) (if %%tmp2179 (apply (lambda (%%pat2180 %%fender2181 %%exp2182) (%%gen-clause2074 %%x2167 %%keys2168 (cdr %%clauses2169) %%r2170 %%mr2171 %%m?2172 %%pat2180 %%fender2181 %%exp2182)) %%tmp2179) ((lambda (%%_2183) (syntax-error (car %%clauses2169) "invalid syntax-case clause")) %%tmp2173))) ($syntax-dispatch %%tmp2173 '(any any any))))) ($syntax-dispatch %%tmp2173 '(any any)))) (car %%clauses2169)))))) (lambda (%%e2184 %%r2185 %%mr2186 %%w2187 %%ae2188 %%m?2189) ((lambda (%%e2190) ((lambda (%%tmp2191) ((lambda (%%tmp2192) (if %%tmp2192 (apply (lambda (%%_2193 %%val2194 %%key2195 %%m2196) (if (andmap (lambda (%%x2197) (if (%%id?221 %%x2197) (not (%%ellipsis?448 %%x2197)) #f)) %%key2195) ((lambda (%%x2199) (build-source %%ae2188 (cons (build-source #f (list (build-source #f 'lambda) (list %%x2199) (%%gen-syntax-case2075 %%x2199 %%key2195 %%m2196 %%r2185 %%mr2186 %%m?2189))) (list (%%chi419 %%val2194 %%r2185 %%mr2186 '(()) %%m?2189))))) (%%gen-var452 'tmp)) (syntax-error %%e2190 "invalid literals list in"))) %%tmp2192) (syntax-error %%tmp2191))) ($syntax-dispatch %%tmp2191 '(any any each-any . each-any)))) %%e2190)) (%%source-wrap362 %%e2184 %%w2187 %%ae2188))))))) (%%put-cte-hook43 'module (lambda (%%x2202) (letrec ((%%proper-export?2203 (lambda (%%e2204) ((lambda (%%tmp2205) ((lambda (%%tmp2206) (if %%tmp2206 (apply (lambda (%%id2207 %%e2208) (if (identifier? %%id2207) (andmap %%proper-export?2203 %%e2208) #f)) %%tmp2206) ((lambda (%%id2210) (identifier? %%id2210)) %%tmp2205))) ($syntax-dispatch %%tmp2205 '(any . each-any)))) %%e2204)))) ((lambda (%%tmp2211) ((lambda (%%orig2212) ((lambda (%%tmp2213) ((lambda (%%tmp2214) (if %%tmp2214 (apply (lambda (%%_2215 %%e2216 %%d2217) (if (andmap %%proper-export?2203 %%e2216) (list '#structure(#4# #(#5# begin #6# 3083820) #14=(#7# #structure(#9# #(_ e d) #(#7# #7# #7#) #("i" "i" "i")) . #15=(#structure(#9# #(orig) #(#7#) #("i")) #structure(#9# (proper-export?) (#7#) ("i")) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons '#structure(#4# #(#5# $module #6# 3542572) #14#) (cons %%orig2212 (cons '#structure(#4# #(#5# anon #6# 4394540) #14#) (cons %%e2216 %%d2217)))) (cons '#structure(#4# #(#5# $import #6# 5770796) #14#) (cons %%orig2212 '#structure(#4# (#(#5# #f #6# 6622764) #(#5# anon #6# 6819372)) #14#)))) (syntax-error %%x2202 "invalid exports list in"))) %%tmp2214) ((lambda (%%tmp2221) (if (if %%tmp2221 (apply (lambda (%%_2222 %%m2223 %%e2224 %%d2225) (identifier? %%m2223)) %%tmp2221) #f) (apply (lambda (%%_2226 %%m2227 %%e2228 %%d2229) (if (andmap %%proper-export?2203 %%e2228) (cons '#structure(#4# #(#5# $module #6# 3083825) (#7# #structure(#9# #(_ m e d) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #15#)) (cons %%orig2212 (cons %%m2227 (cons %%e2228 %%d2229)))) (syntax-error %%x2202 "invalid exports list in"))) %%tmp2221) (syntax-error %%tmp2213))) ($syntax-dispatch %%tmp2213 '(any any each-any . each-any))))) ($syntax-dispatch %%tmp2213 '(any each-any . each-any)))) %%x2202)) %%tmp2211)) %%x2202)))) ((lambda () (letrec ((%%$module-exports2233 (lambda (%%m2235 %%r2236) ((lambda (%%b2237) ((lambda (%%t2238) (if (memv %%t2238 '($module)) ((lambda (%%interface2239) ((lambda (%%new-marks2240) ((lambda () (%%vmap408 (lambda (%%x2241) ((lambda (%%id2242) (%%make-syntax-object36 (syntax->datum %%id2242) ((lambda (%%marks2243) (%%make-wrap230 %%marks2243 (if (eq? (car %%marks2243) #f) (cons 'shift (%%wrap-subst232 '((top)))) (%%wrap-subst232 '((top)))))) (%%join-marks341 %%new-marks2240 (%%wrap-marks231 (%%syntax-wrap39 %%id2242)))))) (if (pair? %%x2241) (car %%x2241) %%x2241))) (%%interface-exports374 %%interface2239))))) (%%import-mark-delta426 %%m2235 %%interface2239))) (%%binding-value197 %%b2237)) (if (memv %%t2238 '(displaced-lexical)) (%%displaced-lexical-error214 %%m2235) (syntax-error %%m2235 "unknown module")))) (%%binding-type196 %%b2237))) (%%r2236 %%m2235)))) (%%$import-help2234 (lambda (%%orig2244 %%import-only?2245) (lambda (%%r2246) (letrec ((%%difference2247 (lambda (%%ls12253 %%ls22254) (if (null? %%ls12253) %%ls12253 (if (%%bound-id-member?360 (car %%ls12253) %%ls22254) (%%difference2247 (cdr %%ls12253) %%ls22254) (cons (car %%ls12253) (%%difference2247 (cdr %%ls12253) %%ls22254)))))) (%%prefix-add2248 (lambda (%%prefix-id2255) ((lambda (%%prefix2256) (lambda (%%id2257) (datum->syntax %%id2257 (string->symbol (string-append %%prefix2256 (symbol->string (syntax->datum %%id2257))))))) (symbol->string (syntax->datum %%prefix-id2255))))) (%%prefix-drop2249 (lambda (%%prefix-id2258) ((lambda (%%prefix2259) (lambda (%%id2260) ((lambda (%%s2261) ((lambda (%%np2262 %%ns2263) (begin (if (not (if (>= %%ns2263 %%np2262) (string=? (substring %%s2261 0 %%np2262) %%prefix2259) #f)) (syntax-error %%id2260 (string-append "missing expected prefix " %%prefix2259)) (void)) (datum->syntax %%id2260 (string->symbol (substring %%s2261 %%np2262 %%ns2263))))) (string-length %%prefix2259) (string-length %%s2261))) (symbol->string (syntax->datum %%id2260))))) (symbol->string (syntax->datum %%prefix-id2258))))) (%%gen-mid2250 (lambda (%%mid2264) (datum->syntax %%mid2264 (($generate-id) ((lambda (%%x2265) ((lambda (%%e2266) (if (annotation? %%e2266) (annotation-expression %%e2266) %%e2266)) (if (%%syntax?37 %%x2265) (%%syntax-expression38 %%x2265) %%x2265))) %%mid2264))))) (%%modspec2251 (lambda (%%m2267 %%exports?2268) ((lambda (%%tmp2269) ((lambda (%%tmp2270) (if %%tmp2270 (apply (lambda (%%orig2271 %%import-only?2272) ((lambda (%%tmp2273) ((lambda (%%tmp2274) (if (if %%tmp2274 (apply (lambda (%%m2275 %%id2276) (andmap identifier? %%id2276)) %%tmp2274) #f) (apply (lambda (%%m2278 %%id2279) (call-with-values (lambda () (%%modspec2251 %%m2278 #f)) (lambda (%%mid2280 %%d2281 %%exports2282) ((lambda (%%tmp2283) ((lambda (%%tmp2284) (if %%tmp2284 (apply (lambda (%%d2285 %%tmid2286) (values %%mid2280 (list '#structure(#4# #(#5# begin #6# 3935863) #16=(#7# #structure(#9# #(d tmid) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m id) #(#7# #7#) #("i" "i")) . #17=(#structure(#9# #(orig import-only?) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(m exports?) #(#7# #7#) #("i" "i")) . #18=(#structure(#9# (modspec* modspec gen-mid prefix-drop prefix-add difference) (#7# #7# #7# #7# #7# #7#) ("i" "i" "i" "i" "i" "i")) #structure(#9# #(r) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(orig import-only?) #(#7# #7#) #("i" "i")) #structure(#9# ($import-help $module-exports) (#7# #7#) ("i" "i")) #10# . #12#)))) (list '#structure(#4# #(#5# $module #6# 4394615) #16#) %%orig2271 %%tmid2286 %%id2279 %%d2285) (list '#structure(#4# #(#5# $import #6# 6426231) #16#) %%orig2271 %%import-only?2272 %%tmid2286)) (if %%exports?2268 %%id2279 #f))) %%tmp2284) (syntax-error %%tmp2283))) ($syntax-dispatch %%tmp2283 '(any any)))) (list %%d2281 (%%gen-mid2250 %%mid2280)))))) %%tmp2274) ((lambda (%%tmp2289) (if (if %%tmp2289 (apply (lambda (%%m2290 %%id2291) (andmap identifier? %%id2291)) %%tmp2289) #f) (apply (lambda (%%m2293 %%id2294) (call-with-values (lambda () (%%modspec2251 %%m2293 #t)) (lambda (%%mid2295 %%d2296 %%exports2297) ((lambda (%%tmp2298) ((lambda (%%tmp2299) (if %%tmp2299 (apply (lambda (%%d2300 %%tmid2301 %%id2302) (values %%mid2295 (list '#structure(#4# #(#5# begin #6# 3935872) #19=(#7# #structure(#9# #(d tmid id) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m id) #(#7# #7#) #("i" "i")) . #17#)) (list '#structure(#4# #(#5# $module #6# 4394624) #19#) %%orig2271 %%tmid2301 %%id2302 %%d2300) (list '#structure(#4# #(#5# $import #6# 6426240) #19#) %%orig2271 %%import-only?2272 %%tmid2301)) (if %%exports?2268 %%id2302 #f))) %%tmp2299) (syntax-error %%tmp2298))) ($syntax-dispatch %%tmp2298 '(any any each-any)))) (list %%d2296 (%%gen-mid2250 %%mid2295) (%%difference2247 %%exports2297 %%id2294)))))) %%tmp2289) ((lambda (%%tmp2306) (if (if %%tmp2306 (apply (lambda (%%m2307 %%prefix-id2308) (identifier? %%prefix-id2308)) %%tmp2306) #f) (apply (lambda (%%m2309 %%prefix-id2310) (call-with-values (lambda () (%%modspec2251 %%m2309 #t)) (lambda (%%mid2311 %%d2312 %%exports2313) ((lambda (%%tmp2314) ((lambda (%%tmp2315) (if %%tmp2315 (apply (lambda (%%d2316 %%tmid2317 %%old-id2318 %%tmp2319 %%id2320) (values %%mid2311 (list '#structure(#4# #(#5# begin #6# 3935883) #20=(#7# #structure(#9# #(d tmid old-id tmp id) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m prefix-id) #(#7# #7#) #("i" "i")) . #17#)) (cons '#structure(#4# #(#5# $module #6# 4394635) #20#) (cons %%orig2271 (cons %%tmid2317 (cons (map list %%id2320 %%tmp2319) (cons (cons '#structure(#4# #(#5# $module #6# 4984460) #20#) (cons %%orig2271 (cons %%tmid2317 (cons (map list %%tmp2319 %%old-id2318) (cons %%d2316 (map (lambda (%%tmp2326 %%tmp2325) (list '#structure(#4# #(#5# alias #6# 7605900) #20#) %%tmp2325 %%tmp2326)) %%old-id2318 %%tmp2319)))))) (cons (list '#structure(#4# #(#5# $import #6# 4984461) #20#) %%orig2271 %%import-only?2272 %%tmid2317) (map (lambda (%%tmp2328 %%tmp2327) (list '#structure(#4# #(#5# alias #6# 4984462) #20#) %%tmp2327 %%tmp2328)) %%tmp2319 %%id2320))))))) (list '#structure(#4# #(#5# $import #6# 4394639) #20#) %%orig2271 %%import-only?2272 %%tmid2317)) (if %%exports?2268 %%id2320 #f))) %%tmp2315) (syntax-error %%tmp2314))) ($syntax-dispatch %%tmp2314 '(any any each-any each-any each-any)))) (list %%d2312 (%%gen-mid2250 %%mid2311) %%exports2313 (generate-temporaries %%exports2313) (map (%%prefix-add2248 %%prefix-id2310) %%exports2313)))))) %%tmp2306) ((lambda (%%tmp2330) (if (if %%tmp2330 (apply (lambda (%%m2331 %%prefix-id2332) (identifier? %%prefix-id2332)) %%tmp2330) #f) (apply (lambda (%%m2333 %%prefix-id2334) (call-with-values (lambda () (%%modspec2251 %%m2333 #t)) (lambda (%%mid2335 %%d2336 %%exports2337) ((lambda (%%tmp2338) ((lambda (%%tmp2339) (if %%tmp2339 (apply (lambda (%%d2340 %%tmid2341 %%old-id2342 %%tmp2343 %%id2344) (values %%mid2335 (list '#structure(#4# #(#5# begin #6# 3935898) #21=(#7# #structure(#9# #(d tmid old-id tmp id) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m prefix-id) #(#7# #7#) #("i" "i")) . #17#)) (cons '#structure(#4# #(#5# $module #6# 4394650) #21#) (cons %%orig2271 (cons %%tmid2341 (cons (map list %%id2344 %%tmp2343) (cons (cons '#structure(#4# #(#5# $module #6# 4984475) #21#) (cons %%orig2271 (cons %%tmid2341 (cons (map list %%tmp2343 %%old-id2342) (cons %%d2340 (map (lambda (%%tmp2350 %%tmp2349) (list '#structure(#4# #(#5# alias #6# 7605915) #21#) %%tmp2349 %%tmp2350)) %%old-id2342 %%tmp2343)))))) (cons (list '#structure(#4# #(#5# $import #6# 4984476) #21#) %%orig2271 %%import-only?2272 %%tmid2341) (map (lambda (%%tmp2352 %%tmp2351) (list '#structure(#4# #(#5# alias #6# 4984477) #21#) %%tmp2351 %%tmp2352)) %%tmp2343 %%id2344))))))) (list '#structure(#4# #(#5# $import #6# 4394654) #21#) %%orig2271 %%import-only?2272 %%tmid2341)) (if %%exports?2268 %%id2344 #f))) %%tmp2339) (syntax-error %%tmp2338))) ($syntax-dispatch %%tmp2338 '(any any each-any each-any each-any)))) (list %%d2336 (%%gen-mid2250 %%mid2335) %%exports2337 (generate-temporaries %%exports2337) (map (%%prefix-drop2249 %%prefix-id2334) %%exports2337)))))) %%tmp2330) ((lambda (%%tmp2354) (if (if %%tmp2354 (apply (lambda (%%m2355 %%new-id2356 %%old-id2357) (if (andmap identifier? %%new-id2356) (andmap identifier? %%old-id2357) #f)) %%tmp2354) #f) (apply (lambda (%%m2360 %%new-id2361 %%old-id2362) (call-with-values (lambda () (%%modspec2251 %%m2360 #t)) (lambda (%%mid2363 %%d2364 %%exports2365) ((lambda (%%tmp2366) ((lambda (%%tmp2367) (if %%tmp2367 (apply (lambda (%%d2368 %%tmid2369 %%tmp2370 %%other-id2371) (values %%mid2363 (list '#structure(#4# #(#5# begin #6# 3935913) #22=(#7# #structure(#9# #(d tmid tmp other-id) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m new-id old-id) #(#7# #7# #7#) #("i" "i" "i")) . #17#)) (cons '#structure(#4# #(#5# $module #6# 4394665) #22#) (cons %%orig2271 (cons %%tmid2369 (cons (append (map list %%new-id2361 %%tmp2370) %%other-id2371) (cons (cons '#structure(#4# #(#5# $module #6# 4984490) #22#) (cons %%orig2271 (cons %%tmid2369 (cons (append %%other-id2371 (map list %%tmp2370 %%old-id2362)) (cons %%d2368 (map (lambda (%%tmp2379 %%tmp2378) (list '#structure(#4# #(#5# alias #6# 8457898) #22#) %%tmp2378 %%tmp2379)) %%old-id2362 %%tmp2370)))))) (cons (list '#structure(#4# #(#5# $import #6# 4984491) #22#) %%orig2271 %%import-only?2272 %%tmid2369) (map (lambda (%%tmp2381 %%tmp2380) (list '#structure(#4# #(#5# alias #6# 4984492) #22#) %%tmp2380 %%tmp2381)) %%tmp2370 %%new-id2361))))))) (list '#structure(#4# #(#5# $import #6# 4394669) #22#) %%orig2271 %%import-only?2272 %%tmid2369)) (if %%exports?2268 (append %%new-id2361 %%other-id2371) #f))) %%tmp2367) (syntax-error %%tmp2366))) ($syntax-dispatch %%tmp2366 '(any any each-any each-any)))) (list %%d2364 (%%gen-mid2250 %%mid2363) (generate-temporaries %%old-id2362) (%%difference2247 %%exports2365 %%old-id2362)))))) %%tmp2354) ((lambda (%%tmp2386) (if (if %%tmp2386 (apply (lambda (%%m2387 %%new-id2388 %%old-id2389) (if (andmap identifier? %%new-id2388) (andmap identifier? %%old-id2389) #f)) %%tmp2386) #f) (apply (lambda (%%m2392 %%new-id2393 %%old-id2394) (call-with-values (lambda () (%%modspec2251 %%m2392 #t)) (lambda (%%mid2395 %%d2396 %%exports2397) ((lambda (%%tmp2398) ((lambda (%%tmp2399) (if %%tmp2399 (apply (lambda (%%d2400 %%tmid2401 %%other-id2402) (values %%mid2395 (list '#structure(#4# #(#5# begin #6# 3935927) #23=(#7# #structure(#9# #(d tmid other-id) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(mid d exports) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(m new-id old-id) #(#7# #7# #7#) #("i" "i" "i")) . #17#)) (cons '#structure(#4# #(#5# $module #6# 4394679) #23#) (cons %%orig2271 (cons %%tmid2401 (cons (append (map list %%new-id2393 %%old-id2394) %%other-id2402) (cons %%d2400 (map (lambda (%%tmp2407 %%tmp2406) (list '#structure(#4# #(#5# alias #6# 8064695) #23#) %%tmp2406 %%tmp2407)) %%old-id2394 %%new-id2393)))))) (list '#structure(#4# #(#5# $import #6# 4394680) #23#) %%orig2271 %%import-only?2272 %%tmid2401)) (if %%exports?2268 (append %%new-id2393 %%other-id2402) #f))) %%tmp2399) (syntax-error %%tmp2398))) ($syntax-dispatch %%tmp2398 '(any any each-any)))) (list %%d2396 (%%gen-mid2250 %%mid2395) %%exports2397))))) %%tmp2386) ((lambda (%%tmp2410) (if (if %%tmp2410 (apply (lambda (%%mid2411) (identifier? %%mid2411)) %%tmp2410) #f) (apply (lambda (%%mid2412) (values %%mid2412 (list '#structure(#4# #(#5# $import #6# 2952894) (#7# #structure(#9# #(mid) #(#7#) #("i")) . #17#)) %%orig2271 %%import-only?2272 %%mid2412) (if %%exports?2268 (%%$module-exports2233 %%mid2412 %%r2246) #f))) %%tmp2410) ((lambda (%%tmp2413) (if (if %%tmp2413 (apply (lambda (%%mid2414) (identifier? %%mid2414)) %%tmp2413) #f) (apply (lambda (%%mid2415) (values %%mid2415 (list '#structure(#4# #(#5# $import #6# 2952899) (#7# #structure(#9# #(mid) #(#7#) #("i")) . #17#)) %%orig2271 %%import-only?2272 %%mid2415) (if %%exports?2268 (%%$module-exports2233 %%mid2415 %%r2246) #f))) %%tmp2413) ((lambda (%%_2416) (syntax-error %%m2267 "invalid module specifier")) %%tmp2273))) ($syntax-dispatch %%tmp2273 '(any))))) (list %%tmp2273)))) ($syntax-dispatch %%tmp2273 '(#(free-id #structure(#4# #(#5# alias #6# 1904303) #24=(#7# . #17#))) any . #(each (any any))))))) ($syntax-dispatch %%tmp2273 '(#(free-id #structure(#4# #(#5# rename #6# 1904288) #24#)) any . #(each (any any))))))) ($syntax-dispatch %%tmp2273 '(#(free-id #structure(#4# #(#5# drop-prefix #6# 1904273) #24#)) any any))))) ($syntax-dispatch %%tmp2273 '(#(free-id #structure(#4# #(#5# add-prefix #6# 1904258) #24#)) any any))))) ($syntax-dispatch %%tmp2273 '(#(free-id #structure(#4# #(#5# except #6# 1904249) #24#)) any . each-any))))) ($syntax-dispatch %%tmp2273 '(#(free-id #structure(#4# #(#5# only #6# 1904242) #24#)) any . each-any)))) %%m2267)) %%tmp2270) (syntax-error %%tmp2269))) ($syntax-dispatch %%tmp2269 '(any any)))) (list %%orig2244 %%import-only?2245)))) (%%modspec*2252 (lambda (%%m2417) (call-with-values (lambda () (%%modspec2251 %%m2417 #f)) (lambda (%%mid2418 %%d2419 %%exports2420) %%d2419))))) ((lambda (%%tmp2421) ((lambda (%%tmp2422) (if %%tmp2422 (apply (lambda (%%_2423 %%m2424) ((lambda (%%tmp2425) ((lambda (%%tmp2426) (if %%tmp2426 (apply (lambda (%%d2427) (cons '#structure(#4# #(#5# begin #6# 2297548) (#7# #structure(#9# #(d) #(#7#) #("i")) #structure(#9# #(_ m) #(#7# #7#) #("i" "i")) . #18#)) %%d2427)) %%tmp2426) (syntax-error %%tmp2425))) ($syntax-dispatch %%tmp2425 'each-any))) (map %%modspec*2252 %%m2424))) %%tmp2422) (syntax-error %%tmp2421))) ($syntax-dispatch %%tmp2421 '(any . each-any)))) %%orig2244)))))) (begin (%%put-cte-hook43 'import (lambda (%%orig2430) (%%$import-help2234 %%orig2430 #f))) (%%put-cte-hook43 'import-only (lambda (%%orig2431) (%%$import-help2234 %%orig2431 #t))))))) (set! make-expander (lambda (%%ctem2432 %%rtem2433) (lambda (%%x2434) ((lambda (%%env2435) (if (if (pair? %%x2434) (equal? (car %%x2434) %%noexpand35) #f) (cadr %%x2434) (%%chi-top*365 %%x2434 '() (%%env-wrap307 %%env2435) %%ctem2432 %%rtem2433 #f (%%env-top-ribcage305 %%env2435)))) (interaction-environment))))) (set! sc-expand (make-expander '(E) '(E))) (set! $make-environment (lambda (%%token2436 %%mutable?2437) ((lambda (%%top-ribcage2438) (%%make-env303 %%top-ribcage2438 (%%make-wrap230 (%%wrap-marks231 '((top))) (cons %%top-ribcage2438 (%%wrap-subst232 '((top))))))) (%%make-top-ribcage289 %%token2436 %%mutable?2437)))) (set! environment? (lambda (%%x2439) (%%env?304 %%x2439))) (set! interaction-environment ((lambda (%%e2440) (lambda () %%e2440)) ($make-environment '*top* #t))) (set! identifier? (lambda (%%x2441) (%%nonsymbol-id?220 %%x2441))) (set! datum->syntax (lambda (%%id2442 %%datum2443) (begin ((lambda (%%x2444) (if (not (%%nonsymbol-id?220 %%x2444)) (error (string-append #25="(in " (symbol->string 'datum->syntax) #26=") invalid argument") %%x2444) (void))) %%id2442) (%%make-syntax-object36 %%datum2443 (%%syntax-wrap39 %%id2442))))) (set! syntax->list (lambda (%%orig-ls2445) ((letrec ((%%f2446 (lambda (%%ls2447) ((lambda (%%tmp2448) ((lambda (%%tmp2449) (if %%tmp2449 (apply (lambda () '()) %%tmp2449) ((lambda (%%tmp2450) (if %%tmp2450 (apply (lambda (%%x2451 %%r2452) (cons %%x2451 (%%f2446 %%r2452))) %%tmp2450) ((lambda (%%_2453) (error "(in syntax->list) invalid argument" %%orig-ls2445)) %%tmp2448))) ($syntax-dispatch %%tmp2448 '(any . any))))) ($syntax-dispatch %%tmp2448 '()))) %%ls2447)))) %%f2446) %%orig-ls2445))) (set! syntax->vector (lambda (%%v2454) ((lambda (%%tmp2455) ((lambda (%%tmp2456) (if %%tmp2456 (apply (lambda (%%x2457) (list->vector (syntax->list %%x2457))) %%tmp2456) ((lambda (%%_2459) (error "(in syntax->vector) invalid argument" %%v2454)) %%tmp2455))) ($syntax-dispatch %%tmp2455 '#(vector each-any)))) %%v2454))) (set! syntax->datum (lambda (%%x2460) (%%strip451 %%x2460 '(())))) (set! generate-temporaries ((lambda (%%n2461) (lambda (%%ls2462) (begin ((lambda (%%x2463) (if (not (list? %%x2463)) (error (string-append #25# (symbol->string 'generate-temporaries) #26#) %%x2463) (void))) %%ls2462) (map (lambda (%%x2464) (begin (set! %%n2461 (+ %%n2461 1)) (%%wrap361 (string->symbol (string-append "t" (number->string %%n2461))) '((tmp))))) %%ls2462)))) 0)) (set! free-identifier=? (lambda (%%x2465 %%y2466) (begin ((lambda (%%x2467) (if (not (%%nonsymbol-id?220 %%x2467)) (error (string-append #25# (symbol->string 'free-identifier=?) #26#) %%x2467) (void))) %%x2465) ((lambda (%%x2468) (if (not (%%nonsymbol-id?220 %%x2468)) (error (string-append #25# (symbol->string 'free-identifier=?) #26#) %%x2468) (void))) %%y2466) (%%free-id=?353 %%x2465 %%y2466)))) (set! bound-identifier=? (lambda (%%x2469 %%y2470) (begin ((lambda (%%x2471) (if (not (%%nonsymbol-id?220 %%x2471)) (error (string-append #25# (symbol->string 'bound-identifier=?) #26#) %%x2471) (void))) %%x2469) ((lambda (%%x2472) (if (not (%%nonsymbol-id?220 %%x2472)) (error (string-append #25# (symbol->string 'bound-identifier=?) #26#) %%x2472) (void))) %%y2470) (%%bound-id=?356 %%x2469 %%y2470)))) (set! literal-identifier=? (lambda (%%x2473 %%y2474) (begin ((lambda (%%x2475) (if (not (%%nonsymbol-id?220 %%x2475)) (error (string-append #25# (symbol->string 'literal-identifier=?) #26#) %%x2475) (void))) %%x2473) ((lambda (%%x2476) (if (not (%%nonsymbol-id?220 %%x2476)) (error (string-append #25# (symbol->string 'literal-identifier=?) #26#) %%x2476) (void))) %%y2474) (%%literal-id=?354 %%x2473 %%y2474)))) (set! syntax-error (lambda (%%object2478 . %%messages2477) (begin (for-each (lambda (%%x2479) ((lambda (%%x2480) (if (not (string? %%x2480)) (error (string-append #25# (symbol->string 'syntax-error) #26#) %%x2480) (void))) %%x2479)) %%messages2477) ((lambda (%%messages2481 %%locat2482) (apply ##raise-expression-parsing-exception (cons 'psyntax-error (cons %%locat2482 (append %%messages2481 (list (list 'quote (%%strip451 %%object2478 '(()))))))))) (if (null? %%messages2477) '(invalid syntax) %%messages2477) ((lambda (%%t2483) (if %%t2483 %%t2483 (if (if (%%syntax?37 %%object2478) (annotation? (%%syntax-expression38 %%object2478)) #f) (%%syntax-expression38 %%object2478) #f))) (annotation? %%object2478)))))) ((lambda () (letrec ((%%match-each2484 (lambda (%%e2491 %%p2492 %%w2493) (if (annotation? %%e2491) (%%match-each2484 (annotation-expression %%e2491) %%p2492 %%w2493) (if (pair? %%e2491) ((lambda (%%first2494) (if %%first2494 ((lambda (%%rest2495) (if %%rest2495 (cons %%first2494 %%rest2495) #f)) (%%match-each2484 (cdr %%e2491) %%p2492 %%w2493)) #f)) (%%match2490 (car %%e2491) %%p2492 %%w2493 '())) (if (null? %%e2491) '() (if (%%syntax?37 %%e2491) (%%match-each2484 (%%syntax-expression38 %%e2491) %%p2492 (%%join-wraps340 %%w2493 (%%syntax-wrap39 %%e2491))) #f)))))) (%%match-each+2485 (lambda (%%e2496 %%x-pat2497 %%y-pat2498 %%z-pat2499 %%w2500 %%r2501) ((letrec ((%%f2502 (lambda (%%e2503 %%w2504) (if (pair? %%e2503) (call-with-values (lambda () (%%f2502 (cdr %%e2503) %%w2504)) (lambda (%%xr*2505 %%y-pat2506 %%r2507) (if %%r2507 (if (null? %%y-pat2506) ((lambda (%%xr2508) (if %%xr2508 (values (cons %%xr2508 %%xr*2505) %%y-pat2506 %%r2507) (values #f #f #f))) (%%match2490 (car %%e2503) %%x-pat2497 %%w2504 '())) (values '() (cdr %%y-pat2506) (%%match2490 (car %%e2503) (car %%y-pat2506) %%w2504 %%r2507))) (values #f #f #f)))) (if (annotation? %%e2503) (%%f2502 (annotation-expression %%e2503) %%w2504) (if (%%syntax?37 %%e2503) (%%f2502 (%%syntax-expression38 %%e2503) (%%join-wraps340 %%w2504 (%%syntax-wrap39 %%e2503))) (values '() %%y-pat2498 (%%match2490 %%e2503 %%z-pat2499 %%w2504 %%r2501)))))))) %%f2502) %%e2496 %%w2500))) (%%match-each-any2486 (lambda (%%e2509 %%w2510) (if (annotation? %%e2509) (%%match-each-any2486 (annotation-expression %%e2509) %%w2510) (if (pair? %%e2509) ((lambda (%%l2511) (if %%l2511 (cons (%%wrap361 (car %%e2509) %%w2510) %%l2511) #f)) (%%match-each-any2486 (cdr %%e2509) %%w2510)) (if (null? %%e2509) '() (if (%%syntax?37 %%e2509) (%%match-each-any2486 (%%syntax-expression38 %%e2509) (%%join-wraps340 %%w2510 (%%syntax-wrap39 %%e2509))) #f)))))) (%%match-empty2487 (lambda (%%p2512 %%r2513) (if (null? %%p2512) %%r2513 (if (eq? %%p2512 'any) (cons '() %%r2513) (if (pair? %%p2512) (%%match-empty2487 (car %%p2512) (%%match-empty2487 (cdr %%p2512) %%r2513)) (if (eq? %%p2512 'each-any) (cons '() %%r2513) ((lambda (%%t2514) (if (memv %%t2514 '(each)) (%%match-empty2487 (vector-ref %%p2512 1) %%r2513) (if (memv %%t2514 '(each+)) (%%match-empty2487 (vector-ref %%p2512 1) (%%match-empty2487 (reverse (vector-ref %%p2512 2)) (%%match-empty2487 (vector-ref %%p2512 3) %%r2513))) (if (memv %%t2514 '(free-id atom)) %%r2513 (if (memv %%t2514 '(vector)) (%%match-empty2487 (vector-ref %%p2512 1) %%r2513) (void)))))) (vector-ref %%p2512 0)))))))) (%%combine2488 (lambda (%%r*2515 %%r2516) (if (null? (car %%r*2515)) %%r2516 (cons (map car %%r*2515) (%%combine2488 (map cdr %%r*2515) %%r2516))))) (%%match*2489 (lambda (%%e2517 %%p2518 %%w2519 %%r2520) (if (null? %%p2518) (if (null? %%e2517) %%r2520 #f) (if (pair? %%p2518) (if (pair? %%e2517) (%%match2490 (car %%e2517) (car %%p2518) %%w2519 (%%match2490 (cdr %%e2517) (cdr %%p2518) %%w2519 %%r2520)) #f) (if (eq? %%p2518 'each-any) ((lambda (%%l2521) (if %%l2521 (cons %%l2521 %%r2520) #f)) (%%match-each-any2486 %%e2517 %%w2519)) ((lambda (%%t2522) (if (memv %%t2522 '(each)) (if (null? %%e2517) (%%match-empty2487 (vector-ref %%p2518 1) %%r2520) ((lambda (%%r*2523) (if %%r*2523 (%%combine2488 %%r*2523 %%r2520) #f)) (%%match-each2484 %%e2517 (vector-ref %%p2518 1) %%w2519))) (if (memv %%t2522 '(free-id)) (if (%%id?221 %%e2517) (if (%%literal-id=?354 (%%wrap361 %%e2517 %%w2519) (vector-ref %%p2518 1)) %%r2520 #f) #f) (if (memv %%t2522 '(each+)) (call-with-values (lambda () (%%match-each+2485 %%e2517 (vector-ref %%p2518 1) (vector-ref %%p2518 2) (vector-ref %%p2518 3) %%w2519 %%r2520)) (lambda (%%xr*2524 %%y-pat2525 %%r2526) (if %%r2526 (if (null? %%y-pat2525) (if (null? %%xr*2524) (%%match-empty2487 (vector-ref %%p2518 1) %%r2526) (%%combine2488 %%xr*2524 %%r2526)) #f) #f))) (if (memv %%t2522 '(atom)) (if (equal? (vector-ref %%p2518 1) (%%strip451 %%e2517 %%w2519)) %%r2520 #f) (if (memv %%t2522 '(vector)) (if (vector? %%e2517) (%%match2490 (vector->list %%e2517) (vector-ref %%p2518 1) %%w2519 %%r2520) #f) (void))))))) (vector-ref %%p2518 0))))))) (%%match2490 (lambda (%%e2527 %%p2528 %%w2529 %%r2530) (if (not %%r2530) #f (if (eq? %%p2528 'any) (cons (%%wrap361 %%e2527 %%w2529) %%r2530) (if (%%syntax?37 %%e2527) (%%match*2489 ((lambda (%%e2531) (if (annotation? %%e2531) (annotation-expression %%e2531) %%e2531)) (%%syntax-expression38 %%e2527)) %%p2528 (%%join-wraps340 %%w2529 (%%syntax-wrap39 %%e2527)) %%r2530) (%%match*2489 ((lambda (%%e2532) (if (annotation? %%e2532) (annotation-expression %%e2532) %%e2532)) %%e2527) %%p2528 %%w2529 %%r2530))))))) (set! $syntax-dispatch (lambda (%%e2533 %%p2534) (if (eq? %%p2534 'any) (list %%e2533) (if (%%syntax?37 %%e2533) (%%match*2489 ((lambda (%%e2535) (if (annotation? %%e2535) (annotation-expression %%e2535) %%e2535)) (%%syntax-expression38 %%e2533)) %%p2534 (%%syntax-wrap39 %%e2533) '()) (%%match*2489 ((lambda (%%e2536) (if (annotation? %%e2536) (annotation-expression %%e2536) %%e2536)) %%e2533) %%p2534 '(()) '())))))))) (%%global-extend219 'macro 'with-syntax (lambda (%%x2537) ((lambda (%%tmp2538) ((lambda (%%tmp2539) (if %%tmp2539 (apply (lambda (%%_2540 %%e12541 %%e22542) (cons '#structure(#4# #(#5# begin #6# 1118244) (#7# #structure(#9# #(_ e1 e2) #(#7# #7# #7#) #("i" "i" "i")) . #27=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons %%e12541 %%e22542))) %%tmp2539) ((lambda (%%tmp2544) (if %%tmp2544 (apply (lambda (%%_2545 %%out2546 %%in2547 %%e12548 %%e22549) (list '#structure(#4# #(#5# syntax-case #6# 1118246) #28=(#7# #structure(#9# #(_ out in e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #27#)) %%in2547 '#structure(#4# #(#5# () #6# 2101286) #28#) (list %%out2546 (cons '#structure(#4# #(#5# begin #6# 2691110) #28#) (cons %%e12548 %%e22549))))) %%tmp2544) ((lambda (%%tmp2551) (if %%tmp2551 (apply (lambda (%%_2552 %%out2553 %%in2554 %%e12555 %%e22556) (list '#structure(#4# #(#5# syntax-case #6# 1118248) #29=(#7# #structure(#9# #(_ out in e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #27#)) (cons '#structure(#4# #(#5# list #6# 1970216) #29#) %%in2554) '#structure(#4# #(#5# () #6# 2822184) #29#) (list %%out2553 (cons '#structure(#4# #(#5# begin #6# 1970217) #29#) (cons %%e12555 %%e22556))))) %%tmp2551) (syntax-error %%tmp2538))) ($syntax-dispatch %%tmp2538 '(any #(each (any any)) any . each-any))))) ($syntax-dispatch %%tmp2538 '(any ((any any)) any . each-any))))) ($syntax-dispatch %%tmp2538 '(any () any . each-any)))) %%x2537))) (%%global-extend219 'macro 'with-implicit (lambda (%%x2560) ((lambda (%%tmp2561) ((lambda (%%tmp2562) (if (if %%tmp2562 (apply (lambda (%%dummy2563 %%tid2564 %%id2565 %%e12566 %%e22567) (andmap identifier? (cons %%tid2564 %%id2565))) %%tmp2562) #f) (apply (lambda (%%dummy2569 %%tid2570 %%id2571 %%e12572 %%e22573) (list '#structure(#4# #(#5# begin #6# 462896) #30=(#7# #structure(#9# #(dummy tid id e1 e2) #((#31="m" . #11#) #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #((#31# . #11#)) #("i")) #10# . #12#)) (list '#structure(#4# #(#5# unless #6# 593969) #30#) (list '#structure(#4# #(#5# identifier? #6# 1118257) #30#) (list '#structure(#4# #(#5# syntax #6# 1970225) #30#) %%tid2570)) (cons '#structure(#4# #(#5# syntax-error #6# 1118258) #30#) (cons (list '#structure(#4# #(#5# syntax #6# 2035762) #30#) %%tid2570) '#structure(#4# (#(#5# "non-identifier with-implicit template" #6# 2822194)) #30#)))) (cons '#structure(#4# #(#5# with-syntax #6# 593971) #30#) (cons (map (lambda (%%tmp2574) (list %%tmp2574 (list '#structure(#4# #(#5# datum->syntax #6# 1773619) #30#) (list '#structure(#4# #(#5# syntax #6# 2756659) #30#) %%tid2570) (list '#structure(#4# #(#5# quote #6# 3543091) #30#) %%tmp2574)))) %%id2571) (cons %%e12572 %%e22573))))) %%tmp2562) (syntax-error %%tmp2561))) ($syntax-dispatch %%tmp2561 '(any (any . each-any) any . each-any)))) %%x2560))) (%%global-extend219 'macro 'datum (lambda (%%x2576) ((lambda (%%tmp2577) ((lambda (%%tmp2578) (if %%tmp2578 (apply (lambda (%%dummy2579 %%x2580) (list '#structure(#4# #(#5# syntax->datum #6# 856121) #32=(#7# #structure(#9# #(dummy x) #((#33="m" . #11#) #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #((#33# . #11#)) #("i")) #10# . #12#)) (list '#structure(#4# #(#5# syntax #6# 1839161) #32#) %%x2580))) %%tmp2578) (syntax-error %%tmp2577))) ($syntax-dispatch %%tmp2577 '(any any)))) %%x2576))) (%%global-extend219 'macro 'syntax-rules (lambda (%%x2581) (letrec ((%%clause2582 (lambda (%%y2583) ((lambda (%%tmp2584) ((lambda (%%tmp2585) (if %%tmp2585 (apply (lambda (%%keyword2586 %%pattern2587 %%template2588) (list (cons '#structure(#4# #(#5# dummy #6# 1445954) #34=(#7# #structure(#9# #(keyword pattern template) #(#7# #7# #7#) #("i" "i" "i")) . #35=(#structure(#9# () () ()) #structure(#9# #(y) #(#7#) #("i")) . #36=(#structure(#9# (clause) (#7#) ("i")) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#)))) %%pattern2587) (list '#structure(#4# #(#5# syntax #6# 2625602) #34#) %%template2588))) %%tmp2585) ((lambda (%%tmp2589) (if %%tmp2589 (apply (lambda (%%keyword2590 %%pattern2591 %%fender2592 %%template2593) (list (cons '#structure(#4# #(#5# dummy #6# 1445956) #37=(#7# #structure(#9# #(keyword pattern fender template) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #35#)) %%pattern2591) %%fender2592 (list '#structure(#4# #(#5# syntax #6# 3084356) #37#) %%template2593))) %%tmp2589) ((lambda (%%_2594) (syntax-error %%x2581)) %%tmp2584))) ($syntax-dispatch %%tmp2584 '((any . any) any any))))) ($syntax-dispatch %%tmp2584 '((any . any) any)))) %%y2583)))) ((lambda (%%tmp2595) ((lambda (%%tmp2596) (if (if %%tmp2596 (apply (lambda (%%_2597 %%k2598 %%cl2599) (andmap identifier? %%k2598)) %%tmp2596) #f) (apply (lambda (%%_2601 %%k2602 %%cl2603) ((lambda (%%tmp2604) ((lambda (%%tmp2605) (if %%tmp2605 (apply (lambda (%%cl2606) (list '#structure(#4# #(#5# lambda #6# 1970250) #38=(#7# #structure(#9# #(cl) #(#7#) #("i")) #structure(#9# #(_ k cl) #(#7# #7# #7#) #("i" "i" "i")) . #36#)) '#structure(#4# #(#5# (#(#5# x #6# 2494538)) #6# 2429002) #38#) (cons '#structure(#4# #(#5# syntax-case #6# 2756682) #38#) (cons '#structure(#4# #(#5# x #6# 3543114) #38#) (cons %%k2602 %%cl2606))))) %%tmp2605) (syntax-error %%tmp2604))) ($syntax-dispatch %%tmp2604 'each-any))) (map %%clause2582 %%cl2603))) %%tmp2596) (syntax-error %%tmp2595))) ($syntax-dispatch %%tmp2595 '(any each-any . each-any)))) %%x2581)))) (%%global-extend219 'macro 'or (lambda (%%x2610) ((lambda (%%tmp2611) ((lambda (%%tmp2612) (if %%tmp2612 (apply (lambda (%%_2613) '#structure(#4# #(#5# #f #6# 1314896) (#7# #structure(#9# #(_) #(#7#) #("i")) . #39=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#)))) %%tmp2612) ((lambda (%%tmp2614) (if %%tmp2614 (apply (lambda (%%_2615 %%e2616) %%e2616) %%tmp2614) ((lambda (%%tmp2617) (if %%tmp2617 (apply (lambda (%%_2618 %%e12619 %%e22620 %%e32621) (list '#structure(#4# #(#5# let #6# 1118291) #40=(#7# #structure(#9# #(_ e1 e2 e3) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #39#)) (list (list '#structure(#4# #(#5# t #6# 1511507) #40#) %%e12619)) (list '#structure(#4# #(#5# if #6# 2035795) #40#) '#structure(#4# #(#5# t #6# 2232403) #40#) '#structure(#4# #(#5# t #6# 2363475) #40#) (cons '#structure(#4# #(#5# or #6# 2560083) #40#) (cons %%e22620 %%e32621))))) %%tmp2617) (syntax-error %%tmp2611))) ($syntax-dispatch %%tmp2611 '(any any any . each-any))))) ($syntax-dispatch %%tmp2611 '(any any))))) ($syntax-dispatch %%tmp2611 '(any)))) %%x2610))) (%%global-extend219 'macro 'and (lambda (%%x2623) ((lambda (%%tmp2624) ((lambda (%%tmp2625) (if %%tmp2625 (apply (lambda (%%_2626 %%e12627 %%e22628 %%e32629) (cons '#structure(#4# #(#5# if #6# 2232409) #41=(#7# #structure(#9# #(_ e1 e2 e3) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #42=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons %%e12627 (cons (cons '#structure(#4# #(#5# and #6# 2691161) #41#) (cons %%e22628 %%e32629)) '#structure(#4# (#(#5# #f #6# 3674201)) #41#))))) %%tmp2625) ((lambda (%%tmp2631) (if %%tmp2631 (apply (lambda (%%_2632 %%e2633) %%e2633) %%tmp2631) ((lambda (%%tmp2634) (if %%tmp2634 (apply (lambda (%%_2635) '#structure(#4# #(#5# #t #6# 1314907) (#7# #structure(#9# #(_) #(#7#) #("i")) . #42#))) %%tmp2634) (syntax-error %%tmp2624))) ($syntax-dispatch %%tmp2624 '(any))))) ($syntax-dispatch %%tmp2624 '(any any))))) ($syntax-dispatch %%tmp2624 '(any any any . each-any)))) %%x2623))) (%%global-extend219 'macro 'let (lambda (%%x2636) ((lambda (%%tmp2637) ((lambda (%%tmp2638) (if (if %%tmp2638 (apply (lambda (%%_2639 %%x2640 %%v2641 %%e12642 %%e22643) (andmap identifier? %%x2640)) %%tmp2638) #f) (apply (lambda (%%_2645 %%x2646 %%v2647 %%e12648 %%e22649) (cons (cons '#structure(#4# #(#5# lambda #6# 1183843) (#7# #structure(#9# #(_ x v e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #43=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons %%x2646 (cons %%e12648 %%e22649))) %%v2647)) %%tmp2638) ((lambda (%%tmp2653) (if (if %%tmp2653 (apply (lambda (%%_2654 %%f2655 %%x2656 %%v2657 %%e12658 %%e22659) (andmap identifier? (cons %%f2655 %%x2656))) %%tmp2653) #f) (apply (lambda (%%_2661 %%f2662 %%x2663 %%v2664 %%e12665 %%e22666) (cons (list '#structure(#4# #(#5# letrec #6# 1183846) #44=(#7# #structure(#9# #(_ f x v e1 e2) #(#7# #7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i" "i")) . #43#)) (list (list %%f2662 (cons '#structure(#4# #(#5# lambda #6# 1970278) #44#) (cons %%x2663 (cons %%e12665 %%e22666))))) %%f2662) %%v2664)) %%tmp2653) (syntax-error %%tmp2637))) ($syntax-dispatch %%tmp2637 '(any any #(each (any any)) any . each-any))))) ($syntax-dispatch %%tmp2637 '(any #(each (any any)) any . each-any)))) %%x2636))) (%%global-extend219 'macro 'let* (lambda (%%x2670) ((lambda (%%tmp2671) ((lambda (%%tmp2672) (if (if %%tmp2672 (apply (lambda (%%let*2673 %%x2674 %%v2675 %%e12676 %%e22677) (andmap identifier? %%x2674)) %%tmp2672) #f) (apply (lambda (%%let*2679 %%x2680 %%v2681 %%e12682 %%e22683) ((letrec ((%%f2684 (lambda (%%bindings2685) (if (null? %%bindings2685) (cons '#structure(#4# #(#5# let #6# 1511537) #45=(#7# . #46=(#structure(#9# () () ()) #structure(#9# #(bindings) #(#7#) #("i")) #structure(#9# #(f) #(#7#) #("i")) #structure(#9# #(let* x v e1 e2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons '#structure(#4# #(#5# () #6# 1773681) #45#) (cons %%e12682 %%e22683))) ((lambda (%%tmp2687) ((lambda (%%tmp2688) (if %%tmp2688 (apply (lambda (%%body2689 %%binding2690) (list '#structure(#4# #(#5# let #6# 2363508) (#7# #structure(#9# #(body binding) #(#7# #7#) #("i" "i")) . #46#)) (list %%binding2690) %%body2689)) %%tmp2688) (syntax-error %%tmp2687))) ($syntax-dispatch %%tmp2687 '(any any)))) (list (%%f2684 (cdr %%bindings2685)) (car %%bindings2685))))))) %%f2684) (map list %%x2680 %%v2681))) %%tmp2672) (syntax-error %%tmp2671))) ($syntax-dispatch %%tmp2671 '(any #(each (any any)) any . each-any)))) %%x2670))) (%%global-extend219 'macro 'cond (lambda (%%x2693) ((lambda (%%tmp2694) ((lambda (%%tmp2695) (if %%tmp2695 (apply (lambda (%%_2696 %%m12697 %%m22698) ((letrec ((%%f2699 (lambda (%%clause2700 %%clauses2701) (if (null? %%clauses2701) ((lambda (%%tmp2702) ((lambda (%%tmp2703) (if %%tmp2703 (apply (lambda (%%e12704 %%e22705) (cons '#structure(#4# #(#5# begin #6# 2822270) (#7# #structure(#9# #(e1 e2) #(#7# #7#) #("i" "i")) . #47=(#structure(#9# () () ()) #structure(#9# #(clause clauses) #(#7# #7#) #("i" "i")) #structure(#9# #(f) #(#7#) #("i")) #structure(#9# #(_ m1 m2) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (cons %%e12704 %%e22705))) %%tmp2703) ((lambda (%%tmp2707) (if %%tmp2707 (apply (lambda (%%e02708) (cons '#structure(#4# #(#5# let #6# 2035839) #48=(#7# #structure(#9# #(e0) #(#7#) #("i")) . #47#)) (cons (list (list '#structure(#4# #(#5# t #6# 2429055) #48#) %%e02708)) '#structure(#4# (#(#5# (#(#5# if #6# 2953343) #(#5# t #6# 3149951) #(#5# t #6# 3281023)) #6# 2887807)) #48#)))) %%tmp2707) ((lambda (%%tmp2709) (if %%tmp2709 (apply (lambda (%%e02710 %%e12711) (list '#structure(#4# #(#5# let #6# 2429056) #49=(#7# #structure(#9# #(e0 e1) #(#7# #7#) #("i" "i")) . #47#)) (list (list '#structure(#4# #(#5# t #6# 2822272) #49#) %%e02710)) (list '#structure(#4# #(#5# if #6# 3346560) #49#) '#structure(#4# #(#5# t #6# 3543168) #49#) (cons %%e12711 '#structure(#4# (#(#5# t #6# 3936384)) #49#))))) %%tmp2709) ((lambda (%%tmp2712) (if %%tmp2712 (apply (lambda (%%e02713 %%e12714 %%e22715) (list '#structure(#4# #(#5# if #6# 2691201) #50=(#7# #structure(#9# #(e0 e1 e2) #(#7# #7# #7#) #("i" "i" "i")) . #47#)) %%e02713 (cons '#structure(#4# #(#5# begin #6# 3149953) #50#) (cons %%e12714 %%e22715)))) %%tmp2712) ((lambda (%%_2717) (syntax-error %%x2693)) %%tmp2702))) ($syntax-dispatch %%tmp2702 '(any any . each-any))))) ($syntax-dispatch %%tmp2702 '(any #(free-id #structure(#4# #(#5# => #6# 1380480) #51=(#7# . #47#))) any))))) ($syntax-dispatch %%tmp2702 '(any))))) ($syntax-dispatch %%tmp2702 '(#(free-id #structure(#4# #(#5# else #6# 1183870) #51#)) any . each-any)))) %%clause2700) ((lambda (%%tmp2718) ((lambda (%%rest2719) ((lambda (%%tmp2720) ((lambda (%%tmp2721) (if %%tmp2721 (apply (lambda (%%e02722) (list '#structure(#4# #(#5# let #6# 2887813) #52=(#7# #structure(#9# #(e0) #(#7#) #("i")) . #53=(#structure(#9# #(rest) #(#7#) #("i")) . #47#))) (list (list '#structure(#4# #(#5# t #6# 3281029) #52#) %%e02722)) (list '#structure(#4# #(#5# if #6# 3805317) #52#) '#structure(#4# #(#5# t #6# 4001925) #52#) '#structure(#4# #(#5# t #6# 4132997) #52#) %%rest2719))) %%tmp2721) ((lambda (%%tmp2723) (if %%tmp2723 (apply (lambda (%%e02724 %%e12725) (list '#structure(#4# #(#5# let #6# 3281030) #54=(#7# #structure(#9# #(e0 e1) #(#7# #7#) #("i" "i")) . #53#)) (list (list '#structure(#4# #(#5# t #6# 3674246) #54#) %%e02724)) (list '#structure(#4# #(#5# if #6# 4198534) #54#) '#structure(#4# #(#5# t #6# 4395142) #54#) (cons %%e12725 '#structure(#4# (#(#5# t #6# 4788358)) #54#)) %%rest2719))) %%tmp2723) ((lambda (%%tmp2726) (if %%tmp2726 (apply (lambda (%%e02727 %%e12728 %%e22729) (list '#structure(#4# #(#5# if #6# 3543175) #55=(#7# #structure(#9# #(e0 e1 e2) #(#7# #7# #7#) #("i" "i" "i")) . #53#)) %%e02727 (cons '#structure(#4# #(#5# begin #6# 4001927) #55#) (cons %%e12728 %%e22729)) %%rest2719)) %%tmp2726) ((lambda (%%_2731) (syntax-error %%x2693)) %%tmp2720))) ($syntax-dispatch %%tmp2720 '(any any . each-any))))) ($syntax-dispatch %%tmp2720 '(any #(free-id #structure(#4# #(#5# => #6# 2232454) (#7# . #53#))) any))))) ($syntax-dispatch %%tmp2720 '(any)))) %%clause2700)) %%tmp2718)) (%%f2699 (car %%clauses2701) (cdr %%clauses2701))))))) %%f2699) %%m12697 %%m22698)) %%tmp2695) (syntax-error %%tmp2694))) ($syntax-dispatch %%tmp2694 '(any any . each-any)))) %%x2693))) (%%global-extend219 'macro 'do (lambda (%%orig-x2733) ((lambda (%%tmp2734) ((lambda (%%tmp2735) (if %%tmp2735 (apply (lambda (%%_2736 %%var2737 %%init2738 %%step2739 %%e02740 %%e12741 %%c2742) ((lambda (%%tmp2743) ((lambda (%%tmp2744) (if %%tmp2744 (apply (lambda (%%step2745) ((lambda (%%tmp2746) ((lambda (%%tmp2747) (if %%tmp2747 (apply (lambda () (list '#structure(#4# #(#5# let #6# 2363544) #56=(#7# . #57=(#structure(#9# #(step) #(#7#) #("i")) #structure(#9# #(_ var init step e0 e1 c) #(#7# #7# #7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(orig-x) #(#7#) #("i")) #10# . #12#))) '#structure(#4# #(#5# do #6# 2625688) #56#) (map list %%var2737 %%init2738) (list '#structure(#4# #(#5# if #6# 2494617) #56#) (list '#structure(#4# #(#5# not #6# 2756761) #56#) %%e02740) (cons '#structure(#4# #(#5# begin #6# 2756762) #56#) (append %%c2742 (list (cons '#structure(#4# #(#5# do #6# 3608730) #56#) %%step2745))))))) %%tmp2747) ((lambda (%%tmp2752) (if %%tmp2752 (apply (lambda (%%e12753 %%e22754) (list '#structure(#4# #(#5# let #6# 2166940) #58=(#7# #structure(#9# #(e1 e2) #(#7# #7#) #("i" "i")) . #57#)) '#structure(#4# #(#5# do #6# 2429084) #58#) (map list %%var2737 %%init2738) (list '#structure(#4# #(#5# if #6# 2298013) #58#) %%e02740 (cons '#structure(#4# #(#5# begin #6# 2560158) #58#) (cons %%e12753 %%e22754)) (cons '#structure(#4# #(#5# begin #6# 2560159) #58#) (append %%c2742 (list (cons '#structure(#4# #(#5# do #6# 3412127) #58#) %%step2745))))))) %%tmp2752) (syntax-error %%tmp2746))) ($syntax-dispatch %%tmp2746 '(any . each-any))))) ($syntax-dispatch %%tmp2746 '()))) %%e12741)) %%tmp2744) (syntax-error %%tmp2743))) ($syntax-dispatch %%tmp2743 'each-any))) (map (lambda (%%v2761 %%s2762) ((lambda (%%tmp2763) ((lambda (%%tmp2764) (if %%tmp2764 (apply (lambda () %%v2761) %%tmp2764) ((lambda (%%tmp2765) (if %%tmp2765 (apply (lambda (%%e2766) %%e2766) %%tmp2765) ((lambda (%%_2767) (syntax-error %%orig-x2733)) %%tmp2763))) ($syntax-dispatch %%tmp2763 '(any))))) ($syntax-dispatch %%tmp2763 '()))) %%s2762)) %%var2737 %%step2739))) %%tmp2735) (syntax-error %%tmp2734))) ($syntax-dispatch %%tmp2734 '(any #(each (any any . any)) (any . each-any) . each-any)))) %%orig-x2733))) (%%global-extend219 'macro 'quasiquote ((lambda () (letrec ((%%quasi2770 (lambda (%%p2777 %%lev2778) ((lambda (%%tmp2779) ((lambda (%%tmp2780) (if %%tmp2780 (apply (lambda (%%p2781) (if (= %%lev2778 0) (list '#structure(#4# #(#5# "value" #6# 1118376) #59=(#7# #structure(#9# #(p) #(#7#) #("i")) . #60=(#structure(#9# () () ()) #structure(#9# #(p lev) #(#7# #7#) #("i" "i")) #61=#structure(#9# (emit quasivector quasilist* quasiappend quasicons vquasi quasi) (#7# #7# #7# #7# #7# #7# #7#) ("i" "i" "i" "i" "i" "i" "i")) . #62=(#10# . #12#)))) %%p2781) (%%quasicons2772 '#structure(#4# #(#5# (#(#5# "quote" #6# 1839273) #(#5# unquote #6# 2363561)) #6# 1773737) #59#) (%%quasi2770 (list %%p2781) (- %%lev2778 1))))) %%tmp2780) ((lambda (%%tmp2782) (if %%tmp2782 (apply (lambda (%%p2783) (%%quasicons2772 '#structure(#4# #(#5# (#(#5# "quote" #6# 2560170) #(#5# quasiquote #6# 3084458)) #6# 2494634) (#7# #structure(#9# #(p) #(#7#) #("i")) . #60#)) (%%quasi2770 (list %%p2783) (+ %%lev2778 1)))) %%tmp2782) ((lambda (%%tmp2784) (if %%tmp2784 (apply (lambda (%%p2785 %%q2786) ((lambda (%%tmp2787) ((lambda (%%tmp2788) (if %%tmp2788 (apply (lambda (%%p2789) (if (= %%lev2778 0) (%%quasilist*2774 (map (lambda (%%tmp2790) (list '#structure(#4# #(#5# "value" #6# 2166959) #63=(#7# #structure(#9# #(p) #(#7#) #("i")) . #64=(#structure(#9# #(p q) #(#7# #7#) #("i" "i")) . #60#))) %%tmp2790)) %%p2789) (%%quasi2770 %%q2786 %%lev2778)) (%%quasicons2772 (%%quasicons2772 '#structure(#4# #(#5# (#(#5# "quote" #6# 2101425) #(#5# unquote #6# 2625713)) #6# 2035889) #63#) (%%quasi2770 %%p2789 (- %%lev2778 1))) (%%quasi2770 %%q2786 %%lev2778)))) %%tmp2788) ((lambda (%%tmp2792) (if %%tmp2792 (apply (lambda (%%p2793) (if (= %%lev2778 0) (%%quasiappend2773 (map (lambda (%%tmp2794) (list '#structure(#4# #(#5# "value" #6# 2232501) #65=(#7# #structure(#9# #(p) #(#7#) #("i")) . #64#)) %%tmp2794)) %%p2793) (%%quasi2770 %%q2786 %%lev2778)) (%%quasicons2772 (%%quasicons2772 '#structure(#4# #(#5# (#(#5# "quote" #6# 2101431) #(#5# unquote-splicing #6# 2625719)) #6# 2035895) #65#) (%%quasi2770 %%p2793 (- %%lev2778 1))) (%%quasi2770 %%q2786 %%lev2778)))) %%tmp2792) ((lambda (%%_2796) (%%quasicons2772 (%%quasi2770 %%p2785 %%lev2778) (%%quasi2770 %%q2786 %%lev2778))) %%tmp2787))) ($syntax-dispatch %%tmp2787 '(#(free-id #structure(#4# #(#5# unquote-splicing #6# 921779) #66=(#7# . #64#))) . each-any))))) ($syntax-dispatch %%tmp2787 '(#(free-id #structure(#4# #(#5# unquote #6# 921773) #66#)) . each-any)))) %%p2785)) %%tmp2784) ((lambda (%%tmp2797) (if %%tmp2797 (apply (lambda (%%x2798) (%%quasivector2775 (%%vquasi2771 %%x2798 %%lev2778))) %%tmp2797) ((lambda (%%p2800) (list '#structure(#4# #(#5# "quote" #6# 987323) (#7# #structure(#9# #(p) #(#7#) #("i")) . #60#)) %%p2800)) %%tmp2779))) ($syntax-dispatch %%tmp2779 '#(vector each-any))))) ($syntax-dispatch %%tmp2779 '(any . any))))) ($syntax-dispatch %%tmp2779 '(#(free-id #structure(#4# #(#5# quasiquote #6# 725162) #67=(#7# . #60#))) any))))) ($syntax-dispatch %%tmp2779 '(#(free-id #structure(#4# #(#5# unquote #6# 725158) #67#)) any)))) %%p2777))) (%%vquasi2771 (lambda (%%p2801 %%lev2802) ((lambda (%%tmp2803) ((lambda (%%tmp2804) (if %%tmp2804 (apply (lambda (%%p2805 %%q2806) ((lambda (%%tmp2807) ((lambda (%%tmp2808) (if %%tmp2808 (apply (lambda (%%p2809) (if (= %%lev2802 0) (%%quasilist*2774 (map (lambda (%%tmp2810) (list '#structure(#4# #(#5# "value" #6# 2166978) #68=(#7# #structure(#9# #(p) #(#7#) #("i")) . #69=(#structure(#9# #(p q) #(#7# #7#) #("i" "i")) . #70=(#structure(#9# () () ()) #structure(#9# #(p lev) #(#7# #7#) #("i" "i")) #61# . #62#)))) %%tmp2810)) %%p2809) (%%vquasi2771 %%q2806 %%lev2802)) (%%quasicons2772 (%%quasicons2772 '#structure(#4# #(#5# (#(#5# "quote" #6# 2101444) #(#5# unquote #6# 2625732)) #6# 2035908) #68#) (%%quasi2770 %%p2809 (- %%lev2802 1))) (%%vquasi2771 %%q2806 %%lev2802)))) %%tmp2808) ((lambda (%%tmp2812) (if %%tmp2812 (apply (lambda (%%p2813) (if (= %%lev2802 0) (%%quasiappend2773 (map (lambda (%%tmp2814) (list '#structure(#4# #(#5# "value" #6# 2232520) #71=(#7# #structure(#9# #(p) #(#7#) #("i")) . #69#)) %%tmp2814)) %%p2813) (%%vquasi2771 %%q2806 %%lev2802)) (%%quasicons2772 (%%quasicons2772 '#structure(#4# #(#5# (#(#5# "quote" #6# 1446091) #(#5# unquote-splicing #6# 1970379)) #6# 1380555) #71#) (%%quasi2770 %%p2813 (- %%lev2802 1))) (%%vquasi2771 %%q2806 %%lev2802)))) %%tmp2812) ((lambda (%%_2816) (%%quasicons2772 (%%quasi2770 %%p2805 %%lev2802) (%%vquasi2771 %%q2806 %%lev2802))) %%tmp2807))) ($syntax-dispatch %%tmp2807 '(#(free-id #structure(#4# #(#5# unquote-splicing #6# 921798) #72=(#7# . #69#))) . each-any))))) ($syntax-dispatch %%tmp2807 '(#(free-id #structure(#4# #(#5# unquote #6# 921792) #72#)) . each-any)))) %%p2805)) %%tmp2804) ((lambda (%%tmp2817) (if %%tmp2817 (apply (lambda () '#structure(#4# #(#5# (#(#5# "quote" #6# 1052879) #(#5# () #6# 1577167)) #6# 987343) (#7# . #70#))) %%tmp2817) (syntax-error %%tmp2803))) ($syntax-dispatch %%tmp2803 '())))) ($syntax-dispatch %%tmp2803 '(any . any)))) %%p2801))) (%%quasicons2772 (lambda (%%x2818 %%y2819) ((lambda (%%tmp2820) ((lambda (%%tmp2821) (if %%tmp2821 (apply (lambda (%%x2822 %%y2823) ((lambda (%%tmp2824) ((lambda (%%tmp2825) (if %%tmp2825 (apply (lambda (%%dy2826) ((lambda (%%tmp2827) ((lambda (%%tmp2828) (if %%tmp2828 (apply (lambda (%%dx2829) (list '#structure(#4# #(#5# "quote" #6# 2756821) (#7# #structure(#9# #(dx) #(#7#) #("i")) . #73=(#structure(#9# #(dy) #(#7#) #("i")) . #74=(#structure(#9# #(x y) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(x y) #(#7# #7#) #("i" "i")) #61# . #62#)))) (cons %%dx2829 %%dy2826))) %%tmp2828) ((lambda (%%_2830) (if (null? %%dy2826) (list '#structure(#4# #(#5# "list" #6# 3150038) #75=(#7# #structure(#9# #(_) #(#7#) #("i")) . #73#)) %%x2822) (list '#structure(#4# #(#5# "list*" #6# 4002006) #75#) %%x2822 %%y2823))) %%tmp2827))) ($syntax-dispatch %%tmp2827 '(#(atom "quote") any)))) %%x2822)) %%tmp2825) ((lambda (%%tmp2831) (if %%tmp2831 (apply (lambda (%%stuff2832) (cons '#structure(#4# #(#5# "list" #6# 2822359) (#7# #structure(#9# #(stuff) #(#7#) #("i")) . #74#)) (cons %%x2822 %%stuff2832))) %%tmp2831) ((lambda (%%tmp2833) (if %%tmp2833 (apply (lambda (%%stuff2834) (cons '#structure(#4# #(#5# "list*" #6# 2887896) (#7# #structure(#9# #(stuff) #(#7#) #("i")) . #74#)) (cons %%x2822 %%stuff2834))) %%tmp2833) ((lambda (%%_2835) (list '#structure(#4# #(#5# "list*" #6# 1839321) (#7# #structure(#9# #(_) #(#7#) #("i")) . #74#)) %%x2822 %%y2823)) %%tmp2824))) ($syntax-dispatch %%tmp2824 '(#(atom "list*") . any))))) ($syntax-dispatch %%tmp2824 '(#(atom "list") . any))))) ($syntax-dispatch %%tmp2824 '(#(atom "quote") any)))) %%y2823)) %%tmp2821) (syntax-error %%tmp2820))) ($syntax-dispatch %%tmp2820 '(any any)))) (list %%x2818 %%y2819)))) (%%quasiappend2773 (lambda (%%x2836 %%y2837) ((lambda (%%tmp2838) ((lambda (%%tmp2839) (if %%tmp2839 (apply (lambda () (if (null? %%x2836) '#structure(#4# #(#5# (#(#5# "quote" #6# 1642718) #(#5# () #6# 2167006)) #6# 1577182) (#7# . #76=(#structure(#9# () () ()) #structure(#9# #(x y) #(#7# #7#) #("i" "i")) #61# . #62#))) (if (null? (cdr %%x2836)) (car %%x2836) ((lambda (%%tmp2840) ((lambda (%%tmp2841) (if %%tmp2841 (apply (lambda (%%p2842) (cons '#structure(#4# #(#5# "append" #6# 3084512) (#7# #structure(#9# #(p) #(#7#) #("i")) . #76#)) %%p2842)) %%tmp2841) (syntax-error %%tmp2840))) ($syntax-dispatch %%tmp2840 'each-any))) %%x2836)))) %%tmp2839) ((lambda (%%_2844) (if (null? %%x2836) %%y2837 ((lambda (%%tmp2845) ((lambda (%%tmp2846) (if %%tmp2846 (apply (lambda (%%p2847 %%y2848) (cons '#structure(#4# #(#5# "append" #6# 3477732) (#7# #structure(#9# #(p y) #(#7# #7#) #("i" "i")) #structure(#9# #(_) #(#7#) #("i")) . #76#)) (append %%p2847 (list %%y2848)))) %%tmp2846) (syntax-error %%tmp2845))) ($syntax-dispatch %%tmp2845 '(each-any any)))) (list %%x2836 %%y2837)))) %%tmp2838))) ($syntax-dispatch %%tmp2838 '(#(atom "quote") ())))) %%y2837))) (%%quasilist*2774 (lambda (%%x2850 %%y2851) ((letrec ((%%f2852 (lambda (%%x2853) (if (null? %%x2853) %%y2851 (%%quasicons2772 (car %%x2853) (%%f2852 (cdr %%x2853))))))) %%f2852) %%x2850))) (%%quasivector2775 (lambda (%%x2854) ((lambda (%%tmp2855) ((lambda (%%tmp2856) (if %%tmp2856 (apply (lambda (%%x2857) (list '#structure(#4# #(#5# "quote" #6# 2035948) (#7# #structure(#9# #(x) #(#7#) #("i")) . #77=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #61# . #62#))) (list->vector %%x2857))) %%tmp2856) ((lambda (%%_2859) ((letrec ((%%f2860 (lambda (%%y2861 %%k2862) ((lambda (%%tmp2863) ((lambda (%%tmp2864) (if %%tmp2864 (apply (lambda (%%y2865) (%%k2862 (map (lambda (%%tmp2866) (list '#structure(#4# #(#5# "quote" #6# 2625776) (#7# #structure(#9# #(y) #(#7#) #("i")) . #78=(#structure(#9# () () ()) #structure(#9# #(y k) #(#7# #7#) #("i" "i")) #structure(#9# #(f) #(#7#) #("i")) . #79=(#structure(#9# #(_) #(#7#) #("i")) . #77#)))) %%tmp2866)) %%y2865))) %%tmp2864) ((lambda (%%tmp2867) (if %%tmp2867 (apply (lambda (%%y2868) (%%k2862 %%y2868)) %%tmp2867) ((lambda (%%tmp2870) (if %%tmp2870 (apply (lambda (%%y2871 %%z2872) (%%f2860 %%z2872 (lambda (%%ls2873) (%%k2862 (append %%y2871 %%ls2873))))) %%tmp2870) ((lambda (%%else2875) ((lambda (%%tmp2876) ((lambda (%%t12877) (list '#structure(#4# #(#5# "list->vector" #6# 1511667) (#7# #structure(#9# #(t1) #(("m" . #80=(tmp))) #("i")) #structure(#9# #(else) #(#7#) #("i")) . #78#)) %%t12877)) %%tmp2876)) %%x2854)) %%tmp2863))) ($syntax-dispatch %%tmp2863 '(#(atom "list*") . #(each+ any (any) ())))))) ($syntax-dispatch %%tmp2863 '(#(atom "list") . each-any))))) ($syntax-dispatch %%tmp2863 '(#(atom "quote") each-any)))) %%y2861)))) %%f2860) %%x2854 (lambda (%%ls2878) ((lambda (%%tmp2879) ((lambda (%%tmp2880) (if %%tmp2880 (apply (lambda (%%t22881) (cons '#structure(#4# #(#5# "vector" #6# 2822382) (#7# #structure(#9# #(t2) #(("m" . #80#)) #("i")) #structure(#9# () () ()) #structure(#9# #(ls) #(#7#) #("i")) . #79#)) %%t22881)) %%tmp2880) (syntax-error %%tmp2879))) ($syntax-dispatch %%tmp2879 'each-any))) %%ls2878)))) %%tmp2855))) ($syntax-dispatch %%tmp2855 '(#(atom "quote") each-any)))) %%x2854))) (%%emit2776 (lambda (%%x2883) ((lambda (%%tmp2884) ((lambda (%%tmp2885) (if %%tmp2885 (apply (lambda (%%x2886) (list '#structure(#4# #(#5# quote #6# 1577206) (#7# #structure(#9# #(x) #(#7#) #("i")) . #81=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #61# . #62#))) %%x2886)) %%tmp2885) ((lambda (%%tmp2887) (if %%tmp2887 (apply (lambda (%%x2888) ((lambda (%%tmp2889) ((lambda (%%tmp2890) (if %%tmp2890 (apply (lambda (%%t32891) (cons '#structure(#4# #(#5# list #6# 1839351) (#7# #structure(#9# #(t3) #(("m" . #80#)) #("i")) #structure(#9# #(x) #(#7#) #("i")) . #81#)) %%t32891)) %%tmp2890) (syntax-error %%tmp2889))) ($syntax-dispatch %%tmp2889 'each-any))) (map %%emit2776 %%x2888))) %%tmp2887) ((lambda (%%tmp2894) (if %%tmp2894 (apply (lambda (%%x2895 %%y2896) ((letrec ((%%f2897 (lambda (%%x*2898) (if (null? %%x*2898) (%%emit2776 %%y2896) ((lambda (%%tmp2899) ((lambda (%%tmp2900) (if %%tmp2900 (apply (lambda (%%t52901 %%t42902) (list '#structure(#4# #(#5# cons #6# 1249533) (#7# #structure(#9# #(t5 t4) #((#82="m" . #80#) (#82# . #80#)) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(x*) #(#7#) #("i")) #structure(#9# #(f) #(#7#) #("i")) #structure(#9# #(x y) #(#7# #7#) #("i" "i")) . #81#)) %%t52901 %%t42902)) %%tmp2900) (syntax-error %%tmp2899))) ($syntax-dispatch %%tmp2899 '(any any)))) (list (%%emit2776 (car %%x*2898)) (%%f2897 (cdr %%x*2898)))))))) %%f2897) %%x2895)) %%tmp2894) ((lambda (%%tmp2904) (if %%tmp2904 (apply (lambda (%%x2905) ((lambda (%%tmp2906) ((lambda (%%tmp2907) (if %%tmp2907 (apply (lambda (%%t62908) (cons '#structure(#4# #(#5# append #6# 1970430) (#7# #structure(#9# #(t6) #(("m" . #80#)) #("i")) #structure(#9# #(x) #(#7#) #("i")) . #81#)) %%t62908)) %%tmp2907) (syntax-error %%tmp2906))) ($syntax-dispatch %%tmp2906 'each-any))) (map %%emit2776 %%x2905))) %%tmp2904) ((lambda (%%tmp2911) (if %%tmp2911 (apply (lambda (%%x2912) ((lambda (%%tmp2913) ((lambda (%%tmp2914) (if %%tmp2914 (apply (lambda (%%t72915) (cons '#structure(#4# #(#5# vector #6# 1970431) (#7# #structure(#9# #(t7) #(("m" . #80#)) #("i")) #structure(#9# #(x) #(#7#) #("i")) . #81#)) %%t72915)) %%tmp2914) (syntax-error %%tmp2913))) ($syntax-dispatch %%tmp2913 'each-any))) (map %%emit2776 %%x2912))) %%tmp2911) ((lambda (%%tmp2918) (if %%tmp2918 (apply (lambda (%%x2919) ((lambda (%%tmp2920) ((lambda (%%t82921) (list '#structure(#4# #(#5# list->vector #6# 2101504) (#7# #structure(#9# #(t8) #(("m" . #80#)) #("i")) #structure(#9# #(x) #(#7#) #("i")) . #81#)) %%t82921)) %%tmp2920)) (%%emit2776 %%x2919))) %%tmp2918) ((lambda (%%tmp2922) (if %%tmp2922 (apply (lambda (%%x2923) %%x2923) %%tmp2922) (syntax-error %%tmp2884))) ($syntax-dispatch %%tmp2884 '(#(atom "value") any))))) ($syntax-dispatch %%tmp2884 '(#(atom "list->vector") any))))) ($syntax-dispatch %%tmp2884 '(#(atom "vector") . each-any))))) ($syntax-dispatch %%tmp2884 '(#(atom "append") . each-any))))) ($syntax-dispatch %%tmp2884 '(#(atom "list*") . #(each+ any (any) ())))))) ($syntax-dispatch %%tmp2884 '(#(atom "list") . each-any))))) ($syntax-dispatch %%tmp2884 '(#(atom "quote") any)))) %%x2883)))) (lambda (%%x2924) ((lambda (%%tmp2925) ((lambda (%%tmp2926) (if %%tmp2926 (apply (lambda (%%_2927 %%e2928) (%%emit2776 (%%quasi2770 %%e2928 0))) %%tmp2926) (syntax-error %%tmp2925))) ($syntax-dispatch %%tmp2925 '(any any)))) %%x2924)))))) (%%global-extend219 'macro 'quasisyntax (lambda (%%x2929) (letrec ((%%qs2930 (lambda (%%q2932 %%n2933 %%b*2934 %%k2935) ((lambda (%%tmp2936) ((lambda (%%tmp2937) (if %%tmp2937 (apply (lambda (%%d2938) (%%qs2930 %%d2938 (+ %%n2933 1) %%b*2934 (lambda (%%b*2939 %%dnew2940) (%%k2935 %%b*2939 (if (eq? %%dnew2940 %%d2938) %%q2932 ((lambda (%%tmp2941) ((lambda (%%d2942) (cons '#structure(#4# #(#5# quasisyntax #6# 3281185) (#7# #structure(#9# #(d) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(b* dnew) #(#7# #7#) #("i" "i")) #structure(#9# #(d) #(#7#) #("i")) . #83=(#structure(#9# () () ()) #structure(#9# #(q n b* k) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #84=(#structure(#9# (vqs qs) (#7# #7#) ("i" "i")) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#)))) %%d2942)) %%tmp2941)) %%dnew2940)))))) %%tmp2937) ((lambda (%%tmp2943) (if (if %%tmp2943 (apply (lambda (%%d2944) (not (= %%n2933 0))) %%tmp2943) #f) (apply (lambda (%%d2945) (%%qs2930 %%d2945 (- %%n2933 1) %%b*2934 (lambda (%%b*2946 %%dnew2947) (%%k2935 %%b*2946 (if (eq? %%dnew2947 %%d2945) %%q2932 ((lambda (%%tmp2948) ((lambda (%%d2949) (cons '#structure(#4# #(#5# unsyntax #6# 3281193) (#7# #structure(#9# #(d) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(b* dnew) #(#7# #7#) #("i" "i")) #structure(#9# #(d) #(#7#) #("i")) . #83#)) %%d2949)) %%tmp2948)) %%dnew2947)))))) %%tmp2943) ((lambda (%%tmp2950) (if (if %%tmp2950 (apply (lambda (%%d2951) (not (= %%n2933 0))) %%tmp2950) #f) (apply (lambda (%%d2952) (%%qs2930 %%d2952 (- %%n2933 1) %%b*2934 (lambda (%%b*2953 %%dnew2954) (%%k2935 %%b*2953 (if (eq? %%dnew2954 %%d2952) %%q2932 ((lambda (%%tmp2955) ((lambda (%%d2956) (cons '#structure(#4# #(#5# unsyntax-splicing #6# 3281201) (#7# #structure(#9# #(d) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(b* dnew) #(#7# #7#) #("i" "i")) #structure(#9# #(d) #(#7#) #("i")) . #83#)) %%d2956)) %%tmp2955)) %%dnew2954)))))) %%tmp2950) ((lambda (%%tmp2957) (if (if %%tmp2957 (apply (lambda (%%q2958) (= %%n2933 0)) %%tmp2957) #f) (apply (lambda (%%q2959) ((lambda (%%tmp2960) ((lambda (%%tmp2961) (if %%tmp2961 (apply (lambda (%%t2962) (%%k2935 (cons (list %%t2962 %%q2959) %%b*2934) %%t2962)) %%tmp2961) (syntax-error %%tmp2960))) ($syntax-dispatch %%tmp2960 '(any)))) (generate-temporaries (list %%q2959)))) %%tmp2957) ((lambda (%%tmp2963) (if (if %%tmp2963 (apply (lambda (%%q2964 %%d2965) (= %%n2933 0)) %%tmp2963) #f) (apply (lambda (%%q2966 %%d2967) (%%qs2930 %%d2967 %%n2933 %%b*2934 (lambda (%%b*2968 %%dnew2969) ((lambda (%%tmp2970) ((lambda (%%tmp2971) (if %%tmp2971 (apply (lambda (%%t2972) (%%k2935 (append (map list %%t2972 %%q2966) %%b*2968) ((lambda (%%tmp2975) ((lambda (%%d2976) (append %%t2972 %%d2976)) %%tmp2975)) %%dnew2969))) %%tmp2971) (syntax-error %%tmp2970))) ($syntax-dispatch %%tmp2970 'each-any))) (generate-temporaries %%q2966))))) %%tmp2963) ((lambda (%%tmp2979) (if (if %%tmp2979 (apply (lambda (%%q2980 %%d2981) (= %%n2933 0)) %%tmp2979) #f) (apply (lambda (%%q2982 %%d2983) (%%qs2930 %%d2983 %%n2933 %%b*2934 (lambda (%%b*2984 %%dnew2985) ((lambda (%%tmp2986) ((lambda (%%tmp2987) (if %%tmp2987 (apply (lambda (%%t2988) (%%k2935 (append (map (lambda (%%tmp2990 %%tmp2989) (list (cons %%tmp2989 '(#structure(#4# #(#5# ... #6# 3412290) (#7# . #85=(#structure(#9# #(t) #(#7#) #("i")) #structure(#9# () () ()) #structure(#9# #(b* dnew) #(#7# #7#) #("i" "i")) #structure(#9# #(q d) #(#7# #7#) #("i" "i")) . #83#))))) %%tmp2990)) %%q2982 %%t2988) %%b*2984) ((lambda (%%tmp2991) ((lambda (%%tmp2992) (if %%tmp2992 (apply (lambda (%%m2993) ((lambda (%%tmp2994) ((lambda (%%d2995) (append (apply append %%m2993) %%d2995)) %%tmp2994)) %%dnew2985)) %%tmp2992) (syntax-error %%tmp2991))) ($syntax-dispatch %%tmp2991 '#(each each-any)))) (map (lambda (%%tmp2998) (cons %%tmp2998 '(#structure(#4# #(#5# ... #6# 4723011) (#7# . #85#))))) %%t2988)))) %%tmp2987) (syntax-error %%tmp2986))) ($syntax-dispatch %%tmp2986 'each-any))) (generate-temporaries %%q2982))))) %%tmp2979) ((lambda (%%tmp3000) (if %%tmp3000 (apply (lambda (%%a3001 %%d3002) (%%qs2930 %%a3001 %%n2933 %%b*2934 (lambda (%%b*3003 %%anew3004) (%%qs2930 %%d3002 %%n2933 %%b*3003 (lambda (%%b*3005 %%dnew3006) (%%k2935 %%b*3005 (if (if (eq? %%anew3004 %%a3001) (eq? %%dnew3006 %%d3002) #f) %%q2932 ((lambda (%%tmp3007) ((lambda (%%tmp3008) (if %%tmp3008 (apply (lambda (%%a3009 %%d3010) (cons %%a3009 %%d3010)) %%tmp3008) (syntax-error %%tmp3007))) ($syntax-dispatch %%tmp3007 '(any any)))) (list %%anew3004 %%dnew3006))))))))) %%tmp3000) ((lambda (%%tmp3011) (if %%tmp3011 (apply (lambda (%%x3012) (%%vqs2931 %%x3012 %%n2933 %%b*2934 (lambda (%%b*3014 %%xnew*3015) (%%k2935 %%b*3014 (if ((letrec ((%%same?3016 (lambda (%%x*3017 %%xnew*3018) (if (null? %%x*3017) (null? %%xnew*3018) (if (not (null? %%xnew*3018)) (if (eq? (car %%x*3017) (car %%xnew*3018)) (%%same?3016 (cdr %%x*3017) (cdr %%xnew*3018)) #f) #f))))) %%same?3016) %%x3012 %%xnew*3015) %%q2932 ((lambda (%%tmp3020) ((lambda (%%tmp3021) (if %%tmp3021 (apply (lambda (%%x3022) (list->vector %%x3022)) %%tmp3021) (syntax-error %%tmp3020))) ($syntax-dispatch %%tmp3020 'each-any))) %%xnew*3015)))))) %%tmp3011) ((lambda (%%_3024) (%%k2935 %%b*2934 %%q2932)) %%tmp2936))) ($syntax-dispatch %%tmp2936 '#(vector each-any))))) ($syntax-dispatch %%tmp2936 '(any . any))))) ($syntax-dispatch %%tmp2936 '((#(free-id #structure(#4# #(#5# unsyntax-splicing #6# 790845) #86=(#7# . #83#))) . each-any) . any))))) ($syntax-dispatch %%tmp2936 '((#(free-id #structure(#4# #(#5# unsyntax #6# 790838) #86#)) . each-any) . any))))) ($syntax-dispatch %%tmp2936 '(#(free-id #structure(#4# #(#5# unsyntax #6# 725298) #86#)) any))))) ($syntax-dispatch %%tmp2936 '(#(free-id #structure(#4# #(#5# unsyntax-splicing #6# 725290) #86#)) . any))))) ($syntax-dispatch %%tmp2936 '(#(free-id #structure(#4# #(#5# unsyntax #6# 725282) #86#)) . any))))) ($syntax-dispatch %%tmp2936 '(#(free-id #structure(#4# #(#5# quasisyntax #6# 725275) #86#)) . any)))) %%q2932))) (%%vqs2931 (lambda (%%x*3025 %%n3026 %%b*3027 %%k3028) (if (null? %%x*3025) (%%k3028 %%b*3027 '()) (%%vqs2931 (cdr %%x*3025) %%n3026 %%b*3027 (lambda (%%b*3029 %%xnew*3030) ((lambda (%%tmp3031) ((lambda (%%tmp3032) (if (if %%tmp3032 (apply (lambda (%%q3033) (= %%n3026 0)) %%tmp3032) #f) (apply (lambda (%%q3034) ((lambda (%%tmp3035) ((lambda (%%tmp3036) (if %%tmp3036 (apply (lambda (%%t3037) (%%k3028 (append (map list %%t3037 %%q3034) %%b*3029) (append %%t3037 %%xnew*3030))) %%tmp3036) (syntax-error %%tmp3035))) ($syntax-dispatch %%tmp3035 'each-any))) (generate-temporaries %%q3034))) %%tmp3032) ((lambda (%%tmp3042) (if (if %%tmp3042 (apply (lambda (%%q3043) (= %%n3026 0)) %%tmp3042) #f) (apply (lambda (%%q3044) ((lambda (%%tmp3045) ((lambda (%%tmp3046) (if %%tmp3046 (apply (lambda (%%t3047) (%%k3028 (append (map (lambda (%%tmp3049 %%tmp3048) (list (cons %%tmp3048 '(#structure(#4# #(#5# ... #6# 3740009) (#7# . #87=(#structure(#9# #(t) #(#7#) #("i")) #structure(#9# #(q) #(#7#) #("i")) . #88=(#structure(#9# () () ()) #structure(#9# #(b* xnew*) #(#7# #7#) #("i" "i")) #structure(#9# () () ()) #structure(#9# #(x* n b* k) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) . #84#)))))) %%tmp3049)) %%q3044 %%t3047) %%b*3029) ((lambda (%%tmp3050) ((lambda (%%tmp3051) (if %%tmp3051 (apply (lambda (%%m3052) (append (apply append %%m3052) %%xnew*3030)) %%tmp3051) (syntax-error %%tmp3050))) ($syntax-dispatch %%tmp3050 '#(each each-any)))) (map (lambda (%%tmp3055) (cons %%tmp3055 '(#structure(#4# #(#5# ... #6# 5050730) (#7# . #87#))))) %%t3047)))) %%tmp3046) (syntax-error %%tmp3045))) ($syntax-dispatch %%tmp3045 'each-any))) (generate-temporaries %%q3044))) %%tmp3042) ((lambda (%%_3057) (%%qs2930 (car %%x*3025) %%n3026 %%b*3029 (lambda (%%b*3058 %%xnew3059) (%%k3028 %%b*3058 (cons %%xnew3059 %%xnew*3030))))) %%tmp3031))) ($syntax-dispatch %%tmp3031 '(#(free-id #structure(#4# #(#5# unsyntax-splicing #6# 1446246) #89=(#7# . #88#))) . each-any))))) ($syntax-dispatch %%tmp3031 '(#(free-id #structure(#4# #(#5# unsyntax #6# 1446241) #89#)) . each-any)))) (car %%x*3025)))))))) ((lambda (%%tmp3060) ((lambda (%%tmp3061) (if %%tmp3061 (apply (lambda (%%_3062 %%x3063) (%%qs2930 %%x3063 0 '() (lambda (%%b*3064 %%xnew3065) (if (eq? %%xnew3065 %%x3063) (list '#structure(#4# #(#5# syntax #6# 1380724) (#7# . #90=(#structure(#9# () () ()) #structure(#9# #(b* xnew) #(#7# #7#) #("i" "i")) #structure(#9# #(_ x) #(#7# #7#) #("i" "i")) . #84#))) %%x3063) ((lambda (%%tmp3066) ((lambda (%%tmp3067) (if %%tmp3067 (apply (lambda (%%b3068 %%x3069) (list '#structure(#4# #(#5# with-syntax #6# 2232694) #91=(#7# #structure(#9# #(b x) #(#7# #7#) #("i" "i")) . #90#)) %%b3068 (list '#structure(#4# #(#5# syntax #6# 3608950) #91#) %%x3069))) %%tmp3067) (syntax-error %%tmp3066))) ($syntax-dispatch %%tmp3066 '(each-any any)))) (list %%b*3064 %%xnew3065)))))) %%tmp3061) (syntax-error %%tmp3060))) ($syntax-dispatch %%tmp3060 '(any any)))) %%x2929)))) (%%global-extend219 'macro 'include (lambda (%%x3071) ((lambda (%%tmp3072) ((lambda (%%tmp3073) (if (if %%tmp3073 (apply (lambda (%%include3074 %%filename3075) ((lambda (%%filename3076) ($include-file-hook %%filename3076)) (syntax->datum %%filename3075))) %%tmp3073) #f) (apply (lambda (%%include3077 %%filename3078) (datum->syntax %%include3077 (##include-file-as-a-begin-expr (%%syntax-expression38 %%x3071)))) %%tmp3073) (syntax-error %%tmp3072))) ($syntax-dispatch %%tmp3072 '(any any)))) %%x3071))) (%%global-extend219 'macro 'case (lambda (%%x3079) ((lambda (%%tmp3080) ((lambda (%%tmp3081) (if %%tmp3081 (apply (lambda (%%_3082 %%e3083 %%m13084 %%m23085) ((lambda (%%tmp3086) ((lambda (%%body3087) (list '#structure(#4# #(#5# let #6# 1249696) #92=(#7# #structure(#9# #(body) #(#7#) #("i")) . #93=(#structure(#9# #(_ e m1 m2) #(#7# #7# #7# #7#) #("i" "i" "i" "i")) #structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) (list (list '#structure(#4# #(#5# t #6# 1642912) #92#) %%e3083)) %%body3087)) %%tmp3086)) ((letrec ((%%f3088 (lambda (%%clause3089 %%clauses3090) (if (null? %%clauses3090) ((lambda (%%tmp3091) ((lambda (%%tmp3092) (if %%tmp3092 (apply (lambda (%%e13093 %%e23094) (cons '#structure(#4# #(#5# begin #6# 3412373) (#7# #structure(#9# #(e1 e2) #(#7# #7#) #("i" "i")) . #94=(#structure(#9# () () ()) #structure(#9# #(clause clauses) #(#7# #7#) #("i" "i")) #structure(#9# #(f) #(#7#) #("i")) . #93#))) (cons %%e13093 %%e23094))) %%tmp3092) ((lambda (%%tmp3096) (if %%tmp3096 (apply (lambda (%%k3097 %%e13098 %%e23099) (list '#structure(#4# #(#5# if #6# 2298263) #95=(#7# #structure(#9# #(k e1 e2) #(#7# #7# #7#) #("i" "i" "i")) . #94#)) (list '#structure(#4# #(#5# memv #6# 2560407) #95#) '#structure(#4# #(#5# t #6# 2888087) #95#) (list '#structure(#4# #(#5# quote #6# 3019159) #95#) %%k3097)) (cons '#structure(#4# #(#5# begin #6# 3740055) #95#) (cons %%e13098 %%e23099)))) %%tmp3096) ((lambda (%%_3102) (syntax-error %%x3079)) %%tmp3091))) ($syntax-dispatch %%tmp3091 '(each-any any . each-any))))) ($syntax-dispatch %%tmp3091 '(#(free-id #structure(#4# #(#5# else #6# 1773973) (#7# . #94#))) any . each-any)))) %%clause3089) ((lambda (%%tmp3103) ((lambda (%%rest3104) ((lambda (%%tmp3105) ((lambda (%%tmp3106) (if %%tmp3106 (apply (lambda (%%k3107 %%e13108 %%e23109) (list '#structure(#4# #(#5# if #6# 3150236) #96=(#7# #structure(#9# #(k e1 e2) #(#7# #7# #7#) #("i" "i" "i")) #structure(#9# #(rest) #(#7#) #("i")) . #94#)) (list '#structure(#4# #(#5# memv #6# 3412380) #96#) '#structure(#4# #(#5# t #6# 3740060) #96#) (list '#structure(#4# #(#5# quote #6# 3871132) #96#) %%k3107)) (cons '#structure(#4# #(#5# begin #6# 3412381) #96#) (cons %%e13108 %%e23109)) %%rest3104)) %%tmp3106) ((lambda (%%_3112) (syntax-error %%x3079)) %%tmp3105))) ($syntax-dispatch %%tmp3105 '(each-any any . each-any)))) %%clause3089)) %%tmp3103)) (%%f3088 (car %%clauses3090) (cdr %%clauses3090))))))) %%f3088) %%m13084 %%m23085))) %%tmp3081) (syntax-error %%tmp3080))) ($syntax-dispatch %%tmp3080 '(any any any . each-any)))) %%x3079))) (%%global-extend219 'macro 'identifier-syntax (lambda (%%x3114) ((lambda (%%tmp3115) ((lambda (%%tmp3116) (if %%tmp3116 (apply (lambda (%%_3117 %%e3118) (list '#structure(#4# #(#5# lambda #6# 1577382) #97=(#7# #structure(#9# #(_ e) #(#7# #7#) #("i" "i")) . #98=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) '#structure(#4# #(#5# (#(#5# x #6# 2101670)) #6# 2036134) #97#) (list '#structure(#4# #(#5# syntax-case #6# 1708455) #97#) '#structure(#4# #(#5# x #6# 2494887) #97#) '#structure(#4# #(#5# () #6# 2625959) #97#) (list '#structure(#4# #(#5# id #6# 1839528) #97#) '#structure(#4# #(#5# (#(#5# identifier? #6# 2101672) #(#5# (#(#5# syntax #6# 2953640) #(#5# id #6# 3412392)) #6# 2888104)) #6# 2036136) #97#) (list '#structure(#4# #(#5# syntax #6# 3805608) #97#) %%e3118)) (list (cons %%_3117 '(#structure(#4# #(#5# x #6# 2036137) #97#) #structure(#4# #(#5# ... #6# 2494889) #97#))) (list '#structure(#4# #(#5# syntax #6# 2953641) #97#) (cons %%e3118 '(#structure(#4# #(#5# x #6# 3609001) #97#) #structure(#4# #(#5# ... #6# 4067753) #97#)))))))) %%tmp3116) ((lambda (%%tmp3119) (if (if %%tmp3119 (apply (lambda (%%_3120 %%id3121 %%exp13122 %%var3123 %%val3124 %%exp23125) (if (identifier? %%id3121) (identifier? %%var3123) #f)) %%tmp3119) #f) (apply (lambda (%%_3126 %%id3127 %%exp13128 %%var3129 %%val3130 %%exp23131) (list '#structure(#4# #(#5# cons #6# 725421) #99=(#7# #structure(#9# #(_ id exp1 var val exp2) #(#7# #7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i" "i")) . #98#)) '#structure(#4# #(#5# (#(#5# quote #6# 1053101) #(#5# macro! #6# 1118637)) #6# 1053101) #99#) (list '#structure(#4# #(#5# lambda #6# 1118638) #99#) '#structure(#4# #(#5# (#(#5# x #6# 1642926)) #6# 1577390) #99#) (list '#structure(#4# #(#5# syntax-case #6# 1249711) #99#) '#structure(#4# #(#5# x #6# 2036143) #99#) '#structure(#4# #(#5# (#(#5# set! #6# 2232751)) #6# 2167215) #99#) (list (list '#structure(#4# #(#5# set! #6# 1446320) #99#) %%var3129 %%val3130) (list '#structure(#4# #(#5# syntax #6# 2429360) #99#) %%exp23131)) (list (cons %%id3127 '(#structure(#4# #(#5# x #6# 1642929) #99#) #structure(#4# #(#5# ... #6# 2101681) #99#))) (list '#structure(#4# #(#5# syntax #6# 2560433) #99#) (cons %%exp13128 '(#structure(#4# #(#5# x #6# 3412401) #99#) #structure(#4# #(#5# ... #6# 3871153) #99#))))) (list %%id3127 (list '#structure(#4# #(#5# identifier? #6# 1642930) #99#) (list '#structure(#4# #(#5# syntax #6# 2494898) #99#) %%id3127)) (list '#structure(#4# #(#5# syntax #6# 3346866) #99#) %%exp13128)))))) %%tmp3119) (syntax-error %%tmp3115))) ($syntax-dispatch %%tmp3115 '(any (any any) ((#(free-id #structure(#4# #(#5# set! #6# 1577386) (#7# . #98#))) any any) any)))))) ($syntax-dispatch %%tmp3115 '(any any)))) %%x3114))) (%%global-extend219 'macro 'cond-expand (lambda (%%x3132) ((lambda (%%tmp3133) ((lambda (%%tmp3134) (if %%tmp3134 (apply (lambda (%%dummy3135) '#structure(#4# #(#5# (#(#5# syntax-error #6# 1446328) #(#5# "Unfulfilled cond-expand" #6# 2298296)) #6# 1380792) (#7# #structure(#9# #(dummy) #((#100="m" . #11#)) #("i")) #101=#structure(#9# () () ()) #102=#structure(#9# #(x) #((#100# . #11#)) #("i")) . #103=(#10# . #12#)))) %%tmp3134) ((lambda (%%tmp3136) (if %%tmp3136 (apply (lambda (%%dummy3137 %%body3138) (cons '#structure(#4# #(#5# begin #6# 528826) (#7# #structure(#9# #(dummy body) #((#100# . #11#) #7#) #("i" "i")) #101# #102# . #103#)) %%body3138)) %%tmp3136) ((lambda (%%tmp3140) (if %%tmp3140 (apply (lambda (%%dummy3141 %%body3142 %%more-clauses3143) (cons '#structure(#4# #(#5# begin #6# 528828) (#7# #structure(#9# #(dummy body more-clauses) #((#100# . #11#) #7# #7#) #("i" "i" "i")) #101# #102# . #103#)) %%body3142)) %%tmp3140) ((lambda (%%tmp3145) (if %%tmp3145 (apply (lambda (%%dummy3146 %%req13147 %%req23148 %%body3149 %%more-clauses3150) (cons '#structure(#4# #(#5# cond-expand #6# 528830) #104=(#7# #structure(#9# #(dummy req1 req2 body more-clauses) #((#100# . #11#) #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #101# #102# . #103#)) (cons (list %%req13147 (cons '#structure(#4# #(#5# cond-expand #6# 659904) #104#) (cons (cons (cons '#structure(#4# #(#5# and #6# 790977) #104#) %%req23148) %%body3149) %%more-clauses3150))) %%more-clauses3150))) %%tmp3145) ((lambda (%%tmp3155) (if %%tmp3155 (apply (lambda (%%dummy3156 %%body3157 %%more-clauses3158) (cons '#structure(#4# #(#5# cond-expand #6# 528837) (#7# #structure(#9# #(dummy body more-clauses) #((#100# . #11#) #7# #7#) #("i" "i" "i")) #101# #102# . #103#)) %%more-clauses3158)) %%tmp3155) ((lambda (%%tmp3160) (if %%tmp3160 (apply (lambda (%%dummy3161 %%req13162 %%req23163 %%body3164 %%more-clauses3165) (list '#structure(#4# #(#5# cond-expand #6# 528839) #105=(#7# #structure(#9# #(dummy req1 req2 body more-clauses) #((#100# . #11#) #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) #101# #102# . #103#)) (list %%req13162 (cons '#structure(#4# #(#5# begin #6# 659913) #105#) %%body3164)) (list '#structure(#4# #(#5# else #6# 594378) #105#) (cons '#structure(#4# #(#5# cond-expand #6# 659915) #105#) (cons (cons (cons '#structure(#4# #(#5# or #6# 790988) #105#) %%req23163) %%body3164) %%more-clauses3165))))) %%tmp3160) ((lambda (%%tmp3170) (if %%tmp3170 (apply (lambda (%%dummy3171 %%req3172 %%body3173 %%more-clauses3174) (list '#structure(#4# #(#5# cond-expand #6# 528847) #106=(#7# #structure(#9# #(dummy req body more-clauses) #((#100# . #11#) #7# #7# #7#) #("i" "i" "i" "i")) #101# #102# . #103#)) (list %%req3172 (cons '#structure(#4# #(#5# cond-expand #6# 659921) #106#) %%more-clauses3174)) (cons '#structure(#4# #(#5# else #6# 594386) #106#) %%body3173))) %%tmp3170) ((lambda (%%tmp3177) (if %%tmp3177 (apply (lambda (%%dummy3178 %%body3179 %%more-clauses3180) (cons '#structure(#4# #(#5# begin #6# 528852) (#7# #structure(#9# #(dummy body more-clauses) #((#100# . #11#) #7# #7#) #("i" "i" "i")) #101# #102# . #103#)) %%body3179)) %%tmp3177) ((lambda (%%tmp3182) (if %%tmp3182 (apply (lambda (%%dummy3183 %%body3184 %%more-clauses3185) (cons '#structure(#4# #(#5# begin #6# 528854) (#7# #structure(#9# #(dummy body more-clauses) #((#100# . #11#) #7# #7#) #("i" "i" "i")) #101# #102# . #103#)) %%body3184)) %%tmp3182) ((lambda (%%tmp3187) (if %%tmp3187 (apply (lambda (%%dummy3188 %%feature-id3189 %%body3190 %%more-clauses3191) (cons '#structure(#4# #(#5# cond-expand #6# 528856) (#7# #structure(#9# #(dummy feature-id body more-clauses) #((#100# . #11#) #7# #7# #7#) #("i" "i" "i" "i")) #101# #102# . #103#)) %%more-clauses3191)) %%tmp3187) (syntax-error %%tmp3133))) ($syntax-dispatch %%tmp3133 '(any (any . each-any) . each-any))))) ($syntax-dispatch %%tmp3133 '(any (#(free-id #structure(#4# #(#5# gambit #6# 1380821) (#7# #101# #102# . #103#))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3133 '(any (#(free-id #structure(#4# #(#5# srfi-0 #6# 1380819) (#7# #101# #102# . #103#))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3133 '(any ((#(free-id #structure(#4# #(#5# not #6# 1446350) (#7# #101# #102# . #103#))) any) . each-any) . each-any))))) ($syntax-dispatch %%tmp3133 '(any ((#(free-id #structure(#4# #(#5# or #6# 1446342) (#7# #101# #102# . #103#))) any . each-any) . each-any) . each-any))))) ($syntax-dispatch %%tmp3133 '(any ((#(free-id #structure(#4# #(#5# or #6# 1446340) (#7# #101# #102# . #103#)))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3133 '(any ((#(free-id #structure(#4# #(#5# and #6# 1446333) (#7# #101# #102# . #103#))) any . each-any) . each-any) . each-any))))) ($syntax-dispatch %%tmp3133 '(any ((#(free-id #structure(#4# #(#5# and #6# 1446331) (#7# #101# #102# . #103#)))) . each-any) . each-any))))) ($syntax-dispatch %%tmp3133 '(any (#(free-id #structure(#4# #(#5# else #6# 1380793) (#7# #101# #102# . #103#))) . each-any)))))) ($syntax-dispatch %%tmp3133 '(any)))) %%x3132))) (%%global-extend219 'macro 'define-macro (lambda (%%x3193) ((lambda (%%tmp3194) ((lambda (%%tmp3195) (if %%tmp3195 (apply (lambda (%%_3196 %%name3197 %%params3198 %%body13199 %%body23200) (list '#structure(#4# #(#5# define-macro #6# 1184223) #107=(#7# #structure(#9# #(_ name params body1 body2) #(#7# #7# #7# #7# #7#) #("i" "i" "i" "i" "i")) . #108=(#structure(#9# () () ()) #structure(#9# #(x) #(#7#) #("i")) #10# . #12#))) %%name3197 (cons '#structure(#4# #(#5# lambda #6# 2429407) #107#) (cons %%params3198 (cons %%body13199 %%body23200))))) %%tmp3195) ((lambda (%%tmp3202) (if %%tmp3202 (apply (lambda (%%_3203 %%name3204 %%expander3205) (list '#structure(#4# #(#5# define-syntax #6# 1184225) #109=(#7# #structure(#9# #(_ name expander) #(#7# #7# #7#) #("i" "i" "i")) . #108#)) %%name3204 (list '#structure(#4# #(#5# lambda #6# 1315298) #109#) '#structure(#4# #(#5# (#(#5# y #6# 1839586)) #6# 1774050) #109#) (list '#structure(#4# #(#5# syntax-case #6# 1446371) #109#) '#structure(#4# #(#5# y #6# 2232803) #109#) '#structure(#4# #(#5# () #6# 2363875) #109#) (list '#structure(#4# #(#5# (#(#5# k #6# 1642980) . #(#5# args #6# 1905124)) #6# 1577444) #109#) (list '#structure(#4# #(#5# let #6# 1642981) #109#) '#structure(#4# #(#5# (#(#5# (#(#5# lst #6# 2036197) #(#5# (#(#5# syntax->datum #6# 2363877) #(#5# (#(#5# syntax #6# 3346917) #(#5# args #6# 3805669)) #6# 3281381)) #6# 2298341)) #6# 1970661)) #6# 1905125) #109#) (list '#structure(#4# #(#5# datum->syntax #6# 1774054) #109#) '#structure(#4# #(#5# (#(#5# syntax #6# 1839591) #(#5# k #6# 2298343)) #6# 1774055) #109#) (cons '#structure(#4# #(#5# apply #6# 1839592) #109#) (cons %%expander3205 '#structure(#4# (#(#5# lst #6# 2822632)) #109#)))))))))) %%tmp3202) (syntax-error %%tmp3194))) ($syntax-dispatch %%tmp3194 '(any any any))))) ($syntax-dispatch %%tmp3194 '(any (any . any) any . each-any)))) %%x3193)))))));;;============================================================================

;;; Install the syntax-case expander.

(define c#expand-source
  (lambda (src)
    src))

(set! c#expand-source ;; setup compiler's expander
  (lambda (src)
    ((make-expander '(E) '(E)) src)))

(set! ##expand-source ;; setup interpreter's expander
  (lambda (src)
    (let ((expansion ((make-expander '(E) '(E)) src)))
      (if (syntax-case-debug)
          (pp (##desourcify expansion)))
      (unmark! expansion)
      expansion)))

;;;============================================================================
